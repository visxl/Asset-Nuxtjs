{
  "version": 3,
  "sources": ["../../../../highcharts/indicators/indicators-all.src.js"],
  "sourcesContent": ["/**\n * @license Highstock JS v11.4.7 (2024-08-14)\n *\n * All technical indicators for Highcharts Stock\n *\n * (c) 2010-2024 Pawel Fus\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/indicators-all', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/SMA/SMAIndicator.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Chart, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { line: LineSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, fireEvent, error, extend, isArray, merge, pick, splat } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The SMA series type.\n         *\n         * @private\n         */\n        class SMAIndicator extends LineSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            destroy() {\n                this.dataEventsToUnbind.forEach(function (unbinder) {\n                    unbinder();\n                });\n                super.destroy.apply(this, arguments);\n            }\n            /**\n             * @private\n             */\n            getName() {\n                const params = [];\n                let name = this.name;\n                if (!name) {\n                    (this.nameComponents || []).forEach(function (component, index) {\n                        params.push(this.options.params[component] +\n                            pick(this.nameSuffixes[index], ''));\n                    }, this);\n                    name = (this.nameBase || this.type.toUpperCase()) +\n                        (this.nameComponents ? ' (' + params.join(', ') + ')' : '');\n                }\n                return name;\n            }\n            /**\n             * @private\n             */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal.length, SMA = [], xData = [], yData = [];\n                let i, index = -1, range = 0, SMAPoint, sum = 0;\n                if (xVal.length < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                while (range < period - 1) {\n                    sum += index < 0 ? yVal[range] : yVal[range][index];\n                    range++;\n                }\n                // Calculate value one-by-one for each period in visible data\n                for (i = range; i < yValLen; i++) {\n                    sum += index < 0 ? yVal[i] : yVal[i][index];\n                    SMAPoint = [xVal[i], sum / period];\n                    SMA.push(SMAPoint);\n                    xData.push(SMAPoint[0]);\n                    yData.push(SMAPoint[1]);\n                    sum -= (index < 0 ?\n                        yVal[i - range] :\n                        yVal[i - range][index]);\n                }\n                return {\n                    values: SMA,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n            /**\n             * @private\n             */\n            init(chart, options) {\n                const indicator = this;\n                super.init.call(indicator, chart, options);\n                // Only after series are linked indicator can be processed.\n                const linkedSeriesUnbiner = addEvent(Chart, 'afterLinkSeries', function ({ isUpdating }) {\n                    // #18643 indicator shouldn't recalculate\n                    // values while series updating.\n                    if (isUpdating) {\n                        return;\n                    }\n                    const hasEvents = !!indicator.dataEventsToUnbind.length;\n                    if (indicator.linkedParent) {\n                        if (!hasEvents) {\n                            // No matter which indicator, always recalculate after\n                            // updating the data.\n                            indicator.dataEventsToUnbind.push(addEvent(indicator.linkedParent, 'updatedData', function () {\n                                indicator.recalculateValues();\n                            }));\n                            // Some indicators (like VBP) requires an additional\n                            // event (afterSetExtremes) to properly show the data.\n                            if (indicator.calculateOn.xAxis) {\n                                indicator.dataEventsToUnbind.push(addEvent(indicator.linkedParent.xAxis, indicator.calculateOn.xAxis, function () {\n                                    indicator.recalculateValues();\n                                }));\n                            }\n                        }\n                        // Most indicators are being calculated on chart's init.\n                        if (indicator.calculateOn.chart === 'init') {\n                            if (!indicator.processedYData) {\n                                indicator.recalculateValues();\n                            }\n                        }\n                        else if (!hasEvents) {\n                            // Some indicators (like VBP) has to recalculate their\n                            // values after other chart's events (render).\n                            const unbinder = addEvent(indicator.chart, indicator.calculateOn.chart, function () {\n                                indicator.recalculateValues();\n                                // Call this just once.\n                                unbinder();\n                            });\n                        }\n                    }\n                    else {\n                        return error('Series ' +\n                            indicator.options.linkedTo +\n                            ' not found! Check `linkedTo`.', false, chart);\n                    }\n                }, {\n                    order: 0\n                });\n                // Make sure we find series which is a base for an indicator\n                // chart.linkSeries();\n                indicator.dataEventsToUnbind = [];\n                indicator.eventsToUnbind.push(linkedSeriesUnbiner);\n            }\n            /**\n             * @private\n             */\n            recalculateValues() {\n                const croppedDataValues = [], indicator = this, oldData = indicator.points || [], oldDataLength = (indicator.xData || []).length, emptySet = {\n                    values: [],\n                    xData: [],\n                    yData: []\n                };\n                let overwriteData = true, oldFirstPointIndex, oldLastPointIndex, croppedData, min, max, i;\n                // Updating an indicator with redraw=false may destroy data.\n                // If there will be a following update for the parent series,\n                // we will try to access Series object without any properties\n                // (except for prototyped ones). This is what happens\n                // for example when using Axis.setDataGrouping(). See #16670\n                const processedData = indicator.linkedParent.options &&\n                    indicator.linkedParent.yData && // #18176, #18177 indicators should\n                    indicator.linkedParent.yData.length ? // Work with empty dataset\n                    (indicator.getValues(indicator.linkedParent, indicator.options.params) || emptySet) : emptySet;\n                // We need to update points to reflect changes in all,\n                // x and y's, values. However, do it only for non-grouped\n                // data - grouping does it for us (#8572)\n                if (oldDataLength &&\n                    !indicator.hasGroupedData &&\n                    indicator.visible &&\n                    indicator.points) {\n                    // When data is cropped update only avaliable points (#9493)\n                    if (indicator.cropped) {\n                        if (indicator.xAxis) {\n                            min = indicator.xAxis.min;\n                            max = indicator.xAxis.max;\n                        }\n                        croppedData = indicator.cropData(processedData.xData, processedData.yData, min, max);\n                        for (i = 0; i < croppedData.xData.length; i++) {\n                            // (#10774)\n                            croppedDataValues.push([\n                                croppedData.xData[i]\n                            ].concat(splat(croppedData.yData[i])));\n                        }\n                        oldFirstPointIndex = processedData.xData.indexOf(indicator.xData[0]);\n                        oldLastPointIndex = processedData.xData.indexOf(indicator.xData[indicator.xData.length - 1]);\n                        // Check if indicator points should be shifted (#8572)\n                        if (oldFirstPointIndex === -1 &&\n                            oldLastPointIndex === processedData.xData.length - 2) {\n                            if (croppedDataValues[0][0] === oldData[0].x) {\n                                croppedDataValues.shift();\n                            }\n                        }\n                        indicator.updateData(croppedDataValues);\n                    }\n                    else if (indicator.updateAllPoints || // #18710\n                        // Omit addPoint() and removePoint() cases\n                        processedData.xData.length !== oldDataLength - 1 &&\n                            processedData.xData.length !== oldDataLength + 1) {\n                        overwriteData = false;\n                        indicator.updateData(processedData.values);\n                    }\n                }\n                if (overwriteData) {\n                    indicator.xData = processedData.xData;\n                    indicator.yData = processedData.yData;\n                    indicator.options.data = processedData.values;\n                }\n                // Removal of processedXData property is required because on\n                // first translate processedXData array is empty\n                if (indicator.calculateOn.xAxis && indicator.processedXData) {\n                    delete indicator.processedXData;\n                    indicator.isDirty = true;\n                    indicator.redraw();\n                }\n                indicator.isDirtyData = !!indicator.linkedSeries.length;\n                fireEvent(indicator, 'updatedData'); // #18689\n            }\n            /**\n             * @private\n             */\n            processData() {\n                const series = this, compareToMain = series.options.compareToMain, linkedParent = series.linkedParent;\n                super.processData.apply(series, arguments);\n                if (series.dataModify &&\n                    linkedParent &&\n                    linkedParent.dataModify &&\n                    linkedParent.dataModify.compareValue &&\n                    compareToMain) {\n                    series.dataModify.compareValue =\n                        linkedParent.dataModify.compareValue;\n                }\n                return;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * The parameter allows setting line series type and use OHLC indicators.\n         * Data in OHLC format is required.\n         *\n         * @sample {highstock} stock/indicators/use-ohlc-data\n         *         Use OHLC data format to plot line chart\n         *\n         * @type      {boolean}\n         * @product   highstock\n         * @apioption plotOptions.line.useOhlcData\n         */\n        /**\n         * Simple moving average indicator (SMA). This series requires `linkedTo`\n         * option to be set.\n         *\n         * @sample stock/indicators/sma\n         *         Simple moving average indicator\n         *\n         * @extends      plotOptions.line\n         * @since        6.0.0\n         * @excluding    allAreas, colorAxis, dragDrop, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking, useOhlcData\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @optionparent plotOptions.sma\n         */\n        SMAIndicator.defaultOptions = merge(LineSeries.defaultOptions, {\n            /**\n             * The name of the series as shown in the legend, tooltip etc. If not\n             * set, it will be based on a technical indicator type and default\n             * params.\n             *\n             * @type {string}\n             */\n            name: void 0,\n            tooltip: {\n                /**\n                 * Number of decimals in indicator series.\n                 */\n                valueDecimals: 4\n            },\n            /**\n             * The main series ID that indicator will be based on. Required for this\n             * indicator.\n             *\n             * @type {string}\n             */\n            linkedTo: void 0,\n            /**\n             * Whether to compare indicator to the main series values\n             * or indicator values.\n             *\n             * @sample {highstock} stock/plotoptions/series-comparetomain/\n             *         Difference between comparing SMA values to the main series\n             *         and its own values.\n             *\n             * @type {boolean}\n             */\n            compareToMain: false,\n            /**\n             * Parameters used in calculation of regression series' points.\n             */\n            params: {\n                /**\n                 * The point index which indicator calculations will base. For\n                 * example using OHLC data, index=2 means the indicator will be\n                 * calculated using Low values.\n                 */\n                index: 3,\n                /**\n                 * The base period for indicator calculations. This is the number of\n                 * data points which are taken into account for the indicator\n                 * calculations.\n                 */\n                period: 14\n            }\n        });\n        extend(SMAIndicator.prototype, {\n            calculateOn: {\n                chart: 'init'\n            },\n            hasDerivedData: true,\n            nameComponents: ['period'],\n            nameSuffixes: [], // E.g. Zig Zag uses extra '%'' in the legend name\n            useCommonDataGrouping: true\n        });\n        SeriesRegistry.registerSeriesType('sma', SMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `SMA` series. If the [type](#series.sma.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.sma\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL, useOhlcData\n         * @requires  stock/indicators/indicators\n         * @apioption series.sma\n         */\n        (''); // Adds doclet above to the transpiled file\n\n        return SMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/EMA/EMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The EMA series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ema\n         *\n         * @augments Highcharts.Series\n         */\n        class EMAIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            accumulatePeriodPoints(period, index, yVal) {\n                let sum = 0, i = 0, y = 0;\n                while (i < period) {\n                    y = index < 0 ? yVal[i] : yVal[i][index];\n                    sum = sum + y;\n                    i++;\n                }\n                return sum;\n            }\n            calculateEma(xVal, yVal, i, EMApercent, calEMA, index, SMA) {\n                const x = xVal[i - 1], yValue = index < 0 ?\n                    yVal[i - 1] :\n                    yVal[i - 1][index], y = typeof calEMA === 'undefined' ?\n                    SMA : correctFloat((yValue * EMApercent) +\n                    (calEMA * (1 - EMApercent)));\n                return [x, y];\n            }\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, EMApercent = 2 / (period + 1), EMA = [], xData = [], yData = [];\n                let calEMA, EMAPoint, i, index = -1, sum = 0, SMA = 0;\n                // Check period, if bigger than points length, skip\n                if (yValLen < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                sum = this.accumulatePeriodPoints(period, index, yVal);\n                // First point\n                SMA = sum / period;\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen + 1; i++) {\n                    EMAPoint = this.calculateEma(xVal, yVal, i, EMApercent, calEMA, index, SMA);\n                    EMA.push(EMAPoint);\n                    xData.push(EMAPoint[0]);\n                    yData.push(EMAPoint[1]);\n                    calEMA = EMAPoint[1];\n                }\n                return {\n                    values: EMA,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Exponential moving average indicator (EMA). This series requires the\n         * `linkedTo` option to be set.\n         *\n         * @sample stock/indicators/ema\n         * Exponential moving average indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @optionparent plotOptions.ema\n         */\n        EMAIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                /**\n                 * The point index which indicator calculations will base. For\n                 * example using OHLC data, index=2 means the indicator will be\n                 * calculated using Low values.\n                 *\n                 * By default index value used to be set to 0. Since\n                 * Highcharts Stock 7 by default index is set to 3\n                 * which means that the ema indicator will be\n                 * calculated using Close values.\n                 */\n                index: 3,\n                period: 9 // @merge 14 in v6.2\n            }\n        });\n        SeriesRegistry.registerSeriesType('ema', EMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `EMA` series. If the [type](#series.ema.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ema\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @apioption series.ema\n         */\n        ''; // Adds doclet above to the transpiled file\n\n        return EMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/AD/ADIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { error, extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AD series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ad\n         *\n         * @augments Highcharts.Series\n         */\n        class ADIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static populateAverage(xVal, yVal, yValVolume, i, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            _period) {\n                const high = yVal[i][1], low = yVal[i][2], close = yVal[i][3], volume = yValVolume[i], adY = close === high && close === low || high === low ?\n                    0 :\n                    ((2 * close - low - high) / (high - low)) * volume, adX = xVal[i];\n                return [adX, adY];\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, volumeSeriesID = params.volumeSeriesID, volumeSeries = series.chart.get(volumeSeriesID), yValVolume = volumeSeries && volumeSeries.yData, yValLen = yVal ? yVal.length : 0, AD = [], xData = [], yData = [];\n                let len, i, ADPoint;\n                if (xVal.length <= period &&\n                    yValLen &&\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                if (!volumeSeries) {\n                    error('Series ' +\n                        volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                    return;\n                }\n                // When i = period <-- skip first N-points\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen; i++) {\n                    len = AD.length;\n                    ADPoint = ADIndicator.populateAverage(xVal, yVal, yValVolume, i, period);\n                    if (len > 0) {\n                        ADPoint[1] += AD[len - 1][1];\n                    }\n                    AD.push(ADPoint);\n                    xData.push(ADPoint[0]);\n                    yData.push(ADPoint[1]);\n                }\n                return {\n                    values: AD,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Accumulation Distribution (AD). This series requires `linkedTo` option to\n         * be set.\n         *\n         * @sample stock/indicators/accumulation-distribution\n         *         Accumulation/Distribution indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/accumulation-distribution\n         * @optionparent plotOptions.ad\n         */\n        ADIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unused index, do not inherit (#15362)\n                /**\n                 * The id of volume series which is mandatory.\n                 * For example using OHLC data, volumeSeriesID='volume' means\n                 * the indicator will be calculated using OHLC and volume values.\n                 *\n                 * @since 6.0.0\n                 */\n                volumeSeriesID: 'volume'\n            }\n        });\n        extend(ADIndicator.prototype, {\n            nameComponents: false,\n            nameBase: 'Accumulation/Distribution'\n        });\n        SeriesRegistry.registerSeriesType('ad', ADIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `AD` series. If the [type](#series.ad.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ad\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/accumulation-distribution\n         * @apioption series.ad\n         */\n        ''; // Add doclet above to transpiled file\n\n        return ADIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/AO/AOIndicator.js', [_modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { column: { prototype: columnProto }, sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge, correctFloat, isArray } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AO series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ao\n         *\n         * @augments Highcharts.Series\n         */\n        class AOIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            drawGraph() {\n                const indicator = this, options = indicator.options, points = indicator.points, userColor = indicator.userOptions.color, positiveColor = options.greaterBarColor, negativeColor = options.lowerBarColor, firstPoint = points[0];\n                let i;\n                if (!userColor && firstPoint) {\n                    firstPoint.color = positiveColor;\n                    for (i = 1; i < points.length; i++) {\n                        if (points[i].y > points[i - 1].y) {\n                            points[i].color = positiveColor;\n                        }\n                        else if (points[i].y < points[i - 1].y) {\n                            points[i].color = negativeColor;\n                        }\n                        else {\n                            points[i].color = points[i - 1].color;\n                        }\n                    }\n                }\n            }\n            getValues(series) {\n                const shortPeriod = 5, longPeriod = 34, xVal = series.xData || [], yVal = series.yData || [], yValLen = yVal.length, AO = [], // 0- date, 1- Awesome Oscillator\n                xData = [], yData = [], high = 1, low = 2;\n                let shortSMA, // Shorter Period SMA\n                longSMA, // Longer Period SMA\n                awesome, shortLastIndex, longLastIndex, price, i, j, longSum = 0, shortSum = 0;\n                if (xVal.length <= longPeriod ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = 0; i < longPeriod - 1; i++) {\n                    price = (yVal[i][high] + yVal[i][low]) / 2;\n                    if (i >= longPeriod - shortPeriod) {\n                        shortSum = correctFloat(shortSum + price);\n                    }\n                    longSum = correctFloat(longSum + price);\n                }\n                for (j = longPeriod - 1; j < yValLen; j++) {\n                    price = (yVal[j][high] + yVal[j][low]) / 2;\n                    shortSum = correctFloat(shortSum + price);\n                    longSum = correctFloat(longSum + price);\n                    shortSMA = shortSum / shortPeriod;\n                    longSMA = longSum / longPeriod;\n                    awesome = correctFloat(shortSMA - longSMA);\n                    AO.push([xVal[j], awesome]);\n                    xData.push(xVal[j]);\n                    yData.push(awesome);\n                    shortLastIndex = j + 1 - shortPeriod;\n                    longLastIndex = j + 1 - longPeriod;\n                    shortSum = correctFloat(shortSum -\n                        (yVal[shortLastIndex][high] +\n                            yVal[shortLastIndex][low]) / 2);\n                    longSum = correctFloat(longSum -\n                        (yVal[longLastIndex][high] +\n                            yVal[longLastIndex][low]) / 2);\n                }\n                return {\n                    values: AO,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Awesome Oscillator. This series requires the `linkedTo` option to\n         * be set and should be loaded after the `stock/indicators/indicators.js`\n         *\n         * @sample {highstock} stock/indicators/ao\n         *         Awesome\n         *\n         * @extends      plotOptions.sma\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               params, pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/ao\n         * @optionparent plotOptions.ao\n         */\n        AOIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                // Index and period are unchangeable, do not inherit (#15362)\n                index: void 0,\n                period: void 0\n            },\n            /**\n             * Color of the Awesome oscillator series bar that is greater than the\n             * previous one. Note that if a `color` is defined, the `color`\n             * takes precedence and the `greaterBarColor` is ignored.\n             *\n             * @sample {highstock} stock/indicators/ao/\n             *         greaterBarColor\n             *\n             * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since 7.0.0\n             */\n            greaterBarColor: \"#06b535\" /* Palette.positiveColor */,\n            /**\n             * Color of the Awesome oscillator series bar that is lower than the\n             * previous one. Note that if a `color` is defined, the `color`\n             * takes precedence and the `lowerBarColor` is ignored.\n             *\n             * @sample {highstock} stock/indicators/ao/\n             *         lowerBarColor\n             *\n             * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since 7.0.0\n             */\n            lowerBarColor: \"#f21313\" /* Palette.negativeColor */,\n            threshold: 0,\n            groupPadding: 0.2,\n            pointPadding: 0.2,\n            crisp: false,\n            states: {\n                hover: {\n                    halo: {\n                        size: 0\n                    }\n                }\n            }\n        });\n        extend(AOIndicator.prototype, {\n            nameBase: 'AO',\n            nameComponents: void 0,\n            // Columns support:\n            markerAttribs: noop,\n            getColumnMetrics: columnProto.getColumnMetrics,\n            crispCol: columnProto.crispCol,\n            translate: columnProto.translate,\n            drawPoints: columnProto.drawPoints\n        });\n        SeriesRegistry.registerSeriesType('ao', AOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An `AO` series. If the [type](#series.ao.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ao\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/ao\n         * @apioption series.ao\n         */\n        ''; // For including the above in the doclets\n\n        return AOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MultipleLinesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Wojciech Chmiel\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: { prototype: smaProto } } = SeriesRegistry.seriesTypes;\n        const { defined, error, merge } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var MultipleLinesComposition;\n        (function (MultipleLinesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Additional lines DOCS names. Elements of linesApiNames array should\n             * be consistent with DOCS line names defined in your implementation.\n             * Notice that linesApiNames should have decreased amount of elements\n             * relative to pointArrayMap (without pointValKey).\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const linesApiNames = ['bottomLine'];\n            /**\n             * Lines ids. Required to plot appropriate amount of lines.\n             * Notice that pointArrayMap should have more elements than\n             * linesApiNames, because it contains main line and additional lines ids.\n             * Also it should be consistent with amount of lines calculated in\n             * getValues method from your implementation.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const pointArrayMap = ['top', 'bottom'];\n            /**\n             * Names of the lines, between which the area should be plotted.\n             * If the drawing of the area should\n             * be disabled for some indicators, leave this option as an empty array.\n             * Names should be the same as the names in the pointArrayMap.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const areaLinesNames = ['top'];\n            /**\n             * Main line id.\n             *\n             * @private\n             * @type {string}\n             */\n            const pointValKey = 'top';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Composition useful for all indicators that have more than one line.\n             * Compose it with your implementation where you will provide the\n             * `getValues` method appropriate to your indicator and `pointArrayMap`,\n             * `pointValKey`, `linesApiNames` properties. Notice that `pointArrayMap`\n             * should be consistent with the amount of lines calculated in the\n             * `getValues` method.\n             *\n             * @private\n             */\n            function compose(IndicatorClass) {\n                const proto = IndicatorClass.prototype;\n                proto.linesApiNames = (proto.linesApiNames ||\n                    linesApiNames.slice());\n                proto.pointArrayMap = (proto.pointArrayMap ||\n                    pointArrayMap.slice());\n                proto.pointValKey = (proto.pointValKey ||\n                    pointValKey);\n                proto.areaLinesNames = (proto.areaLinesNames ||\n                    areaLinesNames.slice());\n                proto.drawGraph = indicatorDrawGraph;\n                proto.getGraphPath = indicatorGetGraphPath;\n                proto.toYData = indicatorToYData;\n                proto.translate = indicatorTranslate;\n                return IndicatorClass;\n            }\n            MultipleLinesComposition.compose = compose;\n            /**\n             * Generate the API name of the line\n             *\n             * @private\n             * @param propertyName name of the line\n             */\n            function getLineName(propertyName) {\n                return ('plot' +\n                    propertyName.charAt(0).toUpperCase() +\n                    propertyName.slice(1));\n            }\n            /**\n             * Create translatedLines Collection based on pointArrayMap.\n             *\n             * @private\n             * @param {string} [excludedValue]\n             *        Main line id\n             * @return {Array<string>}\n             *         Returns translated lines names without excluded value.\n             */\n            function getTranslatedLinesNames(indicator, excludedValue) {\n                const translatedLines = [];\n                (indicator.pointArrayMap || []).forEach((propertyName) => {\n                    if (propertyName !== excludedValue) {\n                        translatedLines.push(getLineName(propertyName));\n                    }\n                });\n                return translatedLines;\n            }\n            /**\n             * Draw main and additional lines.\n             *\n             * @private\n             */\n            function indicatorDrawGraph() {\n                const indicator = this, pointValKey = indicator.pointValKey, linesApiNames = indicator.linesApiNames, areaLinesNames = indicator.areaLinesNames, mainLinePoints = indicator.points, mainLineOptions = indicator.options, mainLinePath = indicator.graph, gappedExtend = {\n                    options: {\n                        gapSize: mainLineOptions.gapSize\n                    }\n                }, \n                // Additional lines point place holders:\n                secondaryLines = [], secondaryLinesNames = getTranslatedLinesNames(indicator, pointValKey);\n                let pointsLength = mainLinePoints.length, point;\n                // Generate points for additional lines:\n                secondaryLinesNames.forEach((plotLine, index) => {\n                    // Create additional lines point place holders\n                    secondaryLines[index] = [];\n                    while (pointsLength--) {\n                        point = mainLinePoints[pointsLength];\n                        secondaryLines[index].push({\n                            x: point.x,\n                            plotX: point.plotX,\n                            plotY: point[plotLine],\n                            isNull: !defined(point[plotLine])\n                        });\n                    }\n                    pointsLength = mainLinePoints.length;\n                });\n                // Modify options and generate area fill:\n                if (indicator.userOptions.fillColor && areaLinesNames.length) {\n                    const index = secondaryLinesNames.indexOf(getLineName(areaLinesNames[0])), secondLinePoints = secondaryLines[index], firstLinePoints = areaLinesNames.length === 1 ?\n                        mainLinePoints :\n                        secondaryLines[secondaryLinesNames.indexOf(getLineName(areaLinesNames[1]))], originalColor = indicator.color;\n                    indicator.points = firstLinePoints;\n                    indicator.nextPoints = secondLinePoints;\n                    indicator.color = indicator.userOptions.fillColor;\n                    indicator.options = merge(mainLinePoints, gappedExtend);\n                    indicator.graph = indicator.area;\n                    indicator.fillGraph = true;\n                    smaProto.drawGraph.call(indicator);\n                    indicator.area = indicator.graph;\n                    // Clean temporary properties:\n                    delete indicator.nextPoints;\n                    delete indicator.fillGraph;\n                    indicator.color = originalColor;\n                }\n                // Modify options and generate additional lines:\n                linesApiNames.forEach((lineName, i) => {\n                    if (secondaryLines[i]) {\n                        indicator.points = secondaryLines[i];\n                        if (mainLineOptions[lineName]) {\n                            indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        }\n                        else {\n                            error('Error: \"There is no ' + lineName +\n                                ' in DOCS options declared. Check if linesApiNames' +\n                                ' are consistent with your DOCS line names.\"');\n                        }\n                        indicator.graph = indicator['graph' + lineName];\n                        smaProto.drawGraph.call(indicator);\n                        // Now save lines:\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    else {\n                        error('Error: \"' + lineName + ' doesn\\'t have equivalent ' +\n                            'in pointArrayMap. To many elements in linesApiNames ' +\n                            'relative to pointArrayMap.\"');\n                    }\n                });\n                // Restore options and draw a main line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                smaProto.drawGraph.call(indicator);\n            }\n            /**\n             * Create the path based on points provided as argument.\n             * If indicator.nextPoints option is defined, create the areaFill.\n             *\n             * @private\n             * @param points Points on which the path should be created\n             */\n            function indicatorGetGraphPath(points) {\n                let areaPath, path = [], higherAreaPath = [];\n                points = points || this.points;\n                // Render Span\n                if (this.fillGraph && this.nextPoints) {\n                    areaPath = smaProto.getGraphPath.call(this, this.nextPoints);\n                    if (areaPath && areaPath.length) {\n                        areaPath[0][0] = 'L';\n                        path = smaProto.getGraphPath.call(this, points);\n                        higherAreaPath = areaPath.slice(0, path.length);\n                        // Reverse points, so that the areaFill will start from the end:\n                        for (let i = higherAreaPath.length - 1; i >= 0; i--) {\n                            path.push(higherAreaPath[i]);\n                        }\n                    }\n                }\n                else {\n                    path = smaProto.getGraphPath.apply(this, arguments);\n                }\n                return path;\n            }\n            /**\n             * @private\n             * @param {Highcharts.Point} point\n             *        Indicator point\n             * @return {Array<number>}\n             *         Returns point Y value for all lines\n             */\n            function indicatorToYData(point) {\n                const pointColl = [];\n                (this.pointArrayMap || []).forEach((propertyName) => {\n                    pointColl.push(point[propertyName]);\n                });\n                return pointColl;\n            }\n            /**\n             * Add lines plot pixel values.\n             *\n             * @private\n             */\n            function indicatorTranslate() {\n                const pointArrayMap = this.pointArrayMap;\n                let LinesNames = [], value;\n                LinesNames = getTranslatedLinesNames(this);\n                smaProto.translate.apply(this, arguments);\n                this.points.forEach((point) => {\n                    pointArrayMap.forEach((propertyName, i) => {\n                        value = point[propertyName];\n                        // If the modifier, like for example compare exists,\n                        // modified the original value by that method, #15867.\n                        if (this.dataModify) {\n                            value = this.dataModify.modifyValue(value);\n                        }\n                        if (value !== null) {\n                            point[LinesNames[i]] = this.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n        })(MultipleLinesComposition || (MultipleLinesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MultipleLinesComposition;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Aroon/AroonIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils\n        // Index of element with extreme value from array (min or max)\n        /**\n         * @private\n         */\n        function getExtremeIndexInArray(arr, extreme) {\n            let extremeValue = arr[0], valueIndex = 0, i;\n            for (i = 1; i < arr.length; i++) {\n                if (extreme === 'max' && arr[i] >= extremeValue ||\n                    extreme === 'min' && arr[i] <= extremeValue) {\n                    extremeValue = arr[i];\n                    valueIndex = i;\n                }\n            }\n            return valueIndex;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Aroon series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.aroon\n         *\n         * @augments Highcharts.Series\n         */\n        class AroonIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, \n                // 0- date, 1- Aroon Up, 2- Aroon Down\n                AR = [], xData = [], yData = [], low = 2, high = 1;\n                let aroonUp, aroonDown, xLow, xHigh, i, slicedY;\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = period - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - period + 1, i + 2);\n                    xLow = getExtremeIndexInArray(slicedY.map(function (elem) {\n                        return pick(elem[low], elem);\n                    }), 'min');\n                    xHigh = getExtremeIndexInArray(slicedY.map(function (elem) {\n                        return pick(elem[high], elem);\n                    }), 'max');\n                    aroonUp = (xHigh / period) * 100;\n                    aroonDown = (xLow / period) * 100;\n                    if (xVal[i + 1]) {\n                        AR.push([xVal[i + 1], aroonUp, aroonDown]);\n                        xData.push(xVal[i + 1]);\n                        yData.push([aroonUp, aroonDown]);\n                    }\n                }\n                return {\n                    values: AR,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Aroon. This series requires the `linkedTo` option to be\n         * set and should be loaded after the `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/aroon\n         *         Aroon\n         *\n         * @extends      plotOptions.sma\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/aroon\n         * @optionparent plotOptions.aroon\n         */\n        AroonIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Parameters used in calculation of aroon series points.\n             *\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unchangeable index, do not inherit (#15362)\n                period: 25\n            },\n            marker: {\n                enabled: false\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Aroon Up: {point.y}<br/>Aroon Down: {point.aroonDown}<br/>'\n            },\n            /**\n             * AroonDown line options.\n             */\n            aroonDown: {\n                /**\n                 * Styles for an aroonDown line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line. If not set, it's inherited from\n                     * [plotOptions.aroon.color](#plotOptions.aroon.color).\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(AroonIndicator.prototype, {\n            areaLinesNames: [],\n            linesApiNames: ['aroonDown'],\n            nameBase: 'Aroon',\n            pointArrayMap: ['y', 'aroonDown'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(AroonIndicator);\n        SeriesRegistry.registerSeriesType('aroon', AroonIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Aroon indicator. If the [type](#series.aroon.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.aroon\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/aroon\n         * @apioption series.aroon\n         */\n        ''; // To avoid removal of the above jsdoc\n\n        return AroonIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/AroonOscillator/AroonOscillatorIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { aroon: AroonIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Aroon Oscillator series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.aroonoscillator\n         *\n         * @augments Highcharts.Series\n         */\n        class AroonOscillatorIndicator extends AroonIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                // 0- date, 1- Aroon Oscillator\n                const ARO = [], xData = [], yData = [];\n                let aroonUp, aroonDown, oscillator, i;\n                const aroon = super.getValues.call(this, series, params);\n                for (i = 0; i < aroon.yData.length; i++) {\n                    aroonUp = aroon.yData[i][0];\n                    aroonDown = aroon.yData[i][1];\n                    oscillator = aroonUp - aroonDown;\n                    ARO.push([aroon.xData[i], oscillator]);\n                    xData.push(aroon.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: ARO,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Aroon Oscillator. This series requires the `linkedTo` option to be set\n         * and should be loaded after the `stock/indicators/indicators.js` and\n         * `stock/indicators/aroon.js`.\n         *\n         * @sample {highstock} stock/indicators/aroon-oscillator\n         *         Aroon Oscillator\n         *\n         * @extends      plotOptions.aroon\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, aroonDown, colorAxis, compare, compareBase,\n         *               joinBy, keys, navigatorOptions, pointInterval,\n         *               pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *               showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/aroon\n         * @requires     stock/indicators/aroon-oscillator\n         * @optionparent plotOptions.aroonoscillator\n         */\n        AroonOscillatorIndicator.defaultOptions = merge(AroonIndicator.defaultOptions, {\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b>: {point.y}'\n            }\n        });\n        extend(AroonOscillatorIndicator.prototype, {\n            nameBase: 'Aroon Oscillator',\n            linesApiNames: [],\n            pointArrayMap: ['y'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(AroonIndicator);\n        SeriesRegistry.registerSeriesType('aroonoscillator', AroonOscillatorIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An `Aroon Oscillator` series. If the [type](#series.aroonoscillator.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.aroonoscillator\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, aroonDown, colorAxis, compare, compareBase, dataParser,\n         *            dataURL, joinBy, keys, navigatorOptions, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/aroon\n         * @requires  stock/indicators/aroon-oscillator\n         * @apioption series.aroonoscillator\n         */\n        ''; // Adds doclet above to the transpiled file\n\n        return AroonOscillatorIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ATR/ATRIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { isArray, merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         * @private\n         */\n        function accumulateAverage(points, xVal, yVal, i) {\n            const xValue = xVal[i], yValue = yVal[i];\n            points.push([xValue, yValue]);\n        }\n        /**\n         * @private\n         */\n        function getTR(currentPoint, prevPoint) {\n            const pointY = currentPoint, prevY = prevPoint, HL = pointY[1] - pointY[2], HCp = typeof prevY === 'undefined' ? 0 : Math.abs(pointY[1] - prevY[3]), LCp = typeof prevY === 'undefined' ? 0 : Math.abs(pointY[2] - prevY[3]), TR = Math.max(HL, HCp, LCp);\n            return TR;\n        }\n        /**\n         * @private\n         */\n        function populateAverage(points, xVal, yVal, i, period, prevATR) {\n            const x = xVal[i - 1], TR = getTR(yVal[i - 1], yVal[i - 2]), y = (((prevATR * (period - 1)) + TR) / period);\n            return [x, y];\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ATR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.atr\n         *\n         * @augments Highcharts.Series\n         */\n        class ATRIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, xValue = xVal[0], yValue = yVal[0], points = [[xValue, yValue]], ATR = [], xData = [], yData = [];\n                let point, i, prevATR = 0, range = 1, TR = 0;\n                if ((xVal.length <= period) ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = 1; i <= yValLen; i++) {\n                    accumulateAverage(points, xVal, yVal, i);\n                    if (period < range) {\n                        point = populateAverage(points, xVal, yVal, i, period, prevATR);\n                        prevATR = point[1];\n                        ATR.push(point);\n                        xData.push(point[0]);\n                        yData.push(point[1]);\n                    }\n                    else if (period === range) {\n                        prevATR = TR / (i - 1);\n                        ATR.push([xVal[i - 1], prevATR]);\n                        xData.push(xVal[i - 1]);\n                        yData.push(prevATR);\n                        range++;\n                    }\n                    else {\n                        TR += getTR(yVal[i - 1], yVal[i - 2]);\n                        range++;\n                    }\n                }\n                return {\n                    values: ATR,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Average true range indicator (ATR). This series requires `linkedTo`\n         * option to be set.\n         *\n         * @sample stock/indicators/atr\n         *         ATR indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/atr\n         * @optionparent plotOptions.atr\n         */\n        ATRIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0 // Unused index, do not inherit (#15362)\n            }\n        });\n        SeriesRegistry.registerSeriesType('atr', ATRIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `ATR` series. If the [type](#series.atr.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.atr\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/atr\n         * @apioption series.atr\n         */\n        ''; // To include the above in the js output\n\n        return ATRIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/BB/BBIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /**\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, isArray, merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         * @private\n         */\n        function getStandardDeviation(arr, index, isOHLC, mean) {\n            const arrLen = arr.length;\n            let i = 0, std = 0, value, variance = 0;\n            for (; i < arrLen; i++) {\n                value = (isOHLC ? arr[i][index] : arr[i]) - mean;\n                variance += value * value;\n            }\n            variance = variance / (arrLen - 1);\n            std = Math.sqrt(variance);\n            return std;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Bollinger Bands series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.bb\n         *\n         * @augments Highcharts.Series\n         */\n        class BBIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init() {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    topLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    bottomLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            }\n            getValues(series, params) {\n                const period = params.period, standardDeviation = params.standardDeviation, xData = [], yData = [], xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, \n                // 0- date, 1-middle line, 2-top line, 3-bottom line\n                BB = [];\n                // Middle line, top line and bottom line\n                let ML, TL, BL, date, slicedX, slicedY, stdDev, point, i;\n                if (xVal.length < period) {\n                    return;\n                }\n                const isOHLC = isArray(yVal[0]);\n                for (i = period; i <= yValLen; i++) {\n                    slicedX = xVal.slice(i - period, i);\n                    slicedY = yVal.slice(i - period, i);\n                    point = SeriesRegistry.seriesTypes.sma.prototype.getValues.call(this, {\n                        xData: slicedX,\n                        yData: slicedY\n                    }, params);\n                    date = point.xData[0];\n                    ML = point.yData[0];\n                    stdDev = getStandardDeviation(slicedY, params.index, isOHLC, ML);\n                    TL = ML + standardDeviation * stdDev;\n                    BL = ML - standardDeviation * stdDev;\n                    BB.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: BB,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Bollinger bands (BB). This series requires the `linkedTo` option to be\n         * set and should be loaded after the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/bollinger-bands\n         *         Bollinger bands\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/bollinger-bands\n         * @optionparent plotOptions.bb\n         */\n        BBIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Option for fill color between lines in Bollinger Bands Indicator.\n             *\n             * @sample {highstock} stock/indicators/indicator-area-fill\n             *      Background fill between lines.\n             *\n             * @type      {Highcharts.ColorType}\n             * @since     9.3.2\n             * @apioption plotOptions.bb.fillColor\n             */\n            /**\n             * Parameters used in calculation of the regression points.\n             */\n            params: {\n                period: 20,\n                /**\n                 * Standard deviation for top and bottom bands.\n                 */\n                standardDeviation: 2,\n                index: 3\n            },\n            /**\n             * Bottom line options.\n             */\n            bottomLine: {\n                /**\n                 * Styles for the bottom line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line. If not set, it's inherited from\n                     * [plotOptions.bb.color](#plotOptions.bb.color).\n                     *\n                     * @type  {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * Top line options.\n             *\n             * @extends plotOptions.bb.bottomLine\n             */\n            topLine: {\n                /**\n                 * Styles for the top line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line. If not set, it's inherited from\n                     * [plotOptions.bb.color](#plotOptions.bb.color).\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Top: {point.top}<br/>Middle: {point.middle}<br/>Bottom: {point.bottom}<br/>'\n            },\n            marker: {\n                enabled: false\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(BBIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            nameComponents: ['period', 'standardDeviation'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(BBIndicator);\n        SeriesRegistry.registerSeriesType('bb', BBIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A bollinger bands indicator. If the [type](#series.bb.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.bb\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/bollinger-bands\n         * @apioption series.bb\n         */\n        ''; // To include the above in the js output\n\n        return BBIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/CCI/CCIIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { isArray, merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         * @private\n         */\n        function sumArray(array) {\n            return array.reduce(function (prev, cur) {\n                return prev + cur;\n            }, 0);\n        }\n        /**\n         * @private\n         */\n        function meanDeviation(arr, sma) {\n            const len = arr.length;\n            let sum = 0, i;\n            for (i = 0; i < len; i++) {\n                sum += Math.abs(sma - (arr[i]));\n            }\n            return sum;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The CCI series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.cci\n         *\n         * @augments Highcharts.Series\n         */\n        class CCIIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, TP = [], CCI = [], xData = [], yData = [];\n                let CCIPoint, p, periodTP = [], len, range = 1, smaTP, TPtemp, meanDev, i;\n                // CCI requires close value\n                if (xVal.length <= period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // Accumulate first N-points\n                while (range < period) {\n                    p = yVal[range - 1];\n                    TP.push((p[1] + p[2] + p[3]) / 3);\n                    range++;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    p = yVal[i - 1];\n                    TPtemp = (p[1] + p[2] + p[3]) / 3;\n                    len = TP.push(TPtemp);\n                    periodTP = TP.slice(len - period);\n                    smaTP = sumArray(periodTP) / period;\n                    meanDev = meanDeviation(periodTP, smaTP) / period;\n                    CCIPoint = ((TPtemp - smaTP) / (0.015 * meanDev));\n                    CCI.push([xVal[i - 1], CCIPoint]);\n                    xData.push(xVal[i - 1]);\n                    yData.push(CCIPoint);\n                }\n                return {\n                    values: CCI,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Commodity Channel Index (CCI). This series requires `linkedTo` option to\n         * be set.\n         *\n         * @sample stock/indicators/cci\n         *         CCI indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/cci\n         * @optionparent plotOptions.cci\n         */\n        CCIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0 // Unused index, do not inherit (#15362)\n            }\n        });\n        SeriesRegistry.registerSeriesType('cci', CCIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `CCI` series. If the [type](#series.cci.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.cci\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/cci\n         * @apioption series.cci\n         */\n        ''; // To include the above in the js output\n\n        return CCIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/CMF/CMFIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Sebastian Domas\n         *\n         *  Chaikin Money Flow indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The CMF series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.cmf\n         *\n         * @augments Highcharts.Series\n         */\n        class CMFIndicator extends SMAIndicator {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.nameBase = 'Chaikin Money Flow';\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Checks if the series and volumeSeries are accessible, number of\n             * points.x is longer than period, is series has OHLC data\n             * @private\n             * @param {Highcharts.CMFIndicator} this indicator to use.\n             * @return {boolean} True if series is valid and can be computed,\n             * otherwise false.\n             */\n            isValid() {\n                const chart = this.chart, options = this.options, series = this.linkedParent, volumeSeries = (this.volumeSeries ||\n                    (this.volumeSeries =\n                        chart.get(options.params.volumeSeriesID))), isSeriesOHLC = (series &&\n                    series.yData &&\n                    series.yData[0].length === 4);\n                /**\n                 * @private\n                 * @param {Highcharts.Series} serie to check length validity on.\n                 * @return {boolean|undefined} true if length is valid.\n                 */\n                function isLengthValid(serie) {\n                    return serie.xData &&\n                        serie.xData.length >= options.params.period;\n                }\n                return !!(series &&\n                    volumeSeries &&\n                    isLengthValid(series) &&\n                    isLengthValid(volumeSeries) && isSeriesOHLC);\n            }\n            /**\n             * Returns indicator's data.\n             * @private\n             * @param {Highcharts.CMFIndicator} this indicator to use.\n             * @param {Highcharts.Series} series to calculate values from\n             * @param {Highcharts.CMFIndicatorParamsOptions} params to pass\n             * @return {boolean|Highcharts.IndicatorNullableValuesObject} Returns false if the\n             * indicator is not valid, otherwise returns Values object.\n             */\n            getValues(series, params) {\n                if (!this.isValid()) {\n                    return;\n                }\n                return this.getMoneyFlow(series.xData, series.yData, this.volumeSeries.yData, params.period);\n            }\n            /**\n             * @private\n             *\n             * @param {Array<number>} xData\n             * x timestamp values\n             *\n             * @param {Array<number>} seriesYData\n             * yData of basic series\n             *\n             * @param {Array<number>} volumeSeriesYData\n             * yData of volume series\n             *\n             * @param {number} period\n             * indicator's param\n             *\n             * @return {Highcharts.IndicatorNullableValuesObject}\n             * object containing computed money flow data\n             */\n            getMoneyFlow(xData, seriesYData, volumeSeriesYData, period) {\n                const len = seriesYData.length, moneyFlowVolume = [], moneyFlowXData = [], moneyFlowYData = [], values = [];\n                let i, point, nullIndex = -1, sumVolume = 0, sumMoneyFlowVolume = 0;\n                /**\n                 * Calculates money flow volume, changes i, nullIndex vars from\n                 * upper scope!\n                 *\n                 * @private\n                 *\n                 * @param {Array<number>} ohlc\n                 * OHLC point\n                 *\n                 * @param {number} volume\n                 * Volume point's y value\n                 *\n                 * @return {number|null}\n                 * Volume * moneyFlowMultiplier\n                 */\n                function getMoneyFlowVolume(ohlc, volume) {\n                    const high = ohlc[1], low = ohlc[2], close = ohlc[3], isValid = volume !== null &&\n                        high !== null &&\n                        low !== null &&\n                        close !== null &&\n                        high !== low;\n                    /**\n                     * @private\n                     * @param {number} h\n                     * High value\n                     * @param {number} l\n                     * Low value\n                     * @param {number} c\n                     * Close value\n                     * @return {number}\n                     * Calculated multiplier for the point\n                     */\n                    function getMoneyFlowMultiplier(h, l, c) {\n                        return ((c - l) - (h - c)) / (h - l);\n                    }\n                    return isValid ?\n                        getMoneyFlowMultiplier(high, low, close) * volume :\n                        ((nullIndex = i), null);\n                }\n                if (period > 0 && period <= len) {\n                    for (i = 0; i < period; i++) {\n                        moneyFlowVolume[i] = getMoneyFlowVolume(seriesYData[i], volumeSeriesYData[i]);\n                        sumVolume += volumeSeriesYData[i];\n                        sumMoneyFlowVolume += moneyFlowVolume[i];\n                    }\n                    moneyFlowXData.push(xData[i - 1]);\n                    moneyFlowYData.push(i - nullIndex >= period && sumVolume !== 0 ?\n                        sumMoneyFlowVolume / sumVolume :\n                        null);\n                    values.push([moneyFlowXData[0], moneyFlowYData[0]]);\n                    for (; i < len; i++) {\n                        moneyFlowVolume[i] = getMoneyFlowVolume(seriesYData[i], volumeSeriesYData[i]);\n                        sumVolume -= volumeSeriesYData[i - period];\n                        sumVolume += volumeSeriesYData[i];\n                        sumMoneyFlowVolume -= moneyFlowVolume[i - period];\n                        sumMoneyFlowVolume += moneyFlowVolume[i];\n                        point = [\n                            xData[i],\n                            i - nullIndex >= period ?\n                                sumMoneyFlowVolume / sumVolume :\n                                null\n                        ];\n                        moneyFlowXData.push(point[0]);\n                        moneyFlowYData.push(point[1]);\n                        values.push([point[0], point[1]]);\n                    }\n                }\n                return {\n                    values: values,\n                    xData: moneyFlowXData,\n                    yData: moneyFlowYData\n                };\n            }\n        }\n        /**\n         * Chaikin Money Flow indicator (cmf).\n         *\n         * @sample stock/indicators/cmf/\n         *         Chaikin Money Flow indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @excluding    animationLimit\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/cmf\n         * @optionparent plotOptions.cmf\n         */\n        CMFIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unused index, do not inherit (#15362)\n                /**\n                 * The id of another series to use its data as volume data for the\n                 * indicator calculation.\n                 */\n                volumeSeriesID: 'volume'\n            }\n        });\n        SeriesRegistry.registerSeriesType('cmf', CMFIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `CMF` series. If the [type](#series.cmf.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.cmf\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/cmf\n         * @apioption series.cmf\n         */\n        ''; // Adds doclet above to the transpiled file\n\n        return CMFIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DMI/DMIIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *  (c) 2010-2024 Rafal Sebestjanski\n         *\n         *  Directional Movement Index (DMI) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, extend, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Directional Movement Index (DMI) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dmi\n         *\n         * @augments Highcharts.Series\n         */\n        class DMIIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            calculateDM(yVal, i, isPositiveDM) {\n                const currentHigh = yVal[i][1], currentLow = yVal[i][2], previousHigh = yVal[i - 1][1], previousLow = yVal[i - 1][2];\n                let DM;\n                if (currentHigh - previousHigh > previousLow - currentLow) {\n                    // For +DM\n                    DM = isPositiveDM ? Math.max(currentHigh - previousHigh, 0) : 0;\n                }\n                else {\n                    // For -DM\n                    DM = !isPositiveDM ? Math.max(previousLow - currentLow, 0) : 0;\n                }\n                return correctFloat(DM);\n            }\n            calculateDI(smoothedDM, tr) {\n                return smoothedDM / tr * 100;\n            }\n            calculateDX(plusDI, minusDI) {\n                return correctFloat(Math.abs(plusDI - minusDI) / Math.abs(plusDI + minusDI) * 100);\n            }\n            smoothValues(accumulatedValues, currentValue, period) {\n                return correctFloat(accumulatedValues - accumulatedValues / period + currentValue);\n            }\n            getTR(currentPoint, prevPoint) {\n                return correctFloat(Math.max(\n                // `currentHigh - currentLow`\n                currentPoint[1] - currentPoint[2], \n                // `currentHigh - previousClose`\n                !prevPoint ? 0 : Math.abs(currentPoint[1] - prevPoint[3]), \n                // `currentLow - previousClose`\n                !prevPoint ? 0 : Math.abs(currentPoint[2] - prevPoint[3])));\n            }\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, DMI = [], xData = [], yData = [];\n                if (\n                // Check period, if bigger than points length, skip\n                (xVal.length <= period) ||\n                    // Only ohlc data is valid\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                let prevSmoothedPlusDM = 0, prevSmoothedMinusDM = 0, prevSmoothedTR = 0, i;\n                for (i = 1; i < yValLen; i++) {\n                    let smoothedPlusDM, smoothedMinusDM, smoothedTR, plusDM, // +DM\n                    minusDM, // -DM\n                    TR, plusDI, // +DI\n                    minusDI, // -DI\n                    DX;\n                    if (i <= period) {\n                        plusDM = this.calculateDM(yVal, i, true);\n                        minusDM = this.calculateDM(yVal, i);\n                        TR = this.getTR(yVal[i], yVal[i - 1]);\n                        // Accumulate first period values to smooth them later\n                        prevSmoothedPlusDM += plusDM;\n                        prevSmoothedMinusDM += minusDM;\n                        prevSmoothedTR += TR;\n                        // Get all values for the first point\n                        if (i === period) {\n                            plusDI = this.calculateDI(prevSmoothedPlusDM, prevSmoothedTR);\n                            minusDI = this.calculateDI(prevSmoothedMinusDM, prevSmoothedTR);\n                            DX = this.calculateDX(prevSmoothedPlusDM, prevSmoothedMinusDM);\n                            DMI.push([xVal[i], DX, plusDI, minusDI]);\n                            xData.push(xVal[i]);\n                            yData.push([DX, plusDI, minusDI]);\n                        }\n                    }\n                    else {\n                        // Calculate current values\n                        plusDM = this.calculateDM(yVal, i, true);\n                        minusDM = this.calculateDM(yVal, i);\n                        TR = this.getTR(yVal[i], yVal[i - 1]);\n                        // Smooth +DM, -DM and TR\n                        smoothedPlusDM = this.smoothValues(prevSmoothedPlusDM, plusDM, period);\n                        smoothedMinusDM = this.smoothValues(prevSmoothedMinusDM, minusDM, period);\n                        smoothedTR = this.smoothValues(prevSmoothedTR, TR, period);\n                        // Save current smoothed values for the next step\n                        prevSmoothedPlusDM = smoothedPlusDM;\n                        prevSmoothedMinusDM = smoothedMinusDM;\n                        prevSmoothedTR = smoothedTR;\n                        // Get all next points (except the first one calculated above)\n                        plusDI = this.calculateDI(prevSmoothedPlusDM, prevSmoothedTR);\n                        minusDI = this.calculateDI(prevSmoothedMinusDM, prevSmoothedTR);\n                        DX = this.calculateDX(prevSmoothedPlusDM, prevSmoothedMinusDM);\n                        DMI.push([xVal[i], DX, plusDI, minusDI]);\n                        xData.push(xVal[i]);\n                        yData.push([DX, plusDI, minusDI]);\n                    }\n                }\n                return {\n                    values: DMI,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Directional Movement Index (DMI).\n         * This series requires the `linkedTo` option to be set and should\n         * be loaded after the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/dmi\n         *         DMI indicator\n         *\n         * @extends      plotOptions.sma\n         * @since 9.1.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/dmi\n         * @optionparent plotOptions.dmi\n         */\n        DMIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0 // Unused index, do not inherit (#15362)\n            },\n            marker: {\n                enabled: false\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color: {point.color}\">' +\n                    '\\u25CF</span><b> {series.name}</b><br/>' +\n                    '<span style=\"color: {point.color}\">DX</span>: {point.y}<br/>' +\n                    '<span style=\"color: ' +\n                    '{point.series.options.plusDILine.styles.lineColor}\">' +\n                    '+DI</span>: {point.plusDI}<br/>' +\n                    '<span style=\"color: ' +\n                    '{point.series.options.minusDILine.styles.lineColor}\">' +\n                    '-DI</span>: {point.minusDI}<br/>'\n            },\n            /**\n             * +DI line options.\n             */\n            plusDILine: {\n                /**\n                 * Styles for the +DI line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: \"#06b535\" /* Palette.positiveColor */ // Green-ish\n                }\n            },\n            /**\n             * -DI line options.\n             */\n            minusDILine: {\n                /**\n                 * Styles for the -DI line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: \"#f21313\" /* Palette.negativeColor */ // Red-ish\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(DMIIndicator.prototype, {\n            areaLinesNames: [],\n            nameBase: 'DMI',\n            linesApiNames: ['plusDILine', 'minusDILine'],\n            pointArrayMap: ['y', 'plusDI', 'minusDI'],\n            parallelArrays: ['x', 'y', 'plusDI', 'minusDI'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(DMIIndicator);\n        SeriesRegistry.registerSeriesType('dmi', DMIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The Directional Movement Index (DMI) indicator series.\n         * If the [type](#series.dmi.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.dmi\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/dmi\n         * @apioption series.dmi\n         */\n        ''; // To include the above in the js output\n\n        return DMIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DPO/DPOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge, correctFloat, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         * @private\n         */\n        function accumulatePoints(sum, yVal, i, index, subtract) {\n            const price = pick(yVal[i][index], yVal[i]);\n            if (subtract) {\n                return correctFloat(sum - price);\n            }\n            return correctFloat(sum + price);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The DPO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dpo\n         *\n         * @augments Highcharts.Series\n         */\n        class DPOIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, index = params.index, offset = Math.floor(period / 2 + 1), range = period + offset, xVal = series.xData || [], yVal = series.yData || [], yValLen = yVal.length, \n                // 0- date, 1- Detrended Price Oscillator\n                DPO = [], xData = [], yData = [];\n                let oscillator, periodIndex, rangeIndex, price, i, j, sum = 0;\n                if (xVal.length <= range) {\n                    return;\n                }\n                // Accumulate first N-points for SMA\n                for (i = 0; i < period - 1; i++) {\n                    sum = accumulatePoints(sum, yVal, i, index);\n                }\n                // Detrended Price Oscillator formula:\n                // DPO = Price - Simple moving average [from (n / 2 + 1) days ago]\n                for (j = 0; j <= yValLen - range; j++) {\n                    periodIndex = j + period - 1;\n                    rangeIndex = j + range - 1;\n                    // Adding the last period point\n                    sum = accumulatePoints(sum, yVal, periodIndex, index);\n                    price = pick(yVal[rangeIndex][index], yVal[rangeIndex]);\n                    oscillator = price - sum / period;\n                    // Subtracting the first period point\n                    sum = accumulatePoints(sum, yVal, j, index, true);\n                    DPO.push([xVal[rangeIndex], oscillator]);\n                    xData.push(xVal[rangeIndex]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: DPO,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Detrended Price Oscillator. This series requires the `linkedTo` option to\n         * be set and should be loaded after the `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/dpo\n         *         Detrended Price Oscillator\n         *\n         * @extends      plotOptions.sma\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/dpo\n         * @optionparent plotOptions.dpo\n         */\n        DPOIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Parameters used in calculation of Detrended Price Oscillator series\n             * points.\n             */\n            params: {\n                index: 0,\n                /**\n                 * Period for Detrended Price Oscillator\n                 */\n                period: 21\n            }\n        });\n        extend(DPOIndicator.prototype, {\n            nameBase: 'DPO'\n        });\n        SeriesRegistry.registerSeriesType('dpo', DPOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Detrended Price Oscillator. If the [type](#series.dpo.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.dpo\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/dpo\n         * @apioption series.dpo\n         */\n        ''; // To include the above in the js output'\n\n        return DPOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Chaikin/ChaikinIndicator.js', [_modules['Stock/Indicators/AD/ADIndicator.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AD, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { ema: EMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, extend, merge, error } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Chaikin series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.chaikin\n         *\n         * @augments Highcharts.Series\n         */\n        class ChaikinIndicator extends EMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const periods = params.periods, period = params.period, \n                // 0- date, 1- Chaikin Oscillator\n                CHA = [], xData = [], yData = [];\n                let oscillator, i;\n                // Check if periods are correct\n                if (periods.length !== 2 || periods[1] <= periods[0]) {\n                    error('Error: \"Chaikin requires two periods. Notice, first ' +\n                        'period should be lower than the second one.\"');\n                    return;\n                }\n                // Accumulation Distribution Line data\n                const ADL = AD.prototype.getValues.call(this, series, {\n                    volumeSeriesID: params.volumeSeriesID,\n                    period: period\n                });\n                // Check if adl is calculated properly, if not skip\n                if (!ADL) {\n                    return;\n                }\n                // Shorter Period EMA\n                const SPE = super.getValues.call(this, ADL, {\n                    period: periods[0]\n                });\n                // Longer Period EMA\n                const LPE = super.getValues.call(this, ADL, {\n                    period: periods[1]\n                });\n                // Check if ema is calculated properly, if not skip\n                if (!SPE || !LPE) {\n                    return;\n                }\n                const periodsOffset = periods[1] - periods[0];\n                for (i = 0; i < LPE.yData.length; i++) {\n                    oscillator = correctFloat(SPE.yData[i + periodsOffset] -\n                        LPE.yData[i]);\n                    CHA.push([LPE.xData[i], oscillator]);\n                    xData.push(LPE.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: CHA,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Chaikin Oscillator. This series requires the `linkedTo` option to\n         * be set and should be loaded after the `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/chaikin\n         *         Chaikin Oscillator\n         *\n         * @extends      plotOptions.ema\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/chaikin\n         * @optionparent plotOptions.chaikin\n         */\n        ChaikinIndicator.defaultOptions = merge(EMAIndicator.defaultOptions, {\n            /**\n             * Parameters used in calculation of Chaikin Oscillator\n             * series points.\n             *\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unused index, do not inherit (#15362)\n                /**\n                 * The id of volume series which is mandatory.\n                 * For example using OHLC data, volumeSeriesID='volume' means\n                 * the indicator will be calculated using OHLC and volume values.\n                 */\n                volumeSeriesID: 'volume',\n                /**\n                 * Parameter used indirectly for calculating the `AD` indicator.\n                 * Decides about the number of data points that are taken\n                 * into account for the indicator calculations.\n                 */\n                period: 9,\n                /**\n                 * Periods for Chaikin Oscillator calculations.\n                 *\n                 * @type    {Array<number>}\n                 * @default [3, 10]\n                 */\n                periods: [3, 10]\n            }\n        });\n        extend(ChaikinIndicator.prototype, {\n            nameBase: 'Chaikin Osc',\n            nameComponents: ['periods']\n        });\n        SeriesRegistry.registerSeriesType('chaikin', ChaikinIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Chaikin Oscillator` series. If the [type](#series.chaikin.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.chaikin\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, stacking, showInNavigator\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/chaikin\n         * @apioption series.chaikin\n         */\n        ''; // To include the above in the js output\n\n        return ChaikinIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/CMO/CMOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The CMO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.cmo\n         *\n         * @augments Highcharts.Series\n         */\n        class CMOIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, CMO = [], xData = [], yData = [];\n                let i, index = params.index, values;\n                if (xVal.length < period) {\n                    return;\n                }\n                if (isNumber(yVal[0])) {\n                    values = yVal;\n                }\n                else {\n                    // In case of the situation, where the series type has data length\n                    // shorter then 4 (HLC, range), this ensures that we are not trying\n                    // to reach the index out of bounds\n                    index = Math.min(index, yVal[0].length - 1);\n                    values = yVal.map((value) => value[index]);\n                }\n                let firstAddedSum = 0, sumOfHigherValues = 0, sumOfLowerValues = 0, y;\n                // Calculate first point, check if the first value\n                // was added to sum of higher/lower values, and what was the value.\n                for (let j = period; j > 0; j--) {\n                    if (values[j] > values[j - 1]) {\n                        sumOfHigherValues += values[j] - values[j - 1];\n                    }\n                    else if (values[j] < values[j - 1]) {\n                        sumOfLowerValues += values[j - 1] - values[j];\n                    }\n                }\n                // You might divide by 0 if all values are equal,\n                // so return 0 in this case.\n                y =\n                    sumOfHigherValues + sumOfLowerValues > 0 ?\n                        (100 * (sumOfHigherValues - sumOfLowerValues)) /\n                            (sumOfHigherValues + sumOfLowerValues) :\n                        0;\n                xData.push(xVal[period]);\n                yData.push(y);\n                CMO.push([xVal[period], y]);\n                for (i = period + 1; i < yValLen; i++) {\n                    firstAddedSum = Math.abs(values[i - period - 1] - values[i - period]);\n                    if (values[i] > values[i - 1]) {\n                        sumOfHigherValues += values[i] - values[i - 1];\n                    }\n                    else if (values[i] < values[i - 1]) {\n                        sumOfLowerValues += values[i - 1] - values[i];\n                    }\n                    // Check, to which sum was the first value added to,\n                    // and subtract this value from given sum.\n                    if (values[i - period] > values[i - period - 1]) {\n                        sumOfHigherValues -= firstAddedSum;\n                    }\n                    else {\n                        sumOfLowerValues -= firstAddedSum;\n                    }\n                    // Same as above.\n                    y =\n                        sumOfHigherValues + sumOfLowerValues > 0 ?\n                            (100 * (sumOfHigherValues - sumOfLowerValues)) /\n                                (sumOfHigherValues + sumOfLowerValues) :\n                            0;\n                    xData.push(xVal[i]);\n                    yData.push(y);\n                    CMO.push([xVal[i], y]);\n                }\n                return {\n                    values: CMO,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Chande Momentum Oscilator (CMO) technical indicator. This series\n         * requires the `linkedTo` option to be set and should be loaded after\n         * the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/cmo\n         *         CMO indicator\n         *\n         * @extends      plotOptions.sma\n         * @since 9.1.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/cmo\n         * @optionparent plotOptions.cmo\n         */\n        CMOIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                period: 20,\n                index: 3\n            }\n        });\n        SeriesRegistry.registerSeriesType('cmo', CMOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `CMO` series. If the [type](#series.cmo.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.cmo\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/cmo\n         * @apioption series.cmo\n         */\n        (''); // To include the above in the js output\n\n        return CMOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DEMA/DEMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { ema: EMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The DEMA series Type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dema\n         *\n         * @augments Highcharts.Series\n         */\n        class DEMAIndicator extends EMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getEMA(yVal, prevEMA, SMA, index, i, xVal) {\n                return super.calculateEma(xVal || [], yVal, typeof i === 'undefined' ? 1 : i, this.EMApercent, prevEMA, typeof index === 'undefined' ? -1 : index, SMA);\n            }\n            getValues(series, params) {\n                const period = params.period, EMAvalues = [], doubledPeriod = 2 * period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, DEMA = [], xDataDema = [], yDataDema = [];\n                let accumulatePeriodPoints = 0, EMA = 0, \n                // EMA(EMA)\n                EMAlevel2, \n                // EMA of previous point\n                prevEMA, prevEMAlevel2, \n                // EMA values array\n                i, index = -1, DEMAPoint, SMA = 0;\n                this.EMApercent = (2 / (period + 1));\n                // Check period, if bigger than EMA points length, skip\n                if (yValLen < 2 * period - 1) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                accumulatePeriodPoints =\n                    super.accumulatePeriodPoints(period, index, yVal);\n                // First point\n                SMA = accumulatePeriodPoints / period;\n                accumulatePeriodPoints = 0;\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen + 2; i++) {\n                    if (i < yValLen + 1) {\n                        EMA = this.getEMA(yVal, prevEMA, SMA, index, i)[1];\n                        EMAvalues.push(EMA);\n                    }\n                    prevEMA = EMA;\n                    // Summing first period points for EMA(EMA)\n                    if (i < doubledPeriod) {\n                        accumulatePeriodPoints += EMA;\n                    }\n                    else {\n                        // Calculate DEMA\n                        // First DEMA point\n                        if (i === doubledPeriod) {\n                            SMA = accumulatePeriodPoints / period;\n                        }\n                        EMA = EMAvalues[i - period - 1];\n                        EMAlevel2 = this.getEMA([EMA], prevEMAlevel2, SMA)[1];\n                        DEMAPoint = [\n                            xVal[i - 2],\n                            correctFloat(2 * EMA - EMAlevel2)\n                        ];\n                        DEMA.push(DEMAPoint);\n                        xDataDema.push(DEMAPoint[0]);\n                        yDataDema.push(DEMAPoint[1]);\n                        prevEMAlevel2 = EMAlevel2;\n                    }\n                }\n                return {\n                    values: DEMA,\n                    xData: xDataDema,\n                    yData: yDataDema\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Double exponential moving average (DEMA) indicator. This series requires\n         * `linkedTo` option to be set and should be loaded after the\n         * `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/dema\n         *         DEMA indicator\n         *\n         * @extends      plotOptions.ema\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/dema\n         * @optionparent plotOptions.dema\n         */\n        DEMAIndicator.defaultOptions = merge(EMAIndicator.defaultOptions);\n        SeriesRegistry.registerSeriesType('dema', DEMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `DEMA` series. If the [type](#series.dema.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.dema\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/dema\n         * @apioption series.dema\n         */\n        ''; // Adds doclet above to the transpiled file\n\n        return DEMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/TEMA/TEMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { ema: EMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The TEMA series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.tema\n         *\n         * @augments Highcharts.Series\n         */\n        class TEMAIndicator extends EMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getEMA(yVal, prevEMA, SMA, index, i, xVal) {\n                return super.calculateEma(xVal || [], yVal, typeof i === 'undefined' ? 1 : i, this.EMApercent, prevEMA, typeof index === 'undefined' ? -1 : index, SMA);\n            }\n            getTemaPoint(xVal, tripledPeriod, EMAlevels, i) {\n                const TEMAPoint = [\n                    xVal[i - 3],\n                    correctFloat(3 * EMAlevels.level1 -\n                        3 * EMAlevels.level2 + EMAlevels.level3)\n                ];\n                return TEMAPoint;\n            }\n            getValues(series, params) {\n                const period = params.period, doubledPeriod = 2 * period, tripledPeriod = 3 * period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, tema = [], xDataTema = [], yDataTema = [], \n                // EMA values array\n                emaValues = [], emaLevel2Values = [], \n                // This object contains all EMA EMAlevels calculated like below\n                // EMA = level1\n                // EMA(EMA) = level2,\n                // EMA(EMA(EMA)) = level3,\n                emaLevels = {};\n                let index = -1, accumulatePeriodPoints = 0, sma = 0, \n                // EMA of previous point\n                prevEMA, prevEMAlevel2, i, temaPoint;\n                this.EMApercent = (2 / (period + 1));\n                // Check period, if bigger than EMA points length, skip\n                if (yValLen < 3 * period - 2) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index ? params.index : 0;\n                }\n                // Accumulate first N-points\n                accumulatePeriodPoints = super.accumulatePeriodPoints(period, index, yVal);\n                // First point\n                sma = accumulatePeriodPoints / period;\n                accumulatePeriodPoints = 0;\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen + 3; i++) {\n                    if (i < yValLen + 1) {\n                        emaLevels.level1 = this.getEMA(yVal, prevEMA, sma, index, i)[1];\n                        emaValues.push(emaLevels.level1);\n                    }\n                    prevEMA = emaLevels.level1;\n                    // Summing first period points for ema(ema)\n                    if (i < doubledPeriod) {\n                        accumulatePeriodPoints += emaLevels.level1;\n                    }\n                    else {\n                        // Calculate dema\n                        // First dema point\n                        if (i === doubledPeriod) {\n                            sma = accumulatePeriodPoints / period;\n                            accumulatePeriodPoints = 0;\n                        }\n                        emaLevels.level1 = emaValues[i - period - 1];\n                        emaLevels.level2 = this.getEMA([emaLevels.level1], prevEMAlevel2, sma)[1];\n                        emaLevel2Values.push(emaLevels.level2);\n                        prevEMAlevel2 = emaLevels.level2;\n                        // Summing first period points for ema(ema(ema))\n                        if (i < tripledPeriod) {\n                            accumulatePeriodPoints += emaLevels.level2;\n                        }\n                        else {\n                            // Calculate tema\n                            // First tema point\n                            if (i === tripledPeriod) {\n                                sma = accumulatePeriodPoints / period;\n                            }\n                            if (i === yValLen + 1) {\n                                // Calculate the last ema and emaEMA points\n                                emaLevels.level1 = emaValues[i - period - 1];\n                                emaLevels.level2 = this.getEMA([emaLevels.level1], prevEMAlevel2, sma)[1];\n                                emaLevel2Values.push(emaLevels.level2);\n                            }\n                            emaLevels.level1 = emaValues[i - period - 2];\n                            emaLevels.level2 = emaLevel2Values[i - 2 * period - 1];\n                            emaLevels.level3 = this.getEMA([emaLevels.level2], emaLevels.prevLevel3, sma)[1];\n                            temaPoint = this.getTemaPoint(xVal, tripledPeriod, emaLevels, i);\n                            // Make sure that point exists (for TRIX oscillator)\n                            if (temaPoint) {\n                                tema.push(temaPoint);\n                                xDataTema.push(temaPoint[0]);\n                                yDataTema.push(temaPoint[1]);\n                            }\n                            emaLevels.prevLevel3 = emaLevels.level3;\n                        }\n                    }\n                }\n                return {\n                    values: tema,\n                    xData: xDataTema,\n                    yData: yDataTema\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Triple exponential moving average (TEMA) indicator. This series requires\n         * `linkedTo` option to be set and should be loaded after the\n         * `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/tema\n         *         TEMA indicator\n         *\n         * @extends      plotOptions.ema\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/tema\n         * @optionparent plotOptions.tema\n         */\n        TEMAIndicator.defaultOptions = merge(EMAIndicator.defaultOptions);\n        SeriesRegistry.registerSeriesType('tema', TEMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `TEMA` series. If the [type](#series.tema.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.tema\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/tema\n         * @apioption series.tema\n         */\n        ''; // To include the above in the js output\n\n        return TEMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/TRIX/TRIXIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { tema: TEMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The TRIX series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.trix\n         *\n         * @augments Highcharts.Series\n         */\n        class TRIXIndicator extends TEMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            // TRIX is calculated using TEMA so we just extend getTemaPoint method.\n            getTemaPoint(xVal, tripledPeriod, EMAlevels, i) {\n                if (i > tripledPeriod) {\n                    return [\n                        xVal[i - 3],\n                        EMAlevels.prevLevel3 !== 0 ?\n                            correctFloat(EMAlevels.level3 - EMAlevels.prevLevel3) /\n                                EMAlevels.prevLevel3 * 100 : null\n                    ];\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Triple exponential average (TRIX) oscillator. This series requires\n         * `linkedTo` option to be set.\n         *\n         * @sample {highstock} stock/indicators/trix\n         * TRIX indicator\n         *\n         * @extends      plotOptions.tema\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/tema\n         * @requires     stock/indicators/trix\n         * @optionparent plotOptions.trix\n         */\n        TRIXIndicator.defaultOptions = merge(TEMAIndicator.defaultOptions);\n        SeriesRegistry.registerSeriesType('trix', TRIXIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `TRIX` series. If the [type](#series.trix.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.trix\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/tema\n         * @apioption series.trix\n         */\n        ''; // To include the above in the js output\n\n        return TRIXIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/APO/APOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { ema: EMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge, error } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The APO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.apo\n         *\n         * @augments Highcharts.Series\n         */\n        class APOIndicator extends EMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const periods = params.periods, index = params.index, \n                // 0- date, 1- Absolute price oscillator\n                APO = [], xData = [], yData = [];\n                let oscillator, i;\n                // Check if periods are correct\n                if (periods.length !== 2 || periods[1] <= periods[0]) {\n                    error('Error: \"APO requires two periods. Notice, first period ' +\n                        'should be lower than the second one.\"');\n                    return;\n                }\n                // Shorter Period EMA\n                const SPE = super.getValues.call(this, series, {\n                    index: index,\n                    period: periods[0]\n                });\n                // Longer Period EMA\n                const LPE = super.getValues.call(this, series, {\n                    index: index,\n                    period: periods[1]\n                });\n                // Check if ema is calculated properly, if not skip\n                if (!SPE || !LPE) {\n                    return;\n                }\n                const periodsOffset = periods[1] - periods[0];\n                for (i = 0; i < LPE.yData.length; i++) {\n                    oscillator = (SPE.yData[i + periodsOffset] -\n                        LPE.yData[i]);\n                    APO.push([LPE.xData[i], oscillator]);\n                    xData.push(LPE.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: APO,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Absolute Price Oscillator. This series requires the `linkedTo` option to\n         * be set and should be loaded after the `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/apo\n         *         Absolute Price Oscillator\n         *\n         * @extends      plotOptions.ema\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/apo\n         * @optionparent plotOptions.apo\n         */\n        APOIndicator.defaultOptions = merge(EMAIndicator.defaultOptions, {\n            /**\n             * Parameters used in calculation of Absolute Price Oscillator\n             * series points.\n             *\n             * @excluding period\n             */\n            params: {\n                period: void 0, // Unchangeable period, do not inherit (#15362)\n                /**\n                 * Periods for Absolute Price Oscillator calculations.\n                 *\n                 * @type    {Array<number>}\n                 * @default [10, 20]\n                 * @since   7.0.0\n                 */\n                periods: [10, 20]\n            }\n        });\n        extend(APOIndicator.prototype, {\n            nameBase: 'APO',\n            nameComponents: ['periods']\n        });\n        SeriesRegistry.registerSeriesType('apo', APOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An `Absolute Price Oscillator` series. If the [type](#series.apo.type) option\n         * is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.apo\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/apo\n         * @apioption series.apo\n         */\n        ''; // To include the above in the js output\n\n        return APOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/IKH/IKHIndicator.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, Color, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { defined, extend, isArray, isNumber, getClosestDistance, merge, objectEach } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function maxHigh(arr) {\n            return arr.reduce(function (max, res) {\n                return Math.max(max, res[1]);\n            }, -Infinity);\n        }\n        /**\n         * @private\n         */\n        function minLow(arr) {\n            return arr.reduce(function (min, res) {\n                return Math.min(min, res[2]);\n            }, Infinity);\n        }\n        /**\n         * @private\n         */\n        function highlowLevel(arr) {\n            return {\n                high: maxHigh(arr),\n                low: minLow(arr)\n            };\n        }\n        /**\n         * Check two lines intersection (line a1-a2 and b1-b2)\n         * Source: https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\n         * @private\n         */\n        function checkLineIntersection(a1, a2, b1, b2) {\n            if (a1 && a2 && b1 && b2) {\n                const saX = a2.plotX - a1.plotX, // Auxiliary section a2-a1 X\n                saY = a2.plotY - a1.plotY, // Auxiliary section a2-a1 Y\n                sbX = b2.plotX - b1.plotX, // Auxiliary section b2-b1 X\n                sbY = b2.plotY - b1.plotY, // Auxiliary section b2-b1 Y\n                sabX = a1.plotX - b1.plotX, // Auxiliary section a1-b1 X\n                sabY = a1.plotY - b1.plotY, // Auxiliary section a1-b1 Y\n                // First degree Bézier parameters\n                u = (-saY * sabX + saX * sabY) / (-sbX * saY + saX * sbY), t = (sbX * sabY - sbY * sabX) / (-sbX * saY + saX * sbY);\n                if (u >= 0 && u <= 1 && t >= 0 && t <= 1) {\n                    return {\n                        plotX: a1.plotX + t * saX,\n                        plotY: a1.plotY + t * saY\n                    };\n                }\n            }\n        }\n        /**\n         * Parameter opt (indicator options object) include indicator, points,\n         * nextPoints, color, options, gappedExtend and graph properties\n         * @private\n         */\n        function drawSenkouSpan(opt) {\n            const indicator = opt.indicator;\n            indicator.points = opt.points;\n            indicator.nextPoints = opt.nextPoints;\n            indicator.color = opt.color;\n            indicator.options = merge(opt.options.senkouSpan.styles, opt.gap);\n            indicator.graph = opt.graph;\n            indicator.fillGraph = true;\n            SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n        }\n        /**\n         * Data integrity in Ichimoku is different than default 'averages':\n         * Point: [undefined, value, value, ...] is correct\n         * Point: [undefined, undefined, undefined, ...] is incorrect\n         * @private\n         */\n        function ichimokuAverages() {\n            const ret = [];\n            let isEmptyRange;\n            [].forEach.call(arguments, function (arr, i) {\n                ret.push(ApproximationRegistry.average(arr));\n                isEmptyRange = !isEmptyRange && typeof ret[i] === 'undefined';\n            });\n            // Return undefined when first elem. is undefined and let\n            // sum method handle null (#7377)\n            return isEmptyRange ? void 0 : ret;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The IKH series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ikh\n         *\n         * @augments Highcharts.Series\n         */\n        class IKHIndicator extends SMAIndicator {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = [];\n                this.options = {};\n                this.points = [];\n                this.graphCollection = [];\n            }\n            /* *\n             *\n             * Functions\n             *\n             * */\n            init() {\n                super.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    tenkanLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    kijunLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    chikouLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    senkouSpanA: {\n                        styles: {\n                            lineColor: this.color,\n                            fill: color(this.color).setOpacity(0.5).get()\n                        }\n                    },\n                    senkouSpanB: {\n                        styles: {\n                            lineColor: this.color,\n                            fill: color(this.color).setOpacity(0.5).get()\n                        }\n                    },\n                    senkouSpan: {\n                        styles: {\n                            fill: color(this.color).setOpacity(0.2).get()\n                        }\n                    }\n                }, this.options);\n            }\n            toYData(point) {\n                return [\n                    point.tenkanSen,\n                    point.kijunSen,\n                    point.chikouSpan,\n                    point.senkouSpanA,\n                    point.senkouSpanB\n                ];\n            }\n            translate() {\n                const indicator = this;\n                SeriesRegistry.seriesTypes.sma.prototype.translate.apply(indicator);\n                for (const point of indicator.points) {\n                    for (const key of indicator.pointArrayMap) {\n                        const pointValue = point[key];\n                        if (isNumber(pointValue)) {\n                            point['plot' + key] = indicator.yAxis.toPixels(pointValue, true);\n                            // Add extra parameters for support tooltip in moved\n                            // lines\n                            point.plotY = point['plot' + key];\n                            point.tooltipPos = [\n                                point.plotX,\n                                point['plot' + key]\n                            ];\n                            point.isNull = false;\n                        }\n                    }\n                }\n            }\n            drawGraph() {\n                const indicator = this, mainLinePoints = indicator.points, mainLineOptions = indicator.options, mainLinePath = indicator.graph, mainColor = indicator.color, gappedExtend = {\n                    options: {\n                        gapSize: mainLineOptions.gapSize\n                    }\n                }, pointArrayMapLength = indicator.pointArrayMap.length, allIchimokuPoints = [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                    []\n                ], ikhMap = {\n                    tenkanLine: allIchimokuPoints[0],\n                    kijunLine: allIchimokuPoints[1],\n                    chikouLine: allIchimokuPoints[2],\n                    senkouSpanA: allIchimokuPoints[3],\n                    senkouSpanB: allIchimokuPoints[4],\n                    senkouSpan: allIchimokuPoints[5]\n                }, intersectIndexColl = [], senkouSpanOptions = indicator\n                    .options.senkouSpan, color = senkouSpanOptions.color ||\n                    senkouSpanOptions.styles.fill, negativeColor = senkouSpanOptions.negativeColor, \n                // Points to create color and negativeColor senkouSpan\n                points = [\n                    [], // Points color\n                    [] // Points negative color\n                ], \n                // For span, we need an access to the next points, used in\n                // getGraphPath()\n                nextPoints = [\n                    [], // Next points color\n                    [] // Next points negative color\n                ];\n                let pointsLength = mainLinePoints.length, lineIndex = 0, position, point, i, startIntersect, endIntersect, sectionPoints, sectionNextPoints, pointsPlotYSum, nextPointsPlotYSum, senkouSpanTempColor, concatArrIndex, j, k;\n                indicator.ikhMap = ikhMap;\n                // Generate points for all lines and spans lines:\n                while (pointsLength--) {\n                    point = mainLinePoints[pointsLength];\n                    for (i = 0; i < pointArrayMapLength; i++) {\n                        position = indicator.pointArrayMap[i];\n                        if (defined(point[position])) {\n                            allIchimokuPoints[i].push({\n                                plotX: point.plotX,\n                                plotY: point['plot' + position],\n                                isNull: false\n                            });\n                        }\n                    }\n                    if (negativeColor && pointsLength !== mainLinePoints.length - 1) {\n                        // Check if lines intersect\n                        const index = ikhMap.senkouSpanB.length - 1, intersect = checkLineIntersection(ikhMap.senkouSpanA[index - 1], ikhMap.senkouSpanA[index], ikhMap.senkouSpanB[index - 1], ikhMap.senkouSpanB[index]);\n                        if (intersect) {\n                            const intersectPointObj = {\n                                plotX: intersect.plotX,\n                                plotY: intersect.plotY,\n                                isNull: false,\n                                intersectPoint: true\n                            };\n                            // Add intersect point to ichimoku points collection\n                            // Create senkouSpan sections\n                            ikhMap.senkouSpanA.splice(index, 0, intersectPointObj);\n                            ikhMap.senkouSpanB.splice(index, 0, intersectPointObj);\n                            intersectIndexColl.push(index);\n                        }\n                    }\n                }\n                // Modify options and generate lines:\n                objectEach(ikhMap, (values, lineName) => {\n                    if (mainLineOptions[lineName] &&\n                        lineName !== 'senkouSpan') {\n                        // First line is rendered by default option\n                        indicator.points = allIchimokuPoints[lineIndex];\n                        indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        indicator.graph = indicator['graph' + lineName];\n                        indicator.fillGraph = false;\n                        indicator.color = mainColor;\n                        SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                        // Now save line\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    lineIndex++;\n                });\n                // Generate senkouSpan area:\n                // If graphCollection exist then remove svg\n                // element and indicator property\n                if (indicator.graphCollection) {\n                    for (const graphName of indicator.graphCollection) {\n                        indicator[graphName].destroy();\n                        delete indicator[graphName];\n                    }\n                }\n                // Clean graphCollection or initialize it\n                indicator.graphCollection = [];\n                // When user set negativeColor property\n                if (negativeColor && ikhMap.senkouSpanA[0] && ikhMap.senkouSpanB[0]) {\n                    // Add first and last point to senkouSpan area sections\n                    intersectIndexColl.unshift(0);\n                    intersectIndexColl.push(ikhMap.senkouSpanA.length - 1);\n                    // Populate points and nextPoints arrays\n                    for (j = 0; j < intersectIndexColl.length - 1; j++) {\n                        startIntersect = intersectIndexColl[j];\n                        endIntersect = intersectIndexColl[j + 1];\n                        sectionPoints = ikhMap.senkouSpanB.slice(startIntersect, endIntersect + 1);\n                        sectionNextPoints = ikhMap.senkouSpanA.slice(startIntersect, endIntersect + 1);\n                        // Add points to color or negativeColor arrays\n                        // Check the middle point (if exist)\n                        if (Math.floor(sectionPoints.length / 2) >= 1) {\n                            const x = Math.floor(sectionPoints.length / 2);\n                            // When middle points has equal values\n                            // Compare all points plotY value sum\n                            if (sectionPoints[x].plotY === sectionNextPoints[x].plotY) {\n                                pointsPlotYSum = 0;\n                                nextPointsPlotYSum = 0;\n                                for (k = 0; k < sectionPoints.length; k++) {\n                                    pointsPlotYSum += sectionPoints[k].plotY;\n                                    nextPointsPlotYSum += sectionNextPoints[k].plotY;\n                                }\n                                concatArrIndex =\n                                    pointsPlotYSum > nextPointsPlotYSum ? 0 : 1;\n                                points[concatArrIndex] = points[concatArrIndex].concat(sectionPoints);\n                                nextPoints[concatArrIndex] = nextPoints[concatArrIndex].concat(sectionNextPoints);\n                            }\n                            else {\n                                // Compare middle point of the section\n                                concatArrIndex = (sectionPoints[x].plotY > sectionNextPoints[x].plotY) ? 0 : 1;\n                                points[concatArrIndex] = points[concatArrIndex].concat(sectionPoints);\n                                nextPoints[concatArrIndex] = nextPoints[concatArrIndex].concat(sectionNextPoints);\n                            }\n                        }\n                        else {\n                            // Compare first point of the section\n                            concatArrIndex = (sectionPoints[0].plotY > sectionNextPoints[0].plotY) ? 0 : 1;\n                            points[concatArrIndex] = points[concatArrIndex].concat(sectionPoints);\n                            nextPoints[concatArrIndex] = nextPoints[concatArrIndex].concat(sectionNextPoints);\n                        }\n                    }\n                    // Render color and negativeColor paths\n                    ['graphsenkouSpanColor', 'graphsenkouSpanNegativeColor'].forEach(function (areaName, i) {\n                        if (points[i].length && nextPoints[i].length) {\n                            senkouSpanTempColor = i === 0 ? color : negativeColor;\n                            drawSenkouSpan({\n                                indicator: indicator,\n                                points: points[i],\n                                nextPoints: nextPoints[i],\n                                color: senkouSpanTempColor,\n                                options: mainLineOptions,\n                                gap: gappedExtend,\n                                graph: indicator[areaName]\n                            });\n                            // Now save line\n                            indicator[areaName] = indicator.graph;\n                            indicator.graphCollection.push(areaName);\n                        }\n                    });\n                }\n                else {\n                    // When user set only senkouSpan style.fill property\n                    drawSenkouSpan({\n                        indicator: indicator,\n                        points: ikhMap.senkouSpanB,\n                        nextPoints: ikhMap.senkouSpanA,\n                        color: color,\n                        options: mainLineOptions,\n                        gap: gappedExtend,\n                        graph: indicator.graphsenkouSpan\n                    });\n                    // Now save line\n                    indicator.graphsenkouSpan = indicator.graph;\n                }\n                // Clean temporary properties:\n                delete indicator.nextPoints;\n                delete indicator.fillGraph;\n                // Restore options and draw the Tenkan line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                indicator.color = mainColor;\n            }\n            getGraphPath(points) {\n                const indicator = this;\n                let path = [], spanA, spanAarr = [];\n                points = points || this.points;\n                // Render Senkou Span\n                if (indicator.fillGraph && indicator.nextPoints) {\n                    spanA = SeriesRegistry.seriesTypes.sma.prototype.getGraphPath.call(indicator, \n                    // Reverse points, so Senkou Span A will start from the end:\n                    indicator.nextPoints);\n                    if (spanA && spanA.length) {\n                        spanA[0][0] = 'L';\n                        path = SeriesRegistry.seriesTypes.sma.prototype.getGraphPath\n                            .call(indicator, points);\n                        spanAarr = spanA.slice(0, path.length);\n                        for (let i = spanAarr.length - 1; i >= 0; i--) {\n                            path.push(spanAarr[i]);\n                        }\n                    }\n                }\n                else {\n                    path = SeriesRegistry.seriesTypes.sma.prototype.getGraphPath\n                        .apply(indicator, arguments);\n                }\n                return path;\n            }\n            getValues(series, params) {\n                const period = params.period, periodTenkan = params.periodTenkan, periodSenkouSpanB = params.periodSenkouSpanB, xVal = series.xData, yVal = series.yData, xAxis = series.xAxis, yValLen = (yVal && yVal.length) || 0, closestPointRange = getClosestDistance(xAxis.series.map((s) => s.xData || [])), IKH = [], xData = [];\n                let date, slicedTSY, slicedKSY, slicedSSBY, pointTS, pointKS, pointSSB, i, TS, KS, CS, SSA, SSB;\n                // Ikh requires close value\n                if (xVal.length <= period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // Add timestamps at the beginning\n                const dateStart = xVal[0] - period * closestPointRange;\n                for (i = 0; i < period; i++) {\n                    xData.push(dateStart + i * closestPointRange);\n                }\n                for (i = 0; i < yValLen; i++) {\n                    // Tenkan Sen\n                    if (i >= periodTenkan) {\n                        slicedTSY = yVal.slice(i - periodTenkan, i);\n                        pointTS = highlowLevel(slicedTSY);\n                        TS = (pointTS.high + pointTS.low) / 2;\n                    }\n                    if (i >= period) {\n                        slicedKSY = yVal.slice(i - period, i);\n                        pointKS = highlowLevel(slicedKSY);\n                        KS = (pointKS.high + pointKS.low) / 2;\n                        SSA = (TS + KS) / 2;\n                    }\n                    if (i >= periodSenkouSpanB) {\n                        slicedSSBY = yVal.slice(i - periodSenkouSpanB, i);\n                        pointSSB = highlowLevel(slicedSSBY);\n                        SSB = (pointSSB.high + pointSSB.low) / 2;\n                    }\n                    CS = yVal[i][3];\n                    date = xVal[i];\n                    if (typeof IKH[i] === 'undefined') {\n                        IKH[i] = [];\n                    }\n                    if (typeof IKH[i + period - 1] === 'undefined') {\n                        IKH[i + period - 1] = [];\n                    }\n                    IKH[i + period - 1][0] = TS;\n                    IKH[i + period - 1][1] = KS;\n                    IKH[i + period - 1][2] = void 0;\n                    if (typeof IKH[i + 1] === 'undefined') {\n                        IKH[i + 1] = [];\n                    }\n                    IKH[i + 1][2] = CS;\n                    if (i <= period) {\n                        IKH[i + period - 1][3] = void 0;\n                        IKH[i + period - 1][4] = void 0;\n                    }\n                    if (typeof IKH[i + 2 * period - 2] === 'undefined') {\n                        IKH[i + 2 * period - 2] = [];\n                    }\n                    IKH[i + 2 * period - 2][3] = SSA;\n                    IKH[i + 2 * period - 2][4] = SSB;\n                    xData.push(date);\n                }\n                // Add timestamps for further points\n                for (i = 1; i <= period; i++) {\n                    xData.push(date + i * closestPointRange);\n                }\n                return {\n                    values: IKH,\n                    xData: xData,\n                    yData: IKH\n                };\n            }\n        }\n        /**\n         * Ichimoku Kinko Hyo (IKH). This series requires `linkedTo` option to be\n         * set.\n         *\n         * @sample stock/indicators/ichimoku-kinko-hyo\n         *         Ichimoku Kinko Hyo indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/ichimoku-kinko-hyo\n         * @optionparent plotOptions.ikh\n         */\n        IKHIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unused index, do not inherit (#15362)\n                period: 26,\n                /**\n                 * The base period for Tenkan calculations.\n                 */\n                periodTenkan: 9,\n                /**\n                 * The base period for Senkou Span B calculations\n                 */\n                periodSenkouSpanB: 52\n            },\n            marker: {\n                enabled: false\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b> {series.name}</b><br/>' +\n                    'TENKAN SEN: {point.tenkanSen:.3f}<br/>' +\n                    'KIJUN SEN: {point.kijunSen:.3f}<br/>' +\n                    'CHIKOU SPAN: {point.chikouSpan:.3f}<br/>' +\n                    'SENKOU SPAN A: {point.senkouSpanA:.3f}<br/>' +\n                    'SENKOU SPAN B: {point.senkouSpanB:.3f}<br/>'\n            },\n            /**\n             * The styles for Tenkan line\n             */\n            tenkanLine: {\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * The styles for Kijun line\n             */\n            kijunLine: {\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * The styles for Chikou line\n             */\n            chikouLine: {\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * The styles for Senkou Span A line\n             */\n            senkouSpanA: {\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * The styles for Senkou Span B line\n             */\n            senkouSpanB: {\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * The styles for area between Senkou Span A and B.\n             */\n            senkouSpan: {\n                /**\n                 * Color of the area between Senkou Span A and B,\n                 * when Senkou Span A is above Senkou Span B. Note that if\n                 * a `style.fill` is defined, the `color` takes precedence and\n                 * the `style.fill` is ignored.\n                 *\n                 * @see [senkouSpan.styles.fill](#series.ikh.senkouSpan.styles.fill)\n                 *\n                 * @sample stock/indicators/ichimoku-kinko-hyo\n                 *         Ichimoku Kinko Hyo color\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since     7.0.0\n                 * @apioption plotOptions.ikh.senkouSpan.color\n                 */\n                /**\n                 * Color of the area between Senkou Span A and B,\n                 * when Senkou Span A is under Senkou Span B.\n                 *\n                 * @sample stock/indicators/ikh-negative-color\n                 *         Ichimoku Kinko Hyo negativeColor\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since     7.0.0\n                 * @apioption plotOptions.ikh.senkouSpan.negativeColor\n                 */\n                styles: {\n                    /**\n                     * Color of the area between Senkou Span A and B.\n                     *\n                     * @deprecated\n                     * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     */\n                    fill: 'rgba(255, 0, 0, 0.5)'\n                }\n            },\n            dataGrouping: {\n                approximation: 'ichimoku-averages'\n            }\n        });\n        extend(IKHIndicator.prototype, {\n            pointArrayMap: [\n                'tenkanSen',\n                'kijunSen',\n                'chikouSpan',\n                'senkouSpanA',\n                'senkouSpanB'\n            ],\n            pointValKey: 'tenkanSen',\n            nameComponents: ['periodSenkouSpanB', 'period', 'periodTenkan']\n        });\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        ApproximationRegistry['ichimoku-averages'] = ichimokuAverages;\n        SeriesRegistry.registerSeriesType('ikh', IKHIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `IKH` series. If the [type](#series.ikh.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ikh\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/ichimoku-kinko-hyo\n         * @apioption series.ikh\n         */\n        (''); // Add doclet above to transpiled file\n\n        return IKHIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/KeltnerChannels/KeltnerChannelsIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Keltner Channels series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.keltnerchannels\n         *\n         * @augments Highcharts.Series\n         */\n        class KeltnerChannelsIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init() {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    topLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    bottomLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            }\n            getValues(series, params) {\n                const period = params.period, periodATR = params.periodATR, multiplierATR = params.multiplierATR, index = params.index, yVal = series.yData, yValLen = yVal ? yVal.length : 0, \n                // Keltner Channels array structure:\n                // 0-date, 1-top line, 2-middle line, 3-bottom line\n                KC = [], seriesEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                    period: period,\n                    index: index\n                }), seriesATR = SeriesRegistry.seriesTypes.atr.prototype.getValues(series, {\n                    period: periodATR\n                }), xData = [], yData = [];\n                // Middle line, top line and bottom lineI\n                let ML, TL, BL, date, pointEMA, pointATR, i;\n                if (yValLen < period) {\n                    return;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    pointEMA = seriesEMA.values[i - period];\n                    pointATR = seriesATR.values[i - periodATR];\n                    date = pointEMA[0];\n                    TL = correctFloat(pointEMA[1] + (multiplierATR * pointATR[1]));\n                    BL = correctFloat(pointEMA[1] - (multiplierATR * pointATR[1]));\n                    ML = pointEMA[1];\n                    KC.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: KC,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Keltner Channels. This series requires the `linkedTo` option to be set\n         * and should be loaded after the `stock/indicators/indicators.js`,\n         * `stock/indicators/atr.js`, and `stock/ema/.js`.\n         *\n         * @sample {highstock} stock/indicators/keltner-channels\n         *         Keltner Channels\n         *\n         * @extends      plotOptions.sma\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart,showInNavigator,\n         *               stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/keltner-channels\n         * @optionparent plotOptions.keltnerchannels\n         */\n        KeltnerChannelsIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Option for fill color between lines in Keltner Channels Indicator.\n             *\n             * @sample {highstock} stock/indicators/indicator-area-fill\n             *      Background fill between lines.\n             *\n             * @type {Highcharts.Color}\n             * @since 9.3.2\n             * @apioption plotOptions.keltnerchannels.fillColor\n             *\n             */\n            params: {\n                /**\n                 * The point index which indicator calculations will base. For\n                 * example using OHLC data, index=2 means the indicator will be\n                 * calculated using Low values.\n                 */\n                index: 0,\n                period: 20,\n                /**\n                 * The ATR period.\n                 */\n                periodATR: 10,\n                /**\n                 * The ATR multiplier.\n                 */\n                multiplierATR: 2\n            },\n            /**\n             * Bottom line options.\n             *\n             */\n            bottomLine: {\n                /**\n                 * Styles for a bottom line.\n                 *\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line. If not set, it's inherited from\n                     * `plotOptions.keltnerchannels.color`\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * Top line options.\n             *\n             * @extends plotOptions.keltnerchannels.bottomLine\n             */\n            topLine: {\n                styles: {\n                    lineWidth: 1,\n                    lineColor: void 0\n                }\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Upper Channel: {point.top}<br/>EMA({series.options.params.period}): {point.middle}<br/>Lower Channel: {point.bottom}<br/>'\n            },\n            marker: {\n                enabled: false\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            },\n            lineWidth: 1\n        });\n        extend(KeltnerChannelsIndicator.prototype, {\n            nameBase: 'Keltner Channels',\n            areaLinesNames: ['top', 'bottom'],\n            nameComponents: ['period', 'periodATR', 'multiplierATR'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(KeltnerChannelsIndicator);\n        SeriesRegistry.registerSeriesType('keltnerchannels', KeltnerChannelsIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Keltner Channels indicator. If the [type](#series.keltnerchannels.type)\n         * option is not specified, it is inherited from[chart.type](#chart.type).\n         *\n         * @extends      series,plotOptions.keltnerchannels\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *               joinBy, keys, navigatorOptions, pointInterval,\n         *               pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *               stacking, showInNavigator\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/keltner-channels\n         * @apioption    series.keltnerchannels\n         */\n        ''; // To include the above in the js output\n\n        return KeltnerChannelsIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Klinger/KlingerIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { ema: EMAIndicator, sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, error, extend, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Klinger oscillator series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.klinger\n         *\n         * @augments Highcharts.Series\n         */\n        class KlingerIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            calculateTrend(yVal, i) {\n                const isUpward = yVal[i][1] + yVal[i][2] + yVal[i][3] >\n                    yVal[i - 1][1] + yVal[i - 1][2] + yVal[i - 1][3];\n                return isUpward ? 1 : -1;\n            }\n            // Checks if the series and volumeSeries are accessible, number of\n            // points.x is longer than period, is series has OHLC data\n            isValidData(firstYVal) {\n                const chart = this.chart, options = this.options, series = this.linkedParent, isSeriesOHLC = isArray(firstYVal) &&\n                    firstYVal.length === 4, volumeSeries = this.volumeSeries ||\n                    (this.volumeSeries =\n                        chart.get(options.params.volumeSeriesID));\n                if (!volumeSeries) {\n                    error('Series ' +\n                        options.params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                }\n                const isLengthValid = [series, volumeSeries].every(function (series) {\n                    return series && series.xData && series.xData.length >=\n                        options.params.slowAvgPeriod;\n                });\n                return !!(isLengthValid && isSeriesOHLC);\n            }\n            getCM(previousCM, DM, trend, previousTrend, prevoiusDM) {\n                return correctFloat(DM + (trend === previousTrend ? previousCM : prevoiusDM));\n            }\n            getDM(high, low) {\n                return correctFloat(high - low);\n            }\n            getVolumeForce(yVal) {\n                const volumeForce = [];\n                let CM = 0, // Cumulative measurement\n                DM, // Daily measurement\n                force, i = 1, // Start from second point\n                previousCM = 0, previousDM = yVal[0][1] - yVal[0][2], // Initial DM\n                previousTrend = 0, trend;\n                for (i; i < yVal.length; i++) {\n                    trend = this.calculateTrend(yVal, i);\n                    DM = this.getDM(yVal[i][1], yVal[i][2]);\n                    // For the first iteration when the previousTrend doesn't exist,\n                    // previousCM doesn't exist either, but it doesn't matter becouse\n                    // it's filltered out in the getCM method in else statement,\n                    // (in this iteration, previousCM can be raplaced with the DM).\n                    CM = this.getCM(previousCM, DM, trend, previousTrend, previousDM);\n                    force = this.volumeSeries.yData[i] *\n                        trend * Math.abs(2 * ((DM / CM) - 1)) * 100;\n                    volumeForce.push([force]);\n                    // Before next iteration, assign the current as the previous.\n                    previousTrend = trend;\n                    previousCM = CM;\n                    previousDM = DM;\n                }\n                return volumeForce;\n            }\n            getEMA(yVal, prevEMA, SMA, EMApercent, index, i, xVal) {\n                return EMAIndicator.prototype.calculateEma(xVal || [], yVal, typeof i === 'undefined' ? 1 : i, EMApercent, prevEMA, typeof index === 'undefined' ? -1 : index, SMA);\n            }\n            getSMA(period, index, values) {\n                return EMAIndicator.prototype\n                    .accumulatePeriodPoints(period, index, values) / period;\n            }\n            getValues(series, params) {\n                const Klinger = [], xVal = series.xData, yVal = series.yData, xData = [], yData = [], calcSingal = [];\n                let KO, i = 0, fastEMA = 0, slowEMA, previousFastEMA = void 0, previousSlowEMA = void 0, signal = null;\n                // If the necessary conditions are not fulfilled, don't proceed.\n                if (!this.isValidData(yVal[0])) {\n                    return;\n                }\n                // Calculate the Volume Force array.\n                const volumeForce = this.getVolumeForce(yVal);\n                // Calculate SMA for the first points.\n                const SMAFast = this.getSMA(params.fastAvgPeriod, 0, volumeForce), SMASlow = this.getSMA(params.slowAvgPeriod, 0, volumeForce);\n                // Calculate EMApercent for the first points.\n                const fastEMApercent = 2 / (params.fastAvgPeriod + 1), slowEMApercent = 2 / (params.slowAvgPeriod + 1);\n                // Calculate KO\n                for (i; i < yVal.length; i++) {\n                    // Get EMA for fast period.\n                    if (i >= params.fastAvgPeriod) {\n                        fastEMA = this.getEMA(volumeForce, previousFastEMA, SMAFast, fastEMApercent, 0, i, xVal)[1];\n                        previousFastEMA = fastEMA;\n                    }\n                    // Get EMA for slow period.\n                    if (i >= params.slowAvgPeriod) {\n                        slowEMA = this.getEMA(volumeForce, previousSlowEMA, SMASlow, slowEMApercent, 0, i, xVal)[1];\n                        previousSlowEMA = slowEMA;\n                        KO = correctFloat(fastEMA - slowEMA);\n                        calcSingal.push(KO);\n                        // Calculate signal SMA\n                        if (calcSingal.length >= params.signalPeriod) {\n                            signal = calcSingal.slice(-params.signalPeriod)\n                                .reduce((prev, curr) => prev + curr) / params.signalPeriod;\n                        }\n                        Klinger.push([xVal[i], KO, signal]);\n                        xData.push(xVal[i]);\n                        yData.push([KO, signal]);\n                    }\n                }\n                return {\n                    values: Klinger,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Klinger oscillator. This series requires the `linkedTo` option to be set\n         * and should be loaded after the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/klinger\n         *         Klinger oscillator\n         *\n         * @extends      plotOptions.sma\n         * @since 9.1.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/klinger\n         * @optionparent plotOptions.klinger\n         */\n        KlingerIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Parameters used in calculation of Klinger Oscillator.\n             *\n             * @excluding index, period\n             */\n            params: {\n                /**\n                 * The fast period for indicator calculations.\n                 */\n                fastAvgPeriod: 34,\n                /**\n                 * The slow period for indicator calculations.\n                 */\n                slowAvgPeriod: 55,\n                /**\n                 * The base period for signal calculations.\n                 */\n                signalPeriod: 13,\n                /**\n                 * The id of another series to use its data as volume data for the\n                 * indiator calculation.\n                 */\n                volumeSeriesID: 'volume'\n            },\n            signalLine: {\n                /**\n                 * Styles for a signal line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line. If not set, it's inherited from\n                     * [plotOptions.klinger.color\n                     * ](#plotOptions.klinger.color).\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: '#ff0000'\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color: {point.color}\">\\u25CF</span>' +\n                    '<b> {series.name}</b><br/>' +\n                    '<span style=\"color: {point.color}\">Klinger</span>: ' +\n                    '{point.y}<br/>' +\n                    '<span style=\"color: ' +\n                    '{point.series.options.signalLine.styles.lineColor}\">' +\n                    'Signal</span>' +\n                    ': {point.signal}<br/>'\n            }\n        });\n        extend(KlingerIndicator.prototype, {\n            areaLinesNames: [],\n            linesApiNames: ['signalLine'],\n            nameBase: 'Klinger',\n            nameComponents: ['fastAvgPeriod', 'slowAvgPeriod'],\n            pointArrayMap: ['y', 'signal'],\n            parallelArrays: ['x', 'y', 'signal'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(KlingerIndicator);\n        SeriesRegistry.registerSeriesType('klinger', KlingerIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Klinger oscillator. If the [type](#series.klinger.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.klinger\n         * @since 9.1.0\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/klinger\n         * @apioption series.klinger\n         */\n        ''; // To include the above in the js output\n\n        return KlingerIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MACD/MACDIndicator.js', [_modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { column: ColumnSeries, sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, correctFloat, defined, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The MACD series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.macd\n         *\n         * @augments Highcharts.Series\n         */\n        class MACDIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init() {\n                SeriesRegistry.seriesTypes.sma.prototype.init.apply(this, arguments);\n                const originalColor = this.color;\n                // Check whether series is initialized. It may be not initialized,\n                // when any of required indicators is missing.\n                if (this.options) {\n                    // If the default colour doesn't set, get the next available from\n                    // the array and apply it #15608.\n                    if (defined(this.colorIndex)) {\n                        if (this.options.signalLine &&\n                            this.options.signalLine.styles &&\n                            !this.options.signalLine.styles.lineColor) {\n                            this.options.colorIndex = this.colorIndex + 1;\n                            this.getCyclic('color', void 0, this.chart.options.colors);\n                            this.options.signalLine.styles.lineColor =\n                                this.color;\n                        }\n                        if (this.options.macdLine &&\n                            this.options.macdLine.styles &&\n                            !this.options.macdLine.styles.lineColor) {\n                            this.options.colorIndex = this.colorIndex + 1;\n                            this.getCyclic('color', void 0, this.chart.options.colors);\n                            this.options.macdLine.styles.lineColor =\n                                this.color;\n                        }\n                    }\n                    // Zones have indexes automatically calculated, we need to\n                    // translate them to support multiple lines within one indicator\n                    this.macdZones = {\n                        zones: this.options.macdLine.zones,\n                        startIndex: 0\n                    };\n                    this.signalZones = {\n                        zones: this.macdZones.zones.concat(this.options.signalLine.zones),\n                        startIndex: this.macdZones.zones.length\n                    };\n                }\n                // Reset color and index #15608.\n                this.color = originalColor;\n            }\n            toYData(point) {\n                return [point.y, point.signal, point.MACD];\n            }\n            translate() {\n                const indicator = this, plotNames = ['plotSignal', 'plotMACD'];\n                H.seriesTypes.column.prototype.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    [point.signal, point.MACD].forEach(function (value, i) {\n                        if (value !== null) {\n                            point[plotNames[i]] =\n                                indicator.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n            destroy() {\n                // This.graph is null due to removing two times the same SVG element\n                this.graph = null;\n                this.graphmacd = this.graphmacd && this.graphmacd.destroy();\n                this.graphsignal = this.graphsignal && this.graphsignal.destroy();\n                SeriesRegistry.seriesTypes.sma.prototype.destroy.apply(this, arguments);\n            }\n            drawGraph() {\n                const indicator = this, mainLinePoints = indicator.points, mainLineOptions = indicator.options, histogramZones = indicator.zones, gappedExtend = {\n                    options: {\n                        gapSize: mainLineOptions.gapSize\n                    }\n                }, otherSignals = [[], []];\n                let point, pointsLength = mainLinePoints.length;\n                // Generate points for top and bottom lines:\n                while (pointsLength--) {\n                    point = mainLinePoints[pointsLength];\n                    if (defined(point.plotMACD)) {\n                        otherSignals[0].push({\n                            plotX: point.plotX,\n                            plotY: point.plotMACD,\n                            isNull: !defined(point.plotMACD)\n                        });\n                    }\n                    if (defined(point.plotSignal)) {\n                        otherSignals[1].push({\n                            plotX: point.plotX,\n                            plotY: point.plotSignal,\n                            isNull: !defined(point.plotMACD)\n                        });\n                    }\n                }\n                // Modify options and generate smoothing line:\n                ['macd', 'signal'].forEach((lineName, i) => {\n                    indicator.points = otherSignals[i];\n                    indicator.options = merge(mainLineOptions[`${lineName}Line`]?.styles || {}, gappedExtend);\n                    indicator.graph = indicator[`graph${lineName}`];\n                    // Zones extension:\n                    indicator.zones = (indicator[`${lineName}Zones`].zones || []).slice(indicator[`${lineName}Zones`].startIndex || 0);\n                    SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(indicator);\n                    indicator[`graph${lineName}`] = indicator.graph;\n                });\n                // Restore options:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.zones = histogramZones;\n            }\n            applyZones() {\n                // Histogram zones are handled by drawPoints method\n                // Here we need to apply zones for all lines\n                const histogramZones = this.zones;\n                // `signalZones.zones` contains all zones:\n                this.zones = this.signalZones.zones;\n                SeriesRegistry.seriesTypes.sma.prototype.applyZones.call(this);\n                // `applyZones` hides only main series.graph, hide macd line manually\n                if (this.graphmacd && this.options.macdLine.zones.length) {\n                    this.graphmacd.hide();\n                }\n                this.zones = histogramZones;\n            }\n            getValues(series, params) {\n                const indexToShift = (params.longPeriod - params.shortPeriod), // #14197\n                MACD = [], xMACD = [], yMACD = [];\n                let shortEMA, longEMA, i, j = 0, signalLine = [];\n                if (series.xData.length <\n                    params.longPeriod + params.signalPeriod) {\n                    return;\n                }\n                // Calculating the short and long EMA used when calculating the MACD\n                shortEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                    period: params.shortPeriod,\n                    index: params.index\n                });\n                longEMA = SeriesRegistry.seriesTypes.ema.prototype.getValues(series, {\n                    period: params.longPeriod,\n                    index: params.index\n                });\n                shortEMA = shortEMA.values;\n                longEMA = longEMA.values;\n                // Subtract each Y value from the EMA's and create the new dataset\n                // (MACD)\n                for (i = 0; i <= shortEMA.length; i++) {\n                    if (defined(longEMA[i]) &&\n                        defined(longEMA[i][1]) &&\n                        defined(shortEMA[i + indexToShift]) &&\n                        defined(shortEMA[i + indexToShift][0])) {\n                        MACD.push([\n                            shortEMA[i + indexToShift][0],\n                            0,\n                            null,\n                            shortEMA[i + indexToShift][1] -\n                                longEMA[i][1]\n                        ]);\n                    }\n                }\n                // Set the Y and X data of the MACD. This is used in calculating the\n                // signal line.\n                for (i = 0; i < MACD.length; i++) {\n                    xMACD.push(MACD[i][0]);\n                    yMACD.push([0, null, MACD[i][3]]);\n                }\n                // Setting the signalline (Signal Line: X-day EMA of MACD line).\n                signalLine = SeriesRegistry.seriesTypes.ema.prototype.getValues({\n                    xData: xMACD,\n                    yData: yMACD\n                }, {\n                    period: params.signalPeriod,\n                    index: 2\n                });\n                signalLine = signalLine.values;\n                // Setting the MACD Histogram. In comparison to the loop with pure\n                // MACD this loop uses MACD x value not xData.\n                for (i = 0; i < MACD.length; i++) {\n                    // Detect the first point\n                    if (MACD[i][0] >= signalLine[0][0]) {\n                        MACD[i][2] = signalLine[j][1];\n                        yMACD[i] = [0, signalLine[j][1], MACD[i][3]];\n                        if (MACD[i][3] === null) {\n                            MACD[i][1] = 0;\n                            yMACD[i][0] = 0;\n                        }\n                        else {\n                            MACD[i][1] = correctFloat(MACD[i][3] -\n                                signalLine[j][1]);\n                            yMACD[i][0] = correctFloat(MACD[i][3] -\n                                signalLine[j][1]);\n                        }\n                        j++;\n                    }\n                }\n                return {\n                    values: MACD,\n                    xData: xMACD,\n                    yData: yMACD\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Moving Average Convergence Divergence (MACD). This series requires\n         * `linkedTo` option to be set and should be loaded after the\n         * `stock/indicators/indicators.js`.\n         *\n         * @sample stock/indicators/macd\n         *         MACD indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/macd\n         * @optionparent plotOptions.macd\n         */\n        MACDIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                /**\n                 * The short period for indicator calculations.\n                 */\n                shortPeriod: 12,\n                /**\n                 * The long period for indicator calculations.\n                 */\n                longPeriod: 26,\n                /**\n                 * The base period for signal calculations.\n                 */\n                signalPeriod: 9,\n                period: 26\n            },\n            /**\n             * The styles for signal line\n             */\n            signalLine: {\n                /**\n                 * @sample stock/indicators/macd-zones\n                 *         Zones in MACD\n                 *\n                 * @extends plotOptions.macd.zones\n                 */\n                zones: [],\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type  {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * The styles for macd line\n             */\n            macdLine: {\n                /**\n                 * @sample stock/indicators/macd-zones\n                 *         Zones in MACD\n                 *\n                 * @extends plotOptions.macd.zones\n                 */\n                zones: [],\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type  {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * @type {number|null}\n             */\n            threshold: 0,\n            groupPadding: 0.1,\n            pointPadding: 0.1,\n            crisp: false,\n            states: {\n                hover: {\n                    halo: {\n                        size: 0\n                    }\n                }\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b> {series.name}</b><br/>' +\n                    'Value: {point.MACD}<br/>' +\n                    'Signal: {point.signal}<br/>' +\n                    'Histogram: {point.y}<br/>'\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            },\n            minPointLength: 0\n        });\n        extend(MACDIndicator.prototype, {\n            nameComponents: ['longPeriod', 'shortPeriod', 'signalPeriod'],\n            // \"y\" value is treated as Histogram data\n            pointArrayMap: ['y', 'signal', 'MACD'],\n            parallelArrays: ['x', 'y', 'signal', 'MACD'],\n            pointValKey: 'y',\n            // Columns support:\n            markerAttribs: noop,\n            getColumnMetrics: H.seriesTypes.column.prototype.getColumnMetrics,\n            crispCol: H.seriesTypes.column.prototype.crispCol,\n            drawPoints: H.seriesTypes.column.prototype.drawPoints\n        });\n        SeriesRegistry.registerSeriesType('macd', MACDIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `MACD` series. If the [type](#series.macd.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.macd\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/macd\n         * @apioption series.macd\n         */\n        ''; // To include the above in the js output\n\n        return MACDIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/MFI/MFIIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  Money Flow Index indicator for Highcharts Stock\n         *\n         *  (c) 2010-2024 Grzegorz Blachliński\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge, error, isArray } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         *\n         */\n        function sumArray(array) {\n            return array.reduce(function (prev, cur) {\n                return prev + cur;\n            });\n        }\n        /**\n         *\n         */\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        /**\n         *\n         */\n        function calculateTypicalPrice(point) {\n            return (point[1] + point[2] + point[3]) / 3;\n        }\n        /**\n         *\n         */\n        function calculateRawMoneyFlow(typicalPrice, volume) {\n            return typicalPrice * volume;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The MFI series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.mfi\n         *\n         * @augments Highcharts.Series\n         */\n        class MFIIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, decimals = params.decimals, volumeSeries = series.chart.get(params.volumeSeriesID), yValVolume = (volumeSeries && volumeSeries.yData), MFI = [], xData = [], yData = [], positiveMoneyFlow = [], negativeMoneyFlow = [];\n                let newTypicalPrice, oldTypicalPrice, rawMoneyFlow, negativeMoneyFlowSum, positiveMoneyFlowSum, moneyFlowRatio, MFIPoint, i, isUp = false, \n                // MFI starts calculations from the second point\n                // Cause we need to calculate change between two points\n                range = 1;\n                if (!volumeSeries) {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                    return;\n                }\n                // MFI requires high low and close values\n                if ((xVal.length <= period) || !isArray(yVal[0]) ||\n                    yVal[0].length !== 4 ||\n                    !yValVolume) {\n                    return;\n                }\n                // Calculate first typical price\n                newTypicalPrice = calculateTypicalPrice(yVal[range]);\n                // Accumulate first N-points\n                while (range < period + 1) {\n                    // Calculate if up or down\n                    oldTypicalPrice = newTypicalPrice;\n                    newTypicalPrice = calculateTypicalPrice(yVal[range]);\n                    isUp = newTypicalPrice >= oldTypicalPrice;\n                    // Calculate raw money flow\n                    rawMoneyFlow = calculateRawMoneyFlow(newTypicalPrice, yValVolume[range]);\n                    // Add to array\n                    positiveMoneyFlow.push(isUp ? rawMoneyFlow : 0);\n                    negativeMoneyFlow.push(isUp ? 0 : rawMoneyFlow);\n                    range++;\n                }\n                for (i = range - 1; i < yValLen; i++) {\n                    if (i > range - 1) {\n                        // Remove first point from array\n                        positiveMoneyFlow.shift();\n                        negativeMoneyFlow.shift();\n                        // Calculate if up or down\n                        oldTypicalPrice = newTypicalPrice;\n                        newTypicalPrice = calculateTypicalPrice(yVal[i]);\n                        isUp = newTypicalPrice > oldTypicalPrice;\n                        // Calculate raw money flow\n                        rawMoneyFlow = calculateRawMoneyFlow(newTypicalPrice, yValVolume[i]);\n                        // Add to array\n                        positiveMoneyFlow.push(isUp ? rawMoneyFlow : 0);\n                        negativeMoneyFlow.push(isUp ? 0 : rawMoneyFlow);\n                    }\n                    // Calculate sum of negative and positive money flow:\n                    negativeMoneyFlowSum = sumArray(negativeMoneyFlow);\n                    positiveMoneyFlowSum = sumArray(positiveMoneyFlow);\n                    moneyFlowRatio = positiveMoneyFlowSum / negativeMoneyFlowSum;\n                    MFIPoint = toFixed(100 - (100 / (1 + moneyFlowRatio)), decimals);\n                    MFI.push([xVal[i], MFIPoint]);\n                    xData.push(xVal[i]);\n                    yData.push(MFIPoint);\n                }\n                return {\n                    values: MFI,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Money Flow Index. This series requires `linkedTo` option to be set and\n         * should be loaded after the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/mfi\n         *         Money Flow Index Indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/mfi\n         * @optionparent plotOptions.mfi\n         */\n        MFIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unchangeable index, do not inherit (#15362)\n                /**\n                 * The id of volume series which is mandatory.\n                 * For example using OHLC data, volumeSeriesID='volume' means\n                 * the indicator will be calculated using OHLC and volume values.\n                 */\n                volumeSeriesID: 'volume',\n                /**\n                 * Number of maximum decimals that are used in MFI calculations.\n                 */\n                decimals: 4\n            }\n        });\n        extend(MFIIndicator.prototype, {\n            nameBase: 'Money Flow Index'\n        });\n        SeriesRegistry.registerSeriesType('mfi', MFIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `MFI` series. If the [type](#series.mfi.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.mfi\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/mfi\n         * @apioption series.mfi\n         */\n        ''; // To include the above in the js output\n\n        return MFIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Momentum/MomentumIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, isArray, merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function populateAverage(xVal, yVal, i, period, index) {\n            const mmY = yVal[i - 1][index] - yVal[i - period - 1][index], mmX = xVal[i - 1];\n            return [mmX, mmY];\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Momentum series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.momentum\n         *\n         * @augments Highcharts.Series\n         */\n        class MomentumIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, index = params.index, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, MM = [], xData = [], yData = [];\n                let i, MMPoint;\n                if (xVal.length <= period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (!isArray(yVal[0])) {\n                    return;\n                }\n                // Calculate value one-by-one for each period in visible data\n                for (i = (period + 1); i < yValLen; i++) {\n                    MMPoint = populateAverage(xVal, yVal, i, period, index);\n                    MM.push(MMPoint);\n                    xData.push(MMPoint[0]);\n                    yData.push(MMPoint[1]);\n                }\n                MMPoint = populateAverage(xVal, yVal, i, period, index);\n                MM.push(MMPoint);\n                xData.push(MMPoint[0]);\n                yData.push(MMPoint[1]);\n                return {\n                    values: MM,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Momentum. This series requires `linkedTo` option to be set.\n         *\n         * @sample stock/indicators/momentum\n         *         Momentum indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/momentum\n         * @optionparent plotOptions.momentum\n         */\n        MomentumIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                index: 3\n            }\n        });\n        extend(MomentumIndicator.prototype, {\n            nameBase: 'Momentum'\n        });\n        SeriesRegistry.registerSeriesType('momentum', MomentumIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Momentum` series. If the [type](#series.momentum.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.momentum\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/momentum\n         * @apioption series.momentum\n         */\n        ''; // To include the above in the js output\n\n        return MomentumIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/NATR/NATRIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { atr: ATRIndicator } = SeriesRegistry.seriesTypes;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The NATR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.natr\n         *\n         * @augments Highcharts.Series\n         */\n        class NATRIndicator extends ATRIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const atrData = (super.getValues.apply(this, arguments)), atrLength = atrData.values.length, yVal = series.yData;\n                let i = 0, period = params.period - 1;\n                if (!atrData) {\n                    return;\n                }\n                for (; i < atrLength; i++) {\n                    atrData.yData[i] = (atrData.values[i][1] / yVal[period][3] * 100);\n                    atrData.values[i][1] = atrData.yData[i];\n                    period++;\n                }\n                return atrData;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Normalized average true range indicator (NATR). This series requires\n         * `linkedTo` option to be set and should be loaded after the\n         * `stock/indicators/indicators.js` and `stock/indicators/atr.js`.\n         *\n         * @sample {highstock} stock/indicators/natr\n         *         NATR indicator\n         *\n         * @extends      plotOptions.atr\n         * @since        7.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/natr\n         * @optionparent plotOptions.natr\n         */\n        NATRIndicator.defaultOptions = merge(ATRIndicator.defaultOptions, {\n            tooltip: {\n                valueSuffix: '%'\n            }\n        });\n        SeriesRegistry.registerSeriesType('natr', NATRIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `NATR` series. If the [type](#series.natr.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.natr\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/atr\n         * @requires  stock/indicators/natr\n         * @apioption series.natr\n         */\n        ''; // To include the above in the js output'\n\n        return NATRIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/OBV/OBVIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { isNumber, error, extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The OBV series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.obv\n         *\n         * @augments Highcharts.Series\n         */\n        class OBVIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const volumeSeries = series.chart.get(params.volumeSeriesID), xVal = series.xData, yVal = series.yData, OBV = [], xData = [], yData = [], hasOHLC = !isNumber(yVal[0]);\n                let OBVPoint = [], i = 1, previousOBV = 0, curentOBV = 0, previousClose = 0, curentClose = 0, volume;\n                // Checks if volume series exists.\n                if (volumeSeries) {\n                    volume = volumeSeries.yData;\n                    // Add first point and get close value.\n                    OBVPoint = [xVal[0], previousOBV];\n                    previousClose = hasOHLC ?\n                        yVal[0][3] : yVal[0];\n                    OBV.push(OBVPoint);\n                    xData.push(xVal[0]);\n                    yData.push(OBVPoint[1]);\n                    for (i; i < yVal.length; i++) {\n                        curentClose = hasOHLC ?\n                            yVal[i][3] : yVal[i];\n                        if (curentClose > previousClose) { // Up\n                            curentOBV = previousOBV + volume[i];\n                        }\n                        else if (curentClose === previousClose) { // Constant\n                            curentOBV = previousOBV;\n                        }\n                        else { // Down\n                            curentOBV = previousOBV - volume[i];\n                        }\n                        // Add point.\n                        OBVPoint = [xVal[i], curentOBV];\n                        // Assign current as previous for next iteration.\n                        previousOBV = curentOBV;\n                        previousClose = curentClose;\n                        OBV.push(OBVPoint);\n                        xData.push(xVal[i]);\n                        yData.push(OBVPoint[1]);\n                    }\n                }\n                else {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, series.chart);\n                    return;\n                }\n                return {\n                    values: OBV,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * On-Balance Volume (OBV) technical indicator. This series\n         * requires the `linkedTo` option to be set and should be loaded after\n         * the `stock/indicators/indicators.js` file. Through the `volumeSeriesID`\n         * there also should be linked the volume series.\n         *\n         * @sample stock/indicators/obv\n         *         OBV indicator\n         *\n         * @extends      plotOptions.sma\n         * @since 9.1.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/obv\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @optionparent plotOptions.obv\n         */\n        OBVIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            marker: {\n                enabled: false\n            },\n            /**\n             * @excluding index, period\n             */\n            params: {\n                // Index and period are unchangeable, do not inherit (#15362)\n                index: void 0,\n                period: void 0,\n                /**\n                 * The id of another series to use its data as volume data for the\n                 * indicator calculation.\n                 */\n                volumeSeriesID: 'volume'\n            },\n            tooltip: {\n                valueDecimals: 0\n            }\n        });\n        extend(OBVIndicator.prototype, {\n            nameComponents: void 0\n        });\n        SeriesRegistry.registerSeriesType('obv', OBVIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `OBV` series. If the [type](#series.obv.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.obv\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/obv\n         * @apioption series.obv\n         */\n        ''; // To include the above in the js output\n\n        return OBVIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PivotPoints/PivotPointsPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const SMAPoint = SeriesRegistry.seriesTypes.sma.prototype.pointClass;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function destroyExtraLabels(point, functionName) {\n            const props = point.series.pointArrayMap;\n            let prop, i = props.length;\n            SeriesRegistry.seriesTypes.sma.prototype.pointClass.prototype[functionName].call(point);\n            while (i--) {\n                prop = 'dataLabel' + props[i];\n                // S4 dataLabel could be removed by parent method:\n                if (point[prop] && point[prop].element) {\n                    point[prop].destroy();\n                }\n                point[prop] = null;\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class PivotPointsPoint extends SMAPoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            destroyElements() {\n                destroyExtraLabels(this, 'destroyElements');\n            }\n            // This method is called when removing points, e.g. series.update()\n            destroy() {\n                destroyExtraLabels(this, 'destroyElements');\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PivotPointsPoint;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PivotPoints/PivotPointsIndicator.js', [_modules['Stock/Indicators/PivotPoints/PivotPointsPoint.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (PivotPointsPoint, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { merge, extend, defined, isArray } = U;\n        /**\n         *\n         *  Class\n         *\n         **/\n        /**\n         * The Pivot Points series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.pivotpoints\n         *\n         * @augments Highcharts.Series\n         */\n        class PivotPointsIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            toYData(point) {\n                return [point.P]; // The rest should not affect extremes\n            }\n            translate() {\n                const indicator = this;\n                super.translate.apply(indicator);\n                indicator.points.forEach(function (point) {\n                    indicator.pointArrayMap.forEach(function (value) {\n                        if (defined(point[value])) {\n                            point['plot' + value] = (indicator.yAxis.toPixels(point[value], true));\n                        }\n                    });\n                });\n                // Pivot points are rendered as horizontal lines\n                // And last point start not from the next one (as it's the last one)\n                // But from the approximated last position in a given range\n                indicator.plotEndPoint = indicator.xAxis.toPixels(indicator.endPoint, true);\n            }\n            getGraphPath(points) {\n                const indicator = this, allPivotPoints = ([[], [], [], [], [], [], [], [], []]), pointArrayMapLength = indicator.pointArrayMap.length;\n                let endPoint = indicator.plotEndPoint, path = [], position, point, pointsLength = points.length, i;\n                while (pointsLength--) {\n                    point = points[pointsLength];\n                    for (i = 0; i < pointArrayMapLength; i++) {\n                        position = indicator.pointArrayMap[i];\n                        if (defined(point[position])) {\n                            allPivotPoints[i].push({\n                                // Start left:\n                                plotX: point.plotX,\n                                plotY: point['plot' + position],\n                                isNull: false\n                            }, {\n                                // Go to right:\n                                plotX: endPoint,\n                                plotY: point['plot' + position],\n                                isNull: false\n                            }, {\n                                // And add null points in path to generate breaks:\n                                plotX: endPoint,\n                                plotY: null,\n                                isNull: true\n                            });\n                        }\n                    }\n                    endPoint = point.plotX;\n                }\n                allPivotPoints.forEach((pivotPoints) => {\n                    path = path.concat(super.getGraphPath.call(indicator, pivotPoints));\n                });\n                return path;\n            }\n            // TODO: Rewrite this logic to use multiple datalabels\n            drawDataLabels() {\n                const indicator = this, pointMapping = indicator.pointArrayMap;\n                let currentLabel, pointsLength, point, i;\n                if (indicator.options.dataLabels.enabled) {\n                    pointsLength = indicator.points.length;\n                    // For every Resistance/Support group we need to render labels.\n                    // Add one more item, which will just store dataLabels from\n                    // previous iteration\n                    pointMapping.concat([false]).forEach((position, k) => {\n                        i = pointsLength;\n                        while (i--) {\n                            point = indicator.points[i];\n                            if (!position) {\n                                // Store S4 dataLabel too:\n                                point['dataLabel' + pointMapping[k - 1]] =\n                                    point.dataLabel;\n                            }\n                            else {\n                                point.y = point[position];\n                                point.pivotLine = position;\n                                point.plotY = point['plot' + position];\n                                currentLabel = point['dataLabel' + position];\n                                // Store previous label\n                                if (k) {\n                                    point['dataLabel' + pointMapping[k - 1]] = point.dataLabel;\n                                }\n                                if (!point.dataLabels) {\n                                    point.dataLabels = [];\n                                }\n                                point.dataLabels[0] = point.dataLabel =\n                                    currentLabel =\n                                        currentLabel && currentLabel.element ?\n                                            currentLabel :\n                                            null;\n                            }\n                        }\n                        super.drawDataLabels\n                            .call(indicator);\n                    });\n                }\n            }\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, placement = this[params.algorithm + 'Placement'], \n                // 0- from, 1- to, 2- R1, 3- R2, 4- pivot, 5- S1 etc.\n                PP = [], xData = [], yData = [];\n                let endTimestamp, slicedXLen, slicedX, slicedY, lastPP, pivot, avg, i;\n                // Pivot Points requires high, low and close values\n                if (xVal.length < period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = period + 1; i <= yValLen + period; i += period) {\n                    slicedX = xVal.slice(i - period - 1, i);\n                    slicedY = yVal.slice(i - period - 1, i);\n                    slicedXLen = slicedX.length;\n                    endTimestamp = slicedX[slicedXLen - 1];\n                    pivot = this.getPivotAndHLC(slicedY);\n                    avg = placement(pivot);\n                    lastPP = PP.push([endTimestamp]\n                        .concat(avg));\n                    xData.push(endTimestamp);\n                    yData.push(PP[lastPP - 1].slice(1));\n                }\n                // We don't know exact position in ordinal axis\n                // So we use simple logic:\n                // Get first point in last range, calculate visible average range\n                // and multiply by period\n                this.endPoint = slicedX[0] + ((endTimestamp - slicedX[0]) /\n                    slicedXLen) * period;\n                return {\n                    values: PP,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n            getPivotAndHLC(values) {\n                const close = values[values.length - 1][3];\n                let high = -Infinity, low = Infinity;\n                values.forEach(function (p) {\n                    high = Math.max(high, p[1]);\n                    low = Math.min(low, p[2]);\n                });\n                const pivot = (high + low + close) / 3;\n                return [pivot, high, low, close];\n            }\n            standardPlacement(values) {\n                const diff = values[1] - values[2], avg = [\n                    null,\n                    null,\n                    values[0] + diff,\n                    values[0] * 2 - values[2],\n                    values[0],\n                    values[0] * 2 - values[1],\n                    values[0] - diff,\n                    null,\n                    null\n                ];\n                return avg;\n            }\n            camarillaPlacement(values) {\n                const diff = values[1] - values[2], avg = [\n                    values[3] + diff * 1.5,\n                    values[3] + diff * 1.25,\n                    values[3] + diff * 1.1666,\n                    values[3] + diff * 1.0833,\n                    values[0],\n                    values[3] - diff * 1.0833,\n                    values[3] - diff * 1.1666,\n                    values[3] - diff * 1.25,\n                    values[3] - diff * 1.5\n                ];\n                return avg;\n            }\n            fibonacciPlacement(values) {\n                const diff = values[1] - values[2], avg = [\n                    null,\n                    values[0] + diff,\n                    values[0] + diff * 0.618,\n                    values[0] + diff * 0.382,\n                    values[0],\n                    values[0] - diff * 0.382,\n                    values[0] - diff * 0.618,\n                    values[0] - diff,\n                    null\n                ];\n                return avg;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Pivot points indicator. This series requires the `linkedTo` option to be\n         * set and should be loaded after `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/pivot-points\n         *         Pivot points\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/pivot-points\n         * @optionparent plotOptions.pivotpoints\n         */\n        PivotPointsIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unchangeable index, do not inherit (#15362)\n                period: 28,\n                /**\n                 * Algorithm used to calculate resistance and support lines based\n                 * on pivot points. Implemented algorithms: `'standard'`,\n                 * `'fibonacci'` and `'camarilla'`\n                 */\n                algorithm: 'standard'\n            },\n            marker: {\n                enabled: false\n            },\n            enableMouseTracking: false,\n            dataLabels: {\n                enabled: true,\n                format: '{point.pivotLine}'\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(PivotPointsIndicator.prototype, {\n            nameBase: 'Pivot Points',\n            pointArrayMap: ['R4', 'R3', 'R2', 'R1', 'P', 'S1', 'S2', 'S3', 'S4'],\n            pointValKey: 'P',\n            pointClass: PivotPointsPoint\n        });\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        SeriesRegistry.registerSeriesType('pivotpoints', PivotPointsIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A pivot points indicator. If the [type](#series.pivotpoints.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.pivotpoints\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/pivot-points\n         * @apioption series.pivotpoints\n         */\n        ''; // To include the above in the js output'\n\n        return PivotPointsIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PPO/PPOIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { ema: EMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, extend, merge, error } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The PPO series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ppo\n         *\n         * @augments Highcharts.Series\n         */\n        class PPOIndicator extends EMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const periods = params.periods, index = params.index, \n                // 0- date, 1- Percentage Price Oscillator\n                PPO = [], xData = [], yData = [];\n                let oscillator, i;\n                // Check if periods are correct\n                if (periods.length !== 2 || periods[1] <= periods[0]) {\n                    error('Error: \"PPO requires two periods. Notice, first period ' +\n                        'should be lower than the second one.\"');\n                    return;\n                }\n                // Shorter Period EMA\n                const SPE = super.getValues.call(this, series, {\n                    index: index,\n                    period: periods[0]\n                });\n                // Longer Period EMA\n                const LPE = super.getValues.call(this, series, {\n                    index: index,\n                    period: periods[1]\n                });\n                // Check if ema is calculated properly, if not skip\n                if (!SPE || !LPE) {\n                    return;\n                }\n                const periodsOffset = periods[1] - periods[0];\n                for (i = 0; i < LPE.yData.length; i++) {\n                    oscillator = correctFloat((SPE.yData[i + periodsOffset] -\n                        LPE.yData[i]) /\n                        LPE.yData[i] *\n                        100);\n                    PPO.push([LPE.xData[i], oscillator]);\n                    xData.push(LPE.xData[i]);\n                    yData.push(oscillator);\n                }\n                return {\n                    values: PPO,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Percentage Price Oscillator. This series requires the\n         * `linkedTo` option to be set and should be loaded after the\n         * `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/ppo\n         *         Percentage Price Oscillator\n         *\n         * @extends      plotOptions.ema\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/ppo\n         * @optionparent plotOptions.ppo\n         */\n        PPOIndicator.defaultOptions = merge(EMAIndicator.defaultOptions, {\n            /**\n             * Parameters used in calculation of Percentage Price Oscillator series\n             * points.\n             *\n             * @excluding period\n             */\n            params: {\n                period: void 0, // Unchangeable period, do not inherit (#15362)\n                /**\n                 * Periods for Percentage Price Oscillator calculations.\n                 *\n                 * @type    {Array<number>}\n                 * @default [12, 26]\n                 */\n                periods: [12, 26]\n            }\n        });\n        extend(PPOIndicator.prototype, {\n            nameBase: 'PPO',\n            nameComponents: ['periods']\n        });\n        SeriesRegistry.registerSeriesType('ppo', PPOIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Percentage Price Oscillator` series. If the [type](#series.ppo.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ppo\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/ppo\n         * @apioption series.ppo\n         */\n        ''; // To include the above in the js output\n\n        return PPOIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ArrayUtilities.js', [], function () {\n        /**\n         *\n         *  (c) 2010-2024 Pawel Fus & Daniel Studencki\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get extremes of array filled by OHLC data.\n         *\n         * @private\n         *\n         * @param {Array<Array<number>>} arr\n         * Array of OHLC points (arrays).\n         *\n         * @param {number} minIndex\n         * Index of \"low\" value in point array.\n         *\n         * @param {number} maxIndex\n         * Index of \"high\" value in point array.\n         *\n         * @return {Array<number,number>}\n         * Returns array with min and max value.\n         */\n        function getArrayExtremes(arr, minIndex, maxIndex) {\n            return arr.reduce((prev, target) => [\n                Math.min(prev[0], target[minIndex]),\n                Math.max(prev[1], target[maxIndex])\n            ], [Number.MAX_VALUE, -Number.MAX_VALUE]);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ArrayUtilities = {\n            getArrayExtremes\n        };\n\n        return ArrayUtilities;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PC/PCIndicator.js', [_modules['Stock/Indicators/ArrayUtilities.js'], _modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AU, MultipleLinesComposition, Palettes, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { merge, extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Price Channel series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.pc\n         *\n         * @augments Highcharts.Series\n         */\n        class PCIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, \n                // 0- date, 1-top line, 2-middle line, 3-bottom line\n                PC = [], \n                // Middle line, top line and bottom line\n                low = 2, high = 1, xData = [], yData = [];\n                let ML, TL, BL, date, slicedY, extremes, i;\n                if (yValLen < period) {\n                    return;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    date = xVal[i - 1];\n                    slicedY = yVal.slice(i - period, i);\n                    extremes = AU.getArrayExtremes(slicedY, low, high);\n                    TL = extremes[1];\n                    BL = extremes[0];\n                    ML = (TL + BL) / 2;\n                    PC.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: PC,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Price channel (PC). This series requires the `linkedTo` option to be\n         * set and should be loaded after the `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/price-channel\n         *         Price Channel\n         *\n         * @extends      plotOptions.sma\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/price-channel\n         * @optionparent plotOptions.pc\n         */\n        PCIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Option for fill color between lines in Price channel Indicator.\n             *\n             * @sample {highstock} stock/indicators/indicator-area-fill\n             *      background fill between lines\n             *\n             * @type {Highcharts.Color}\n             * @apioption plotOptions.pc.fillColor\n             *\n             */\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unchangeable index, do not inherit (#15362)\n                period: 20\n            },\n            lineWidth: 1,\n            topLine: {\n                styles: {\n                    /**\n                     * Color of the top line. If not set, it's inherited from\n                     * [plotOptions.pc.color](#plotOptions.pc.color).\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: Palettes.colors[2],\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1\n                }\n            },\n            bottomLine: {\n                styles: {\n                    /**\n                     * Color of the bottom line. If not set, it's inherited from\n                     * [plotOptions.pc.color](#plotOptions.pc.color).\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: Palettes.colors[8],\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(PCIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            nameBase: 'Price Channel',\n            nameComponents: ['period'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(PCIndicator);\n        SeriesRegistry.registerSeriesType('pc', PCIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Price channel indicator. If the [type](#series.pc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends      series,plotOptions.pc\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *               joinBy, keys, navigatorOptions, pointInterval,\n         *               pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *               showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/price-channel\n         * @apioption    series.pc\n         */\n        ''; // To include the above in the js output\n\n        return PCIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PriceEnvelopes/PriceEnvelopesIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Price Envelopes series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.priceenvelopes\n         *\n         * @augments Highcharts.Series\n         */\n        class PriceEnvelopesIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init() {\n                super.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    topLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    },\n                    bottomLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            }\n            getValues(series, params) {\n                const period = params.period, topPercent = params.topBand, botPercent = params.bottomBand, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, \n                // 0- date, 1-top line, 2-middle line, 3-bottom line\n                PE = [], \n                // Middle line, top line and bottom line\n                xData = [], yData = [];\n                let ML, TL, BL, date, slicedX, slicedY, point, i;\n                // Price envelopes requires close value\n                if (xVal.length < period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                for (i = period; i <= yValLen; i++) {\n                    slicedX = xVal.slice(i - period, i);\n                    slicedY = yVal.slice(i - period, i);\n                    point = super.getValues({\n                        xData: slicedX,\n                        yData: slicedY\n                    }, params);\n                    date = point.xData[0];\n                    ML = point.yData[0];\n                    TL = ML * (1 + topPercent);\n                    BL = ML * (1 - botPercent);\n                    PE.push([date, TL, ML, BL]);\n                    xData.push(date);\n                    yData.push([TL, ML, BL]);\n                }\n                return {\n                    values: PE,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Price envelopes indicator based on [SMA](#plotOptions.sma) calculations.\n         * This series requires the `linkedTo` option to be set and should be loaded\n         * after the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/price-envelopes\n         *         Price envelopes\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/price-envelopes\n         * @optionparent plotOptions.priceenvelopes\n         */\n        PriceEnvelopesIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            marker: {\n                enabled: false\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Top: {point.top}<br/>Middle: {point.middle}<br/>Bottom: {point.bottom}<br/>'\n            },\n            params: {\n                period: 20,\n                /**\n                 * Percentage above the moving average that should be displayed.\n                 * 0.1 means 110%. Relative to the calculated value.\n                 */\n                topBand: 0.1,\n                /**\n                 * Percentage below the moving average that should be displayed.\n                 * 0.1 means 90%. Relative to the calculated value.\n                 */\n                bottomBand: 0.1\n            },\n            /**\n             * Bottom line options.\n             */\n            bottomLine: {\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line. If not set, it's inherited from\n                     * [plotOptions.priceenvelopes.color](\n                     * #plotOptions.priceenvelopes.color).\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            /**\n             * Top line options.\n             *\n             * @extends plotOptions.priceenvelopes.bottomLine\n             */\n            topLine: {\n                styles: {\n                    lineWidth: 1\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n            /**\n             * Option for fill color between lines in Price Envelopes Indicator.\n             *\n             * @sample {highstock} stock/indicators/indicator-area-fill\n             *      Background fill between lines.\n             *\n             * @type      {Highcharts.Color}\n             * @since 11.0.0\n             * @apioption plotOptions.priceenvelopes.fillColor\n             *\n             */\n        });\n        extend(PriceEnvelopesIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            nameComponents: ['period', 'topBand', 'bottomBand'],\n            nameBase: 'Price envelopes',\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            parallelArrays: ['x', 'y', 'top', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(PriceEnvelopesIndicator);\n        SeriesRegistry.registerSeriesType('priceenvelopes', PriceEnvelopesIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A price envelopes indicator. If the [type](#series.priceenvelopes.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.priceenvelopes\n         * @since     6.0.0\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/price-envelopes\n         * @apioption series.priceenvelopes\n         */\n        ''; // To include the above in the js output\n\n        return PriceEnvelopesIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/PSAR/PSARIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  Parabolic SAR indicator for Highcharts Stock\n         *\n         *  (c) 2010-2024 Grzegorz Blachliński\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         *\n         */\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        /**\n         *\n         */\n        function calculateDirection(previousDirection, low, high, PSAR) {\n            if ((previousDirection === 1 && low > PSAR) ||\n                (previousDirection === -1 && high > PSAR)) {\n                return 1;\n            }\n            return -1;\n        }\n        /* *\n         * Method for calculating acceleration factor\n         * dir - direction\n         * pDir - previous Direction\n         * eP - extreme point\n         * pEP - previous extreme point\n         * inc - increment for acceleration factor\n         * maxAcc - maximum acceleration factor\n         * initAcc - initial acceleration factor\n         */\n        /**\n         *\n         */\n        function getAccelerationFactor(dir, pDir, eP, pEP, pAcc, inc, maxAcc, initAcc) {\n            if (dir === pDir) {\n                if (dir === 1 && (eP > pEP)) {\n                    return (pAcc === maxAcc) ? maxAcc : toFixed(pAcc + inc, 2);\n                }\n                if (dir === -1 && (eP < pEP)) {\n                    return (pAcc === maxAcc) ? maxAcc : toFixed(pAcc + inc, 2);\n                }\n                return pAcc;\n            }\n            return initAcc;\n        }\n        /**\n         *\n         */\n        function getExtremePoint(high, low, previousDirection, previousExtremePoint) {\n            if (previousDirection === 1) {\n                return (high > previousExtremePoint) ? high : previousExtremePoint;\n            }\n            return (low < previousExtremePoint) ? low : previousExtremePoint;\n        }\n        /**\n         *\n         */\n        function getEPMinusPSAR(EP, PSAR) {\n            return EP - PSAR;\n        }\n        /**\n         *\n         */\n        function getAccelerationFactorMultiply(accelerationFactor, EPMinusSAR) {\n            return accelerationFactor * EPMinusSAR;\n        }\n        /* *\n         * Method for calculating PSAR\n         * pdir - previous direction\n         * sDir - second previous Direction\n         * PSAR - previous PSAR\n         * pACCMultiply - previous acceleration factor multiply\n         * sLow - second previous low\n         * pLow - previous low\n         * sHigh - second previous high\n         * pHigh - previous high\n         * pEP - previous extreme point\n         */\n        /**\n         *\n         */\n        function getPSAR(pdir, sDir, PSAR, pACCMulti, sLow, pLow, pHigh, sHigh, pEP) {\n            if (pdir === sDir) {\n                if (pdir === 1) {\n                    return (PSAR + pACCMulti < Math.min(sLow, pLow)) ?\n                        PSAR + pACCMulti :\n                        Math.min(sLow, pLow);\n                }\n                return (PSAR + pACCMulti > Math.max(sHigh, pHigh)) ?\n                    PSAR + pACCMulti :\n                    Math.max(sHigh, pHigh);\n            }\n            return pEP;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Parabolic SAR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.psar\n         *\n         * @augments Highcharts.Series\n         */\n        class PSARIndicator extends SMAIndicator {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.nameComponents = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const xVal = series.xData, yVal = series.yData, maxAccelerationFactor = params.maxAccelerationFactor, increment = params.increment, \n                // Set initial acc factor (for every new trend!)\n                initialAccelerationFactor = params.initialAccelerationFactor, decimals = params.decimals, index = params.index, PSARArr = [], xData = [], yData = [];\n                let accelerationFactor = params.initialAccelerationFactor, direction, \n                // Extreme point is the lowest low for falling and highest high\n                // for rising psar - and we are starting with falling\n                extremePoint = yVal[0][1], EPMinusPSAR, accelerationFactorMultiply, newDirection, previousDirection = 1, prevLow, prevPrevLow, prevHigh, prevPrevHigh, PSAR = yVal[0][2], newExtremePoint, high, low, ind;\n                if (index >= yVal.length) {\n                    return;\n                }\n                for (ind = 0; ind < index; ind++) {\n                    extremePoint = Math.max(yVal[ind][1], extremePoint);\n                    PSAR = Math.min(yVal[ind][2], toFixed(PSAR, decimals));\n                }\n                direction = (yVal[ind][1] > PSAR) ? 1 : -1;\n                EPMinusPSAR = getEPMinusPSAR(extremePoint, PSAR);\n                accelerationFactor = params.initialAccelerationFactor;\n                accelerationFactorMultiply = getAccelerationFactorMultiply(accelerationFactor, EPMinusPSAR);\n                PSARArr.push([xVal[index], PSAR]);\n                xData.push(xVal[index]);\n                yData.push(toFixed(PSAR, decimals));\n                for (ind = index + 1; ind < yVal.length; ind++) {\n                    prevLow = yVal[ind - 1][2];\n                    prevPrevLow = yVal[ind - 2][2];\n                    prevHigh = yVal[ind - 1][1];\n                    prevPrevHigh = yVal[ind - 2][1];\n                    high = yVal[ind][1];\n                    low = yVal[ind][2];\n                    // Null points break PSAR\n                    if (prevPrevLow !== null &&\n                        prevPrevHigh !== null &&\n                        prevLow !== null &&\n                        prevHigh !== null &&\n                        high !== null &&\n                        low !== null) {\n                        PSAR = getPSAR(direction, previousDirection, PSAR, accelerationFactorMultiply, prevPrevLow, prevLow, prevHigh, prevPrevHigh, extremePoint);\n                        newExtremePoint = getExtremePoint(high, low, direction, extremePoint);\n                        newDirection = calculateDirection(previousDirection, low, high, PSAR);\n                        accelerationFactor = getAccelerationFactor(newDirection, direction, newExtremePoint, extremePoint, accelerationFactor, increment, maxAccelerationFactor, initialAccelerationFactor);\n                        EPMinusPSAR = getEPMinusPSAR(newExtremePoint, PSAR);\n                        accelerationFactorMultiply = getAccelerationFactorMultiply(accelerationFactor, EPMinusPSAR);\n                        PSARArr.push([xVal[ind], toFixed(PSAR, decimals)]);\n                        xData.push(xVal[ind]);\n                        yData.push(toFixed(PSAR, decimals));\n                        previousDirection = direction;\n                        direction = newDirection;\n                        extremePoint = newExtremePoint;\n                    }\n                }\n                return {\n                    values: PSARArr,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /**\n         * Parabolic SAR. This series requires `linkedTo`\n         * option to be set and should be loaded\n         * after `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/psar\n         *         Parabolic SAR Indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/psar\n         * @optionparent plotOptions.psar\n         */\n        PSARIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            lineWidth: 0,\n            marker: {\n                enabled: true\n            },\n            states: {\n                hover: {\n                    lineWidthPlus: 0\n                }\n            },\n            /**\n             * @excluding period\n             */\n            params: {\n                period: void 0, // Unchangeable period, do not inherit (#15362)\n                /**\n                 * The initial value for acceleration factor.\n                 * Acceleration factor is starting with this value\n                 * and increases by specified increment each time\n                 * the extreme point makes a new high.\n                 * AF can reach a maximum of maxAccelerationFactor,\n                 * no matter how long the uptrend extends.\n                 */\n                initialAccelerationFactor: 0.02,\n                /**\n                 * The Maximum value for acceleration factor.\n                 * AF can reach a maximum of maxAccelerationFactor,\n                 * no matter how long the uptrend extends.\n                 */\n                maxAccelerationFactor: 0.2,\n                /**\n                 * Acceleration factor increases by increment each time\n                 * the extreme point makes a new high.\n                 *\n                 * @since 6.0.0\n                 */\n                increment: 0.02,\n                /**\n                 * Index from which PSAR is starting calculation\n                 *\n                 * @since 6.0.0\n                 */\n                index: 2,\n                /**\n                 * Number of maximum decimals that are used in PSAR calculations.\n                 *\n                 * @since 6.0.0\n                 */\n                decimals: 4\n            }\n        });\n        SeriesRegistry.registerSeriesType('psar', PSARIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `PSAR` series. If the [type](#series.psar.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.psar\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/psar\n         * @apioption series.psar\n         */\n        ''; // To include the above in the js output\n\n        return PSARIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ROC/ROCIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { isArray, merge, extend } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         *\n         */\n        function populateAverage(xVal, yVal, i, period, index) {\n            /* Calculated as:\n\n               (Closing Price [today] - Closing Price [n days ago]) /\n                Closing Price [n days ago] * 100\n\n               Return y as null when avoiding division by zero */\n            let nDaysAgoY, rocY;\n            if (index < 0) {\n                // Y data given as an array of values\n                nDaysAgoY = yVal[i - period];\n                rocY = nDaysAgoY ?\n                    (yVal[i] - nDaysAgoY) / nDaysAgoY * 100 :\n                    null;\n            }\n            else {\n                // Y data given as an array of arrays and the index should be used\n                nDaysAgoY = yVal[i - period][index];\n                rocY = nDaysAgoY ?\n                    (yVal[i][index] - nDaysAgoY) / nDaysAgoY * 100 :\n                    null;\n            }\n            return [xVal[i], rocY];\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ROC series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.roc\n         *\n         * @augments Highcharts.Series\n         */\n        class ROCIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, ROC = [], xData = [], yData = [];\n                let i, index = -1, ROCPoint;\n                // Period is used as a number of time periods ago, so we need more\n                // (at least 1 more) data than the period value\n                if (xVal.length <= period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick / Arearange\n                if (isArray(yVal[0])) {\n                    index = params.index;\n                }\n                // I = period <-- skip first N-points\n                // Calculate value one-by-one for each period in visible data\n                for (i = period; i < yValLen; i++) {\n                    ROCPoint = populateAverage(xVal, yVal, i, period, index);\n                    ROC.push(ROCPoint);\n                    xData.push(ROCPoint[0]);\n                    yData.push(ROCPoint[1]);\n                }\n                return {\n                    values: ROC,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Rate of change indicator (ROC). The indicator value for each point\n         * is defined as:\n         *\n         * `(C - Cn) / Cn * 100`\n         *\n         * where: `C` is the close value of the point of the same x in the\n         * linked series and `Cn` is the close value of the point `n` periods\n         * ago. `n` is set through [period](#plotOptions.roc.params.period).\n         *\n         * This series requires `linkedTo` option to be set.\n         *\n         * @sample stock/indicators/roc\n         *         Rate of change indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/roc\n         * @optionparent plotOptions.roc\n         */\n        ROCIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                index: 3,\n                period: 9\n            }\n        });\n        extend(ROCIndicator.prototype, {\n            nameBase: 'Rate of Change'\n        });\n        SeriesRegistry.registerSeriesType('roc', ROCIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `ROC` series. If the [type](#series.wma.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * Rate of change indicator (ROC). The indicator value for each point\n         * is defined as:\n         *\n         * `(C - Cn) / Cn * 100`\n         *\n         * where: `C` is the close value of the point of the same x in the\n         * linked series and `Cn` is the close value of the point `n` periods\n         * ago. `n` is set through [period](#series.roc.params.period).\n         *\n         * This series requires `linkedTo` option to be set.\n         *\n         * @extends   series,plotOptions.roc\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/roc\n         * @apioption series.roc\n         */\n        ''; // To include the above in the js output\n\n        return ROCIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/RSI/RSIIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { isNumber, merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         *\n         */\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The RSI series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.rsi\n         *\n         * @augments Highcharts.Series\n         */\n        class RSIIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, decimals = params.decimals, \n                // RSI starts calculations from the second point\n                // Cause we need to calculate change between two points\n                RSI = [], xData = [], yData = [];\n                let gain = 0, loss = 0, index = params.index, range = 1, RSIPoint, change, avgGain, avgLoss, i, values;\n                if ((xVal.length < period)) {\n                    return;\n                }\n                if (isNumber(yVal[0])) {\n                    values = yVal;\n                }\n                else {\n                    // In case of the situation, where the series type has data length\n                    // longer then 4 (HLC, range), this ensures that we are not trying\n                    // to reach the index out of bounds\n                    index = Math.min(index, yVal[0].length - 1);\n                    values = yVal\n                        .map((value) => value[index]);\n                }\n                // Calculate changes for first N points\n                while (range < period) {\n                    change = toFixed(values[range] - values[range - 1], decimals);\n                    if (change > 0) {\n                        gain += change;\n                    }\n                    else {\n                        loss += Math.abs(change);\n                    }\n                    range++;\n                }\n                // Average for first n-1 points:\n                avgGain = toFixed(gain / (period - 1), decimals);\n                avgLoss = toFixed(loss / (period - 1), decimals);\n                for (i = range; i < yValLen; i++) {\n                    change = toFixed(values[i] - values[i - 1], decimals);\n                    if (change > 0) {\n                        gain = change;\n                        loss = 0;\n                    }\n                    else {\n                        gain = 0;\n                        loss = Math.abs(change);\n                    }\n                    // Calculate smoothed averages, RS, RSI values:\n                    avgGain = toFixed((avgGain * (period - 1) + gain) / period, decimals);\n                    avgLoss = toFixed((avgLoss * (period - 1) + loss) / period, decimals);\n                    // If average-loss is equal zero, then by definition RSI is set\n                    // to 100:\n                    if (avgLoss === 0) {\n                        RSIPoint = 100;\n                        // If average-gain is equal zero, then by definition RSI is set\n                        // to 0:\n                    }\n                    else if (avgGain === 0) {\n                        RSIPoint = 0;\n                    }\n                    else {\n                        RSIPoint = toFixed(100 - (100 / (1 + (avgGain / avgLoss))), decimals);\n                    }\n                    RSI.push([xVal[i], RSIPoint]);\n                    xData.push(xVal[i]);\n                    yData.push(RSIPoint);\n                }\n                return {\n                    values: RSI,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Relative strength index (RSI) technical indicator. This series\n         * requires the `linkedTo` option to be set and should be loaded after\n         * the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/rsi\n         *         RSI indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/rsi\n         * @optionparent plotOptions.rsi\n         */\n        RSIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                decimals: 4,\n                index: 3\n            }\n        });\n        SeriesRegistry.registerSeriesType('rsi', RSIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `RSI` series. If the [type](#series.rsi.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.rsi\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/rsi\n         * @apioption series.rsi\n         */\n        ''; // To include the above in the js output\n\n        return RSIIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Stochastic/StochasticIndicator.js', [_modules['Stock/Indicators/ArrayUtilities.js'], _modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AU, MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Stochastic series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.stochastic\n         *\n         * @augments Highcharts.Series\n         */\n        class StochasticIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init() {\n                super.init.apply(this, arguments);\n                // Set default color for lines:\n                this.options = merge({\n                    smoothedLine: {\n                        styles: {\n                            lineColor: this.color\n                        }\n                    }\n                }, this.options);\n            }\n            getValues(series, params) {\n                const periodK = params.periods[0], periodD = params.periods[1], xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, \n                // 0- date, 1-%K, 2-%D\n                SO = [], xData = [], yData = [], close = 3, low = 2, high = 1;\n                let slicedY, CL, HL, LL, K, D = null, points, extremes, i;\n                // Stochastic requires close value\n                if (yValLen < periodK ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // If the value of initial points is constant, wait until it changes\n                // to calculate correct Stochastic values\n                let constantValues = true, j = 0;\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = periodK - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - periodK + 1, i + 1);\n                    // Calculate %K\n                    extremes = AU.getArrayExtremes(slicedY, low, high);\n                    LL = extremes[0]; // Lowest low in %K periods\n                    CL = yVal[i][close] - LL;\n                    HL = extremes[1] - LL;\n                    K = CL / HL * 100;\n                    if (isNaN(K) && constantValues) {\n                        j++;\n                        continue;\n                    }\n                    else if (constantValues && !isNaN(K)) {\n                        constantValues = false;\n                    }\n                    const length = xData.push(xVal[i]);\n                    // If N-period previous values are constant which results in NaN %K,\n                    // we need to use previous %K value if it is a number,\n                    // otherwise we should use null\n                    if (isNaN(K)) {\n                        yData.push([\n                            yData[length - 2] &&\n                                typeof yData[length - 2][0] === 'number' ?\n                                yData[length - 2][0] : null,\n                            null\n                        ]);\n                    }\n                    else {\n                        yData.push([K, null]);\n                    }\n                    // Calculate smoothed %D, which is SMA of %K\n                    if (i >= j + (periodK - 1) + (periodD - 1)) {\n                        points = super.getValues({\n                            xData: xData.slice(-periodD),\n                            yData: yData.slice(-periodD)\n                        }, {\n                            period: periodD\n                        });\n                        D = points.yData[0];\n                    }\n                    SO.push([xVal[i], K, D]);\n                    yData[length - 1][1] = D;\n                }\n                return {\n                    values: SO,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Stochastic oscillator. This series requires the `linkedTo` option to be\n         * set and should be loaded after the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/stochastic\n         *         Stochastic oscillator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/stochastic\n         * @optionparent plotOptions.stochastic\n         */\n        StochasticIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index, period\n             */\n            params: {\n                // Index and period are unchangeable, do not inherit (#15362)\n                index: void 0,\n                period: void 0,\n                /**\n                 * Periods for Stochastic oscillator: [%K, %D].\n                 *\n                 * @type    {Array<number,number>}\n                 * @default [14, 3]\n                 */\n                periods: [14, 3]\n            },\n            marker: {\n                enabled: false\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>%K: {point.y}<br/>%D: {point.smoothed}<br/>'\n            },\n            /**\n             * Smoothed line options.\n             */\n            smoothedLine: {\n                /**\n                 * Styles for a smoothed line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line. If not set, it's inherited from\n                     * [plotOptions.stochastic.color\n                     * ](#plotOptions.stochastic.color).\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(StochasticIndicator.prototype, {\n            areaLinesNames: [],\n            nameComponents: ['periods'],\n            nameBase: 'Stochastic',\n            pointArrayMap: ['y', 'smoothed'],\n            parallelArrays: ['x', 'y', 'smoothed'],\n            pointValKey: 'y',\n            linesApiNames: ['smoothedLine']\n        });\n        MultipleLinesComposition.compose(StochasticIndicator);\n        SeriesRegistry.registerSeriesType('stochastic', StochasticIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Stochastic indicator. If the [type](#series.stochastic.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.stochastic\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/stochastic\n         * @apioption series.stochastic\n         */\n        ''; // To include the above in the js output\n\n        return StochasticIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/SlowStochastic/SlowStochasticIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator, stochastic: StochasticIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Slow Stochastic series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.slowstochastic\n         *\n         * @augments Highcharts.Series\n         */\n        class SlowStochasticIndicator extends StochasticIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const periods = params.periods, fastValues = super.getValues.call(this, series, params), slowValues = {\n                    values: [],\n                    xData: [],\n                    yData: []\n                };\n                if (!fastValues) {\n                    return;\n                }\n                slowValues.xData = fastValues.xData.slice(periods[1] - 1);\n                const fastYData = fastValues.yData.slice(periods[1] - 1);\n                // Get SMA(%D)\n                const smoothedValues = SMAIndicator.prototype.getValues.call(this, {\n                    xData: slowValues.xData,\n                    yData: fastYData\n                }, {\n                    index: 1,\n                    period: periods[2]\n                });\n                if (!smoothedValues) {\n                    return;\n                }\n                // Format data\n                for (let i = 0, xDataLen = slowValues.xData.length; i < xDataLen; i++) {\n                    slowValues.yData[i] = [\n                        fastYData[i][1],\n                        smoothedValues.yData[i - periods[2] + 1] || null\n                    ];\n                    slowValues.values[i] = [\n                        slowValues.xData[i],\n                        fastYData[i][1],\n                        smoothedValues.yData[i - periods[2] + 1] || null\n                    ];\n                }\n                return slowValues;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Slow Stochastic oscillator. This series requires the `linkedTo` option\n         * to be set and should be loaded after `stock/indicators/indicators.js`\n         * and `stock/indicators/stochastic.js` files.\n         *\n         * @sample stock/indicators/slow-stochastic\n         *         Slow Stochastic oscillator\n         *\n         * @extends      plotOptions.stochastic\n         * @since        8.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/stochastic\n         * @requires     stock/indicators/slow-stochastic\n         * @optionparent plotOptions.slowstochastic\n         */\n        SlowStochasticIndicator.defaultOptions = merge(StochasticIndicator.defaultOptions, {\n            params: {\n                /**\n                 * Periods for Slow Stochastic oscillator: [%K, %D, SMA(%D)].\n                 *\n                 * @type    {Array<number,number,number>}\n                 * @default [14, 3, 3]\n                 */\n                periods: [14, 3, 3]\n            }\n        });\n        extend(SlowStochasticIndicator.prototype, {\n            nameBase: 'Slow Stochastic'\n        });\n        SeriesRegistry.registerSeriesType('slowstochastic', SlowStochasticIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Slow Stochastic indicator. If the [type](#series.slowstochastic.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.slowstochastic\n         * @since     8.0.0\n         * @product   highstock\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/stochastic\n         * @requires  stock/indicators/slow-stochastic\n         * @apioption series.slowstochastic\n         */\n        ''; // To include the above in the js output\n\n        return SlowStochasticIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Supertrend/SupertrendIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { atr: ATRIndicator, sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { addEvent, correctFloat, isArray, extend, merge, objectEach } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         * @private\n         */\n        function createPointObj(mainSeries, index, close) {\n            return {\n                index: index,\n                close: mainSeries.yData[index][close],\n                x: mainSeries.xData[index]\n            };\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Supertrend series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.supertrend\n         *\n         * @augments Highcharts.Series\n         */\n        class SupertrendIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init() {\n                const indicator = this;\n                super.init.apply(indicator, arguments);\n                // Only after series are linked add some additional logic/properties.\n                const unbinder = addEvent(this.chart.constructor, 'afterLinkSeries', () => {\n                    // Protection for a case where the indicator is being updated,\n                    // for a brief moment the indicator is deleted.\n                    if (indicator.options) {\n                        const options = indicator.options, parentOptions = indicator.linkedParent.options;\n                        // Indicator cropThreshold has to be equal linked series one\n                        // reduced by period due to points comparison in drawGraph\n                        // (#9787)\n                        options.cropThreshold = (parentOptions.cropThreshold -\n                            (options.params.period - 1));\n                    }\n                    unbinder();\n                }, {\n                    order: 1\n                });\n            }\n            drawGraph() {\n                const indicator = this, indicOptions = indicator.options, \n                // Series that indicator is linked to\n                mainSeries = indicator.linkedParent, mainLinePoints = (mainSeries ? mainSeries.points : []), indicPoints = indicator.points, indicPath = indicator.graph, \n                // Points offset between lines\n                tempOffset = mainLinePoints.length - indicPoints.length, offset = tempOffset > 0 ? tempOffset : 0, \n                // @todo: fix when ichi-moku indicator is merged to master.\n                gappedExtend = {\n                    options: {\n                        gapSize: indicOptions.gapSize\n                    }\n                }, \n                // Sorted supertrend points array\n                groupedPoints = {\n                    top: [], // Rising trend line points\n                    bottom: [], // Falling trend line points\n                    intersect: [] // Change trend line points\n                }, \n                // Options for trend lines\n                supertrendLineOptions = {\n                    top: {\n                        styles: {\n                            lineWidth: indicOptions.lineWidth,\n                            lineColor: (indicOptions.fallingTrendColor ||\n                                indicOptions.color),\n                            dashStyle: indicOptions.dashStyle\n                        }\n                    },\n                    bottom: {\n                        styles: {\n                            lineWidth: indicOptions.lineWidth,\n                            lineColor: (indicOptions.risingTrendColor ||\n                                indicOptions.color),\n                            dashStyle: indicOptions.dashStyle\n                        }\n                    },\n                    intersect: indicOptions.changeTrendLine\n                }, close = 3;\n                let // Supertrend line point\n                point, \n                // Supertrend line next point (has smaller x pos than point)\n                nextPoint, \n                // Main series points\n                mainPoint, nextMainPoint, \n                // Used when supertrend and main points are shifted\n                // relative to each other\n                prevMainPoint, prevPrevMainPoint, \n                // Used when particular point color is set\n                pointColor, \n                // Temporary points that fill groupedPoints array\n                newPoint, newNextPoint, indicPointsLen = indicPoints.length;\n                // Loop which sort supertrend points\n                while (indicPointsLen--) {\n                    point = indicPoints[indicPointsLen];\n                    nextPoint = indicPoints[indicPointsLen - 1];\n                    mainPoint = mainLinePoints[indicPointsLen - 1 + offset];\n                    nextMainPoint = mainLinePoints[indicPointsLen - 2 + offset];\n                    prevMainPoint = mainLinePoints[indicPointsLen + offset];\n                    prevPrevMainPoint = mainLinePoints[indicPointsLen + offset + 1];\n                    pointColor = point.options.color;\n                    newPoint = {\n                        x: point.x,\n                        plotX: point.plotX,\n                        plotY: point.plotY,\n                        isNull: false\n                    };\n                    // When mainPoint is the last one (left plot area edge)\n                    // but supertrend has additional one\n                    if (!nextMainPoint &&\n                        mainPoint && mainSeries.yData[mainPoint.index - 1]) {\n                        nextMainPoint = createPointObj(mainSeries, mainPoint.index - 1, close);\n                    }\n                    // When prevMainPoint is the last one (right plot area edge)\n                    // but supertrend has additional one (and points are shifted)\n                    if (!prevPrevMainPoint &&\n                        prevMainPoint && mainSeries.yData[prevMainPoint.index + 1]) {\n                        prevPrevMainPoint = createPointObj(mainSeries, prevMainPoint.index + 1, close);\n                    }\n                    // When points are shifted (right or left plot area edge)\n                    if (!mainPoint &&\n                        nextMainPoint && mainSeries.yData[nextMainPoint.index + 1]) {\n                        mainPoint = createPointObj(mainSeries, nextMainPoint.index + 1, close);\n                    }\n                    else if (!mainPoint &&\n                        prevMainPoint && mainSeries.yData[prevMainPoint.index - 1]) {\n                        mainPoint = createPointObj(mainSeries, prevMainPoint.index - 1, close);\n                    }\n                    // Check if points are shifted relative to each other\n                    if (point &&\n                        mainPoint &&\n                        prevMainPoint &&\n                        nextMainPoint &&\n                        point.x !== mainPoint.x) {\n                        if (point.x === prevMainPoint.x) {\n                            nextMainPoint = mainPoint;\n                            mainPoint = prevMainPoint;\n                        }\n                        else if (point.x === nextMainPoint.x) {\n                            mainPoint = nextMainPoint;\n                            nextMainPoint = {\n                                close: mainSeries.yData[mainPoint.index - 1][close],\n                                x: mainSeries.xData[mainPoint.index - 1]\n                            };\n                        }\n                        else if (prevPrevMainPoint && point.x === prevPrevMainPoint.x) {\n                            mainPoint = prevPrevMainPoint;\n                            nextMainPoint = prevMainPoint;\n                        }\n                    }\n                    if (nextPoint && nextMainPoint && mainPoint) {\n                        newNextPoint = {\n                            x: nextPoint.x,\n                            plotX: nextPoint.plotX,\n                            plotY: nextPoint.plotY,\n                            isNull: false\n                        };\n                        if (point.y >= mainPoint.close &&\n                            nextPoint.y >= nextMainPoint.close) {\n                            point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                indicOptions.color);\n                            groupedPoints.top.push(newPoint);\n                        }\n                        else if (point.y < mainPoint.close &&\n                            nextPoint.y < nextMainPoint.close) {\n                            point.color = (pointColor || indicOptions.risingTrendColor ||\n                                indicOptions.color);\n                            groupedPoints.bottom.push(newPoint);\n                        }\n                        else {\n                            groupedPoints.intersect.push(newPoint);\n                            groupedPoints.intersect.push(newNextPoint);\n                            // Additional null point to make a gap in line\n                            groupedPoints.intersect.push(merge(newNextPoint, {\n                                isNull: true\n                            }));\n                            if (point.y >= mainPoint.close &&\n                                nextPoint.y < nextMainPoint.close) {\n                                point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                    indicOptions.color);\n                                nextPoint.color = (pointColor || indicOptions.risingTrendColor ||\n                                    indicOptions.color);\n                                groupedPoints.top.push(newPoint);\n                                groupedPoints.top.push(merge(newNextPoint, {\n                                    isNull: true\n                                }));\n                            }\n                            else if (point.y < mainPoint.close &&\n                                nextPoint.y >= nextMainPoint.close) {\n                                point.color = (pointColor || indicOptions.risingTrendColor ||\n                                    indicOptions.color);\n                                nextPoint.color = (pointColor || indicOptions.fallingTrendColor ||\n                                    indicOptions.color);\n                                groupedPoints.bottom.push(newPoint);\n                                groupedPoints.bottom.push(merge(newNextPoint, {\n                                    isNull: true\n                                }));\n                            }\n                        }\n                    }\n                    else if (mainPoint) {\n                        if (point.y >= mainPoint.close) {\n                            point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                indicOptions.color);\n                            groupedPoints.top.push(newPoint);\n                        }\n                        else {\n                            point.color = (pointColor || indicOptions.risingTrendColor ||\n                                indicOptions.color);\n                            groupedPoints.bottom.push(newPoint);\n                        }\n                    }\n                }\n                // Generate lines:\n                objectEach(groupedPoints, function (values, lineName) {\n                    indicator.points = values;\n                    indicator.options = merge(supertrendLineOptions[lineName].styles, gappedExtend);\n                    indicator.graph = indicator['graph' + lineName + 'Line'];\n                    SMAIndicator.prototype.drawGraph.call(indicator);\n                    // Now save line\n                    indicator['graph' + lineName + 'Line'] = indicator.graph;\n                });\n                // Restore options:\n                indicator.points = indicPoints;\n                indicator.options = indicOptions;\n                indicator.graph = indicPath;\n            }\n            // Supertrend (Multiplier, Period) Formula:\n            // BASIC UPPERBAND = (HIGH + LOW) / 2 + Multiplier * ATR(Period)\n            // BASIC LOWERBAND = (HIGH + LOW) / 2 - Multiplier * ATR(Period)\n            // FINAL UPPERBAND =\n            //     IF(\n            //      Current BASICUPPERBAND  < Previous FINAL UPPERBAND AND\n            //      Previous Close > Previous FINAL UPPERBAND\n            //     ) THEN (Current BASIC UPPERBAND)\n            //     ELSE (Previous FINALUPPERBAND)\n            // FINAL LOWERBAND =\n            //     IF(\n            //      Current BASIC LOWERBAND  > Previous FINAL LOWERBAND AND\n            //      Previous Close < Previous FINAL LOWERBAND\n            //     ) THEN (Current BASIC LOWERBAND)\n            //     ELSE (Previous FINAL LOWERBAND)\n            // SUPERTREND =\n            //     IF(\n            //      Previous Supertrend == Previous FINAL UPPERBAND AND\n            //      Current Close < Current FINAL UPPERBAND\n            //     ) THAN Current FINAL UPPERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL LOWERBAND AND\n            //      Current Close < Current FINAL LOWERBAND\n            //     ) THAN Current FINAL UPPERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL UPPERBAND AND\n            //      Current Close > Current FINAL UPPERBAND\n            //     ) THAN Current FINAL LOWERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL LOWERBAND AND\n            //      Current Close > Current FINAL LOWERBAND\n            //     ) THAN Current FINAL LOWERBAND\n            getValues(series, params) {\n                const period = params.period, multiplier = params.multiplier, xVal = series.xData, yVal = series.yData, \n                // 0- date, 1- Supertrend indicator\n                st = [], xData = [], yData = [], close = 3, low = 2, high = 1, periodsOffset = (period === 0) ? 0 : period - 1, finalUp = [], finalDown = [];\n                let atrData = [], basicUp, basicDown, supertrend, prevFinalUp, prevFinalDown, prevST, // Previous Supertrend\n                prevY, y, i;\n                if ((xVal.length <= period) || !isArray(yVal[0]) ||\n                    yVal[0].length !== 4 || period < 0) {\n                    return;\n                }\n                atrData = ATRIndicator.prototype.getValues.call(this, series, {\n                    period: period\n                }).yData;\n                for (i = 0; i < atrData.length; i++) {\n                    y = yVal[periodsOffset + i];\n                    prevY = yVal[periodsOffset + i - 1] || [];\n                    prevFinalUp = finalUp[i - 1];\n                    prevFinalDown = finalDown[i - 1];\n                    prevST = yData[i - 1];\n                    if (i === 0) {\n                        prevFinalUp = prevFinalDown = prevST = 0;\n                    }\n                    basicUp = correctFloat((y[high] + y[low]) / 2 + multiplier * atrData[i]);\n                    basicDown = correctFloat((y[high] + y[low]) / 2 - multiplier * atrData[i]);\n                    if ((basicUp < prevFinalUp) ||\n                        (prevY[close] > prevFinalUp)) {\n                        finalUp[i] = basicUp;\n                    }\n                    else {\n                        finalUp[i] = prevFinalUp;\n                    }\n                    if ((basicDown > prevFinalDown) ||\n                        (prevY[close] < prevFinalDown)) {\n                        finalDown[i] = basicDown;\n                    }\n                    else {\n                        finalDown[i] = prevFinalDown;\n                    }\n                    if (prevST === prevFinalUp && y[close] < finalUp[i] ||\n                        prevST === prevFinalDown && y[close] < finalDown[i]) {\n                        supertrend = finalUp[i];\n                    }\n                    else if (prevST === prevFinalUp && y[close] > finalUp[i] ||\n                        prevST === prevFinalDown && y[close] > finalDown[i]) {\n                        supertrend = finalDown[i];\n                    }\n                    st.push([xVal[periodsOffset + i], supertrend]);\n                    xData.push(xVal[periodsOffset + i]);\n                    yData.push(supertrend);\n                }\n                return {\n                    values: st,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Supertrend indicator. This series requires the `linkedTo` option to be\n         * set and should be loaded after the `stock/indicators/indicators.js` and\n         * `stock/indicators/sma.js`.\n         *\n         * @sample {highstock} stock/indicators/supertrend\n         *         Supertrend indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, cropThreshold, negativeColor, colorAxis, joinBy,\n         *               keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking, threshold\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/supertrend\n         * @optionparent plotOptions.supertrend\n         */\n        SupertrendIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Parameters used in calculation of Supertrend indicator series points.\n             *\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unchangeable index, do not inherit (#15362)\n                /**\n                 * Multiplier for Supertrend Indicator.\n                 */\n                multiplier: 3,\n                /**\n                 * The base period for indicator Supertrend Indicator calculations.\n                 * This is the number of data points which are taken into account\n                 * for the indicator calculations.\n                 */\n                period: 10\n            },\n            /**\n             * Color of the Supertrend series line that is beneath the main series.\n             *\n             * @sample {highstock} stock/indicators/supertrend/\n             *         Example with risingTrendColor\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            risingTrendColor: \"#06b535\" /* Palette.positiveColor */,\n            /**\n             * Color of the Supertrend series line that is above the main series.\n             *\n             * @sample {highstock} stock/indicators/supertrend/\n             *         Example with fallingTrendColor\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            fallingTrendColor: \"#f21313\" /* Palette.negativeColor */,\n            /**\n             * The styles for the Supertrend line that intersect main series.\n             *\n             * @sample {highstock} stock/indicators/supertrend/\n             *         Example with changeTrendLine\n             */\n            changeTrendLine: {\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: \"#333333\" /* Palette.neutralColor80 */,\n                    /**\n                     * The dash or dot style of the grid lines. For possible\n                     * values, see\n                     * [this demonstration](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/).\n                     *\n                     * @sample {highcharts} highcharts/yaxis/gridlinedashstyle/\n                     *         Long dashes\n                     * @sample {highstock} stock/xaxis/gridlinedashstyle/\n                     *         Long dashes\n                     *\n                     * @type  {Highcharts.DashStyleValue}\n                     * @since 7.0.0\n                     */\n                    dashStyle: 'LongDash'\n                }\n            }\n        });\n        extend(SupertrendIndicator.prototype, {\n            nameBase: 'Supertrend',\n            nameComponents: ['multiplier', 'period']\n        });\n        SeriesRegistry.registerSeriesType('supertrend', SupertrendIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Supertrend indicator` series. If the [type](#series.supertrend.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.supertrend\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, cropThreshold, data, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, negativeColor, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            showInNavigator, stacking, threshold\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/supertrend\n         * @apioption series.supertrend\n         */\n        ''; // To include the above in the js output\n\n        return SupertrendIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/VBP/VBPPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { sma: { prototype: { pointClass: SMAPoint } } } = SeriesRegistry.seriesTypes;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class VBPPoint extends SMAPoint {\n            // Required for destroying negative part of volume\n            destroy() {\n                // @todo: this.negativeGraphic doesn't seem to be used anywhere\n                if (this.negativeGraphic) {\n                    this.negativeGraphic = this.negativeGraphic.destroy();\n                }\n                super.destroy.apply(this, arguments);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VBPPoint;\n    });\n    _registerModule(_modules, 'Stock/Indicators/VBP/VBPIndicator.js', [_modules['Stock/Indicators/VBP/VBPPoint.js'], _modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (VBPPoint, A, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Paweł Dalek\n         *\n         *  Volume By Price (VBP) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { animObject } = A;\n        const { noop } = H;\n        const { column: { prototype: columnProto }, sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { addEvent, arrayMax, arrayMin, correctFloat, defined, error, extend, isArray, merge } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const abs = Math.abs;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils\n        /**\n         * @private\n         */\n        function arrayExtremesOHLC(data) {\n            const dataLength = data.length;\n            let min = data[0][3], max = min, i = 1, currentPoint;\n            for (; i < dataLength; i++) {\n                currentPoint = data[i][3];\n                if (currentPoint < min) {\n                    min = currentPoint;\n                }\n                if (currentPoint > max) {\n                    max = currentPoint;\n                }\n            }\n            return {\n                min: min,\n                max: max\n            };\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Volume By Price (VBP) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.vbp\n         *\n         * @augments Highcharts.Series\n         */\n        class VBPIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init(chart, options) {\n                const indicator = this;\n                // Series.update() sends data that is not necessary as everything is\n                // calculated in getValues(), #17007\n                delete options.data;\n                super.init.apply(indicator, arguments);\n                // Only after series are linked add some additional logic/properties.\n                const unbinder = addEvent(this.chart.constructor, 'afterLinkSeries', function () {\n                    // Protection for a case where the indicator is being updated,\n                    // for a brief moment the indicator is deleted.\n                    if (indicator.options) {\n                        const params = indicator.options.params, baseSeries = indicator.linkedParent, volumeSeries = chart.get(params.volumeSeriesID);\n                        indicator.addCustomEvents(baseSeries, volumeSeries);\n                    }\n                    unbinder();\n                }, {\n                    order: 1\n                });\n                return indicator;\n            }\n            // Adds events related with removing series\n            addCustomEvents(baseSeries, volumeSeries) {\n                const indicator = this, toEmptyIndicator = () => {\n                    indicator.chart.redraw();\n                    indicator.setData([]);\n                    indicator.zoneStarts = [];\n                    if (indicator.zoneLinesSVG) {\n                        indicator.zoneLinesSVG = indicator.zoneLinesSVG.destroy();\n                    }\n                };\n                // If base series is deleted, indicator series data is filled with\n                // an empty array\n                indicator.dataEventsToUnbind.push(addEvent(baseSeries, 'remove', function () {\n                    toEmptyIndicator();\n                }));\n                // If volume series is deleted, indicator series data is filled with\n                // an empty array\n                if (volumeSeries) {\n                    indicator.dataEventsToUnbind.push(addEvent(volumeSeries, 'remove', function () {\n                        toEmptyIndicator();\n                    }));\n                }\n                return indicator;\n            }\n            // Initial animation\n            animate(init) {\n                const series = this, inverted = series.chart.inverted, group = series.group, attr = {};\n                if (!init && group) {\n                    const position = inverted ? series.yAxis.top : series.xAxis.left;\n                    if (inverted) {\n                        group['forceAnimate:translateY'] = true;\n                        attr.translateY = position;\n                    }\n                    else {\n                        group['forceAnimate:translateX'] = true;\n                        attr.translateX = position;\n                    }\n                    group.animate(attr, extend(animObject(series.options.animation), {\n                        step: function (val, fx) {\n                            series.group.attr({\n                                scaleX: Math.max(0.001, fx.pos)\n                            });\n                        }\n                    }));\n                }\n            }\n            drawPoints() {\n                const indicator = this;\n                if (indicator.options.volumeDivision.enabled) {\n                    indicator.posNegVolume(true, true);\n                    columnProto.drawPoints.apply(indicator, arguments);\n                    indicator.posNegVolume(false, false);\n                }\n                columnProto.drawPoints.apply(indicator, arguments);\n            }\n            // Function responsible for dividing volume into positive and negative\n            posNegVolume(initVol, pos) {\n                const indicator = this, signOrder = pos ?\n                    ['positive', 'negative'] :\n                    ['negative', 'positive'], volumeDivision = indicator.options.volumeDivision, pointLength = indicator.points.length;\n                let posWidths = [], negWidths = [], i = 0, pointWidth, priceZone, wholeVol, point;\n                if (initVol) {\n                    indicator.posWidths = posWidths;\n                    indicator.negWidths = negWidths;\n                }\n                else {\n                    posWidths = indicator.posWidths;\n                    negWidths = indicator.negWidths;\n                }\n                for (; i < pointLength; i++) {\n                    point = indicator.points[i];\n                    point[signOrder[0] + 'Graphic'] = point.graphic;\n                    point.graphic = point[signOrder[1] + 'Graphic'];\n                    if (initVol) {\n                        pointWidth = point.shapeArgs.width;\n                        priceZone = indicator.priceZones[i];\n                        wholeVol = priceZone.wholeVolumeData;\n                        if (wholeVol) {\n                            posWidths.push(pointWidth / wholeVol * priceZone.positiveVolumeData);\n                            negWidths.push(pointWidth / wholeVol * priceZone.negativeVolumeData);\n                        }\n                        else {\n                            posWidths.push(0);\n                            negWidths.push(0);\n                        }\n                    }\n                    point.color = pos ?\n                        volumeDivision.styles.positiveColor :\n                        volumeDivision.styles.negativeColor;\n                    point.shapeArgs.width = pos ?\n                        indicator.posWidths[i] :\n                        indicator.negWidths[i];\n                    point.shapeArgs.x = pos ?\n                        point.shapeArgs.x :\n                        indicator.posWidths[i];\n                }\n            }\n            translate() {\n                const indicator = this, options = indicator.options, chart = indicator.chart, yAxis = indicator.yAxis, yAxisMin = yAxis.min, zoneLinesOptions = indicator.options.zoneLines, priceZones = (indicator.priceZones);\n                let yBarOffset = 0, volumeDataArray, maxVolume, primalBarWidth, barHeight, barHeightP, oldBarHeight, barWidth, pointPadding, chartPlotTop, barX, barY;\n                columnProto.translate.apply(indicator);\n                const indicatorPoints = indicator.points;\n                // Do translate operation when points exist\n                if (indicatorPoints.length) {\n                    pointPadding = options.pointPadding < 0.5 ?\n                        options.pointPadding :\n                        0.1;\n                    volumeDataArray = indicator.volumeDataArray;\n                    maxVolume = arrayMax(volumeDataArray);\n                    primalBarWidth = chart.plotWidth / 2;\n                    chartPlotTop = chart.plotTop;\n                    barHeight = abs(yAxis.toPixels(yAxisMin) -\n                        yAxis.toPixels(yAxisMin + indicator.rangeStep));\n                    oldBarHeight = abs(yAxis.toPixels(yAxisMin) -\n                        yAxis.toPixels(yAxisMin + indicator.rangeStep));\n                    if (pointPadding) {\n                        barHeightP = abs(barHeight * (1 - 2 * pointPadding));\n                        yBarOffset = abs((barHeight - barHeightP) / 2);\n                        barHeight = abs(barHeightP);\n                    }\n                    indicatorPoints.forEach(function (point, index) {\n                        barX = point.barX = point.plotX = 0;\n                        barY = point.plotY = (yAxis.toPixels(priceZones[index].start) -\n                            chartPlotTop -\n                            (yAxis.reversed ?\n                                (barHeight - oldBarHeight) :\n                                barHeight) -\n                            yBarOffset);\n                        barWidth = correctFloat(primalBarWidth *\n                            priceZones[index].wholeVolumeData / maxVolume);\n                        point.pointWidth = barWidth;\n                        point.shapeArgs = indicator.crispCol.apply(// eslint-disable-line no-useless-call\n                        indicator, [barX, barY, barWidth, barHeight]);\n                        point.volumeNeg = priceZones[index].negativeVolumeData;\n                        point.volumePos = priceZones[index].positiveVolumeData;\n                        point.volumeAll = priceZones[index].wholeVolumeData;\n                    });\n                    if (zoneLinesOptions.enabled) {\n                        indicator.drawZones(chart, yAxis, indicator.zoneStarts, zoneLinesOptions.styles);\n                    }\n                }\n            }\n            getExtremes() {\n                const prevCompare = this.options.compare, prevCumulative = this.options.cumulative;\n                let ret;\n                // Temporarily disable cumulative and compare while getting the extremes\n                if (this.options.compare) {\n                    this.options.compare = void 0;\n                    ret = super.getExtremes();\n                    this.options.compare = prevCompare;\n                }\n                else if (this.options.cumulative) {\n                    this.options.cumulative = false;\n                    ret = super.getExtremes();\n                    this.options.cumulative = prevCumulative;\n                }\n                else {\n                    ret = super.getExtremes();\n                }\n                return ret;\n            }\n            getValues(series, params) {\n                const indicator = this, xValues = series.processedXData, yValues = series.processedYData, chart = indicator.chart, ranges = params.ranges, VBP = [], xData = [], yData = [], volumeSeries = chart.get(params.volumeSeriesID);\n                // Checks if base series exists\n                if (!series.chart) {\n                    error('Base series not found! In case it has been removed, add ' +\n                        'a new one.', true, chart);\n                    return;\n                }\n                // Checks if volume series exists and if it has data\n                if (!volumeSeries ||\n                    !volumeSeries.processedXData.length) {\n                    const errorMessage = volumeSeries && !volumeSeries.processedXData.length ?\n                        ' does not contain any data.' :\n                        ' not found! Check `volumeSeriesID`.';\n                    error('Series ' +\n                        params.volumeSeriesID + errorMessage, true, chart);\n                    return;\n                }\n                // Checks if series data fits the OHLC format\n                const isOHLC = isArray(yValues[0]);\n                if (isOHLC && yValues[0].length !== 4) {\n                    error('Type of ' +\n                        series.name +\n                        ' series is different than line, OHLC or candlestick.', true, chart);\n                    return;\n                }\n                // Price zones contains all the information about the zones (index,\n                // start, end, volumes, etc.)\n                const priceZones = indicator.priceZones = indicator.specifyZones(isOHLC, xValues, yValues, ranges, volumeSeries);\n                priceZones.forEach(function (zone, index) {\n                    VBP.push([zone.x, zone.end]);\n                    xData.push(VBP[index][0]);\n                    yData.push(VBP[index][1]);\n                });\n                return {\n                    values: VBP,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n            // Specifying where each zone should start ans end\n            specifyZones(isOHLC, xValues, yValues, ranges, volumeSeries) {\n                const indicator = this, rangeExtremes = (isOHLC ? arrayExtremesOHLC(yValues) : false), zoneStarts = indicator.zoneStarts = [], priceZones = [];\n                let lowRange = rangeExtremes ?\n                    rangeExtremes.min :\n                    arrayMin(yValues), highRange = rangeExtremes ?\n                    rangeExtremes.max :\n                    arrayMax(yValues), i = 0, j = 1;\n                // If the compare mode is set on the main series, change the VBP\n                // zones to fit new extremes, #16277.\n                const mainSeries = indicator.linkedParent;\n                if (!indicator.options.compareToMain &&\n                    mainSeries.dataModify) {\n                    lowRange = mainSeries.dataModify.modifyValue(lowRange);\n                    highRange = mainSeries.dataModify.modifyValue(highRange);\n                }\n                if (!defined(lowRange) || !defined(highRange)) {\n                    if (this.points.length) {\n                        this.setData([]);\n                        this.zoneStarts = [];\n                        if (this.zoneLinesSVG) {\n                            this.zoneLinesSVG = this.zoneLinesSVG.destroy();\n                        }\n                    }\n                    return [];\n                }\n                const rangeStep = indicator.rangeStep =\n                    correctFloat(highRange - lowRange) / ranges;\n                zoneStarts.push(lowRange);\n                for (; i < ranges - 1; i++) {\n                    zoneStarts.push(correctFloat(zoneStarts[i] + rangeStep));\n                }\n                zoneStarts.push(highRange);\n                const zoneStartsLength = zoneStarts.length;\n                //    Creating zones\n                for (; j < zoneStartsLength; j++) {\n                    priceZones.push({\n                        index: j - 1,\n                        x: xValues[0],\n                        start: zoneStarts[j - 1],\n                        end: zoneStarts[j]\n                    });\n                }\n                return indicator.volumePerZone(isOHLC, priceZones, volumeSeries, xValues, yValues);\n            }\n            // Calculating sum of volume values for a specific zone\n            volumePerZone(isOHLC, priceZones, volumeSeries, xValues, yValues) {\n                const indicator = this, volumeXData = volumeSeries.processedXData, volumeYData = volumeSeries.processedYData, lastZoneIndex = priceZones.length - 1, baseSeriesLength = yValues.length, volumeSeriesLength = volumeYData.length;\n                let previousValue, startFlag, endFlag, value, i;\n                // Checks if each point has a corresponding volume value\n                if (abs(baseSeriesLength - volumeSeriesLength)) {\n                    // If the first point don't have volume, add 0 value at the\n                    // beginning of the volume array\n                    if (xValues[0] !== volumeXData[0]) {\n                        volumeYData.unshift(0);\n                    }\n                    // If the last point don't have volume, add 0 value at the end\n                    // of the volume array\n                    if (xValues[baseSeriesLength - 1] !==\n                        volumeXData[volumeSeriesLength - 1]) {\n                        volumeYData.push(0);\n                    }\n                }\n                indicator.volumeDataArray = [];\n                priceZones.forEach(function (zone) {\n                    zone.wholeVolumeData = 0;\n                    zone.positiveVolumeData = 0;\n                    zone.negativeVolumeData = 0;\n                    for (i = 0; i < baseSeriesLength; i++) {\n                        startFlag = false;\n                        endFlag = false;\n                        value = isOHLC ? yValues[i][3] : yValues[i];\n                        previousValue = i ?\n                            (isOHLC ?\n                                yValues[i - 1][3] :\n                                yValues[i - 1]) :\n                            value;\n                        // If the compare mode is set on the main series,\n                        // change the VBP zones to fit new extremes, #16277.\n                        const mainSeries = indicator.linkedParent;\n                        if (!indicator.options.compareToMain &&\n                            mainSeries.dataModify) {\n                            value = mainSeries.dataModify.modifyValue(value);\n                            previousValue = mainSeries.dataModify\n                                .modifyValue(previousValue);\n                        }\n                        // Checks if this is the point with the\n                        // lowest close value and if so, adds it calculations\n                        if (value <= zone.start && zone.index === 0) {\n                            startFlag = true;\n                        }\n                        // Checks if this is the point with the highest\n                        // close value and if so, adds it calculations\n                        if (value >= zone.end && zone.index === lastZoneIndex) {\n                            endFlag = true;\n                        }\n                        if ((value > zone.start || startFlag) &&\n                            (value < zone.end || endFlag)) {\n                            zone.wholeVolumeData += volumeYData[i];\n                            if (previousValue > value) {\n                                zone.negativeVolumeData += volumeYData[i];\n                            }\n                            else {\n                                zone.positiveVolumeData += volumeYData[i];\n                            }\n                        }\n                    }\n                    indicator.volumeDataArray.push(zone.wholeVolumeData);\n                });\n                return priceZones;\n            }\n            // Function responsible for drawing additional lines indicating zones\n            drawZones(chart, yAxis, zonesValues, zonesStyles) {\n                const indicator = this, renderer = chart.renderer, leftLinePos = 0, rightLinePos = chart.plotWidth, verticalOffset = chart.plotTop;\n                let zoneLinesSVG = indicator.zoneLinesSVG, zoneLinesPath = [], verticalLinePos;\n                zonesValues.forEach(function (value) {\n                    verticalLinePos = yAxis.toPixels(value) - verticalOffset;\n                    zoneLinesPath = zoneLinesPath.concat(chart.renderer.crispLine([[\n                            'M',\n                            leftLinePos,\n                            verticalLinePos\n                        ], [\n                            'L',\n                            rightLinePos,\n                            verticalLinePos\n                        ]], zonesStyles.lineWidth));\n                });\n                // Create zone lines one path or update it while animating\n                if (zoneLinesSVG) {\n                    zoneLinesSVG.animate({\n                        d: zoneLinesPath\n                    });\n                }\n                else {\n                    zoneLinesSVG = indicator.zoneLinesSVG =\n                        renderer\n                            .path(zoneLinesPath)\n                            .attr({\n                            'stroke-width': zonesStyles.lineWidth,\n                            'stroke': zonesStyles.color,\n                            'dashstyle': zonesStyles.dashStyle,\n                            'zIndex': indicator.group.zIndex + 0.1\n                        })\n                            .add(indicator.group);\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Volume By Price indicator.\n         *\n         * This series requires `linkedTo` option to be set.\n         *\n         * @sample stock/indicators/volume-by-price\n         *         Volume By Price indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/volume-by-price\n         * @optionparent plotOptions.vbp\n         */\n        VBPIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index, period\n             */\n            params: {\n                // Index and period are unchangeable, do not inherit (#15362)\n                index: void 0,\n                period: void 0,\n                /**\n                 * The number of price zones.\n                 */\n                ranges: 12,\n                /**\n                 * The id of volume series which is mandatory. For example using\n                 * OHLC data, volumeSeriesID='volume' means the indicator will be\n                 * calculated using OHLC and volume values.\n                 */\n                volumeSeriesID: 'volume'\n            },\n            /**\n             * The styles for lines which determine price zones.\n             */\n            zoneLines: {\n                /**\n                 * Enable/disable zone lines.\n                 */\n                enabled: true,\n                /**\n                 * Specify the style of zone lines.\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#0A9AC9\", \"dashStyle\": \"LongDash\", \"lineWidth\": 1}\n                 */\n                styles: {\n                    /** @ignore-option */\n                    color: '#0A9AC9',\n                    /** @ignore-option */\n                    dashStyle: 'LongDash',\n                    /** @ignore-option */\n                    lineWidth: 1\n                }\n            },\n            /**\n             * The styles for bars when volume is divided into positive/negative.\n             */\n            volumeDivision: {\n                /**\n                 * Option to control if volume is divided.\n                 */\n                enabled: true,\n                styles: {\n                    /**\n                     * Color of positive volume bars.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    positiveColor: 'rgba(144, 237, 125, 0.8)',\n                    /**\n                     * Color of negative volume bars.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    negativeColor: 'rgba(244, 91, 91, 0.8)'\n                }\n            },\n            // To enable series animation; must be animationLimit > pointCount\n            animationLimit: 1000,\n            enableMouseTracking: false,\n            pointPadding: 0,\n            zIndex: -1,\n            crisp: true,\n            dataGrouping: {\n                enabled: false\n            },\n            dataLabels: {\n                allowOverlap: true,\n                enabled: true,\n                format: 'P: {point.volumePos:.2f} | N: {point.volumeNeg:.2f}',\n                padding: 0,\n                style: {\n                    /** @internal */\n                    fontSize: '0.5em'\n                },\n                verticalAlign: 'top'\n            }\n        });\n        extend(VBPIndicator.prototype, {\n            nameBase: 'Volume by Price',\n            nameComponents: ['ranges'],\n            calculateOn: {\n                chart: 'render',\n                xAxis: 'afterSetExtremes'\n            },\n            pointClass: VBPPoint,\n            markerAttribs: noop,\n            drawGraph: noop,\n            getColumnMetrics: columnProto.getColumnMetrics,\n            crispCol: columnProto.crispCol\n        });\n        SeriesRegistry.registerSeriesType('vbp', VBPIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Volume By Price (VBP)` series. If the [type](#series.vbp.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.vbp\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL, compare, compareBase, compareStart\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/volume-by-price\n         * @apioption series.vbp\n         */\n        ''; // To include the above in the js output\n\n        return VBPIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/VWAP/VWAPIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Paweł Dalek\n         *\n         *  Volume Weighted Average Price (VWAP) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { error, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Volume Weighted Average Price (VWAP) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.vwap\n         *\n         * @augments Highcharts.Series\n         */\n        class VWAPIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const indicator = this, chart = series.chart, xValues = series.xData, yValues = series.yData, period = params.period;\n                let isOHLC = true, volumeSeries;\n                // Checks if volume series exists\n                if (!(volumeSeries = (chart.get(params.volumeSeriesID)))) {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, chart);\n                    return;\n                }\n                // Checks if series data fits the OHLC format\n                if (!(isArray(yValues[0]))) {\n                    isOHLC = false;\n                }\n                return indicator.calculateVWAPValues(isOHLC, xValues, yValues, volumeSeries, period);\n            }\n            /**\n             * Main algorithm used to calculate Volume Weighted Average Price (VWAP)\n             * values\n             *\n             * @private\n             *\n             * @param {boolean} isOHLC\n             * Says if data has OHLC format\n             *\n             * @param {Array<number>} xValues\n             * Array of timestamps\n             *\n             * @param {Array<number|Array<number,number,number,number>>} yValues\n             * Array of yValues, can be an array of a four arrays (OHLC) or array of\n             * values (line)\n             *\n             * @param {Array<*>} volumeSeries\n             * Volume series\n             *\n             * @param {number} period\n             * Number of points to be calculated\n             *\n             * @return {Object}\n             * Object contains computed VWAP\n             **/\n            calculateVWAPValues(isOHLC, xValues, yValues, volumeSeries, period) {\n                const volumeValues = volumeSeries.yData, volumeLength = volumeSeries.xData.length, pointsLength = xValues.length, cumulativePrice = [], cumulativeVolume = [], xData = [], yData = [], VWAP = [];\n                let commonLength, typicalPrice, cPrice, cVolume, i, j;\n                if (pointsLength <= volumeLength) {\n                    commonLength = pointsLength;\n                }\n                else {\n                    commonLength = volumeLength;\n                }\n                for (i = 0, j = 0; i < commonLength; i++) {\n                    // Depending on whether series is OHLC or line type, price is\n                    // average of the high, low and close or a simple value\n                    typicalPrice = isOHLC ?\n                        ((yValues[i][1] + yValues[i][2] +\n                            yValues[i][3]) / 3) :\n                        yValues[i];\n                    typicalPrice *= volumeValues[i];\n                    cPrice = j ?\n                        (cumulativePrice[i - 1] + typicalPrice) :\n                        typicalPrice;\n                    cVolume = j ?\n                        (cumulativeVolume[i - 1] + volumeValues[i]) :\n                        volumeValues[i];\n                    cumulativePrice.push(cPrice);\n                    cumulativeVolume.push(cVolume);\n                    VWAP.push([xValues[i], (cPrice / cVolume)]);\n                    xData.push(VWAP[i][0]);\n                    yData.push(VWAP[i][1]);\n                    j++;\n                    if (j === period) {\n                        j = 0;\n                    }\n                }\n                return {\n                    values: VWAP,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Volume Weighted Average Price indicator.\n         *\n         * This series requires `linkedTo` option to be set.\n         *\n         * @sample stock/indicators/vwap\n         *         Volume Weighted Average Price indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/vwap\n         * @optionparent plotOptions.vwap\n         */\n        VWAPIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unchangeable index, do not inherit (#15362)\n                period: 30,\n                /**\n                 * The id of volume series which is mandatory. For example using\n                 * OHLC data, volumeSeriesID='volume' means the indicator will be\n                 * calculated using OHLC and volume values.\n                 */\n                volumeSeriesID: 'volume'\n            }\n        });\n        SeriesRegistry.registerSeriesType('vwap', VWAPIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Volume Weighted Average Price (VWAP)` series. If the\n         * [type](#series.vwap.type) option is not specified, it is inherited from\n         * [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.vwap\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/vwap\n         * @apioption series.vwap\n         */\n        ''; // To include the above in the js output\n\n        return VWAPIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/WilliamsR/WilliamsRIndicator.js', [_modules['Stock/Indicators/ArrayUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AU, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Williams %R series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.williamsr\n         *\n         * @augments Highcharts.Series\n         */\n        class WilliamsRIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, WR = [], // 0- date, 1- Williams %R\n                xData = [], yData = [], close = 3, low = 2, high = 1;\n                let slicedY, extremes, R, HH, // Highest high value in period\n                LL, // Lowest low value in period\n                CC, // Current close value\n                i;\n                // Williams %R requires close value\n                if (xVal.length < period ||\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = period - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - period + 1, i + 1);\n                    extremes = AU.getArrayExtremes(slicedY, low, high);\n                    LL = extremes[0];\n                    HH = extremes[1];\n                    CC = yVal[i][close];\n                    R = ((HH - CC) / (HH - LL)) * -100;\n                    if (xVal[i]) {\n                        WR.push([xVal[i], R]);\n                        xData.push(xVal[i]);\n                        yData.push(R);\n                    }\n                }\n                return {\n                    values: WR,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Williams %R. This series requires the `linkedTo` option to be\n         * set and should be loaded after the `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/williams-r\n         *         Williams %R\n         *\n         * @extends      plotOptions.sma\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/williams-r\n         * @optionparent plotOptions.williamsr\n         */\n        WilliamsRIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Parameters used in calculation of Williams %R series points.\n             * @excluding index\n             */\n            params: {\n                index: void 0, // Unchangeable index, do not inherit (#15362)\n                /**\n                 * Period for Williams %R oscillator\n                 */\n                period: 14\n            }\n        });\n        extend(WilliamsRIndicator.prototype, {\n            nameBase: 'Williams %R'\n        });\n        SeriesRegistry.registerSeriesType('williamsr', WilliamsRIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Williams %R Oscillator` series. If the [type](#series.williamsr.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.williamsr\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/williams-r\n         * @apioption series.williamsr\n         */\n        ''; // Adds doclets above to the transpiled file\n\n        return WilliamsRIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/WMA/WMAIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { isArray, merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         * @private\n         */\n        function accumulateAverage(points, xVal, yVal, i, index) {\n            const xValue = xVal[i], yValue = index < 0 ? yVal[i] : yVal[i][index];\n            points.push([xValue, yValue]);\n        }\n        /**\n         * @private\n         */\n        function weightedSumArray(array, pLen) {\n            // The denominator is the sum of the number of days as a triangular number.\n            // If there are 5 days, the triangular numbers are 5, 4, 3, 2, and 1.\n            // The sum is 5 + 4 + 3 + 2 + 1 = 15.\n            const denominator = (pLen + 1) / 2 * pLen;\n            // Reduce VS loop => reduce\n            return array.reduce(function (prev, cur, i) {\n                return [null, prev[1] + cur[1] * (i + 1)];\n            })[1] / denominator;\n        }\n        /**\n         * @private\n         */\n        function populateAverage(points, xVal, yVal, i) {\n            const pLen = points.length, wmaY = weightedSumArray(points, pLen), wmaX = xVal[i - 1];\n            points.shift(); // Remove point until range < period\n            return [wmaX, wmaY];\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The SMA series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.wma\n         *\n         * @augments Highcharts.Series\n         */\n        class WMAIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, xValue = xVal[0], wma = [], xData = [], yData = [];\n                let range = 1, index = -1, i, wmaPoint, yValue = yVal[0];\n                if (xVal.length < period) {\n                    return;\n                }\n                // Switch index for OHLC / Candlestick\n                if (isArray(yVal[0])) {\n                    index = params.index;\n                    yValue = yVal[0][index];\n                }\n                // Starting point\n                const points = [[xValue, yValue]];\n                // Accumulate first N-points\n                while (range !== period) {\n                    accumulateAverage(points, xVal, yVal, range, index);\n                    range++;\n                }\n                // Calculate value one-by-one for each period in visible data\n                for (i = range; i < yValLen; i++) {\n                    wmaPoint = populateAverage(points, xVal, yVal, i);\n                    wma.push(wmaPoint);\n                    xData.push(wmaPoint[0]);\n                    yData.push(wmaPoint[1]);\n                    accumulateAverage(points, xVal, yVal, i, index);\n                }\n                wmaPoint = populateAverage(points, xVal, yVal, i);\n                wma.push(wmaPoint);\n                xData.push(wmaPoint[0]);\n                yData.push(wmaPoint[1]);\n                return {\n                    values: wma,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Weighted moving average indicator (WMA). This series requires `linkedTo`\n         * option to be set.\n         *\n         * @sample stock/indicators/wma\n         *         Weighted moving average indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/wma\n         * @optionparent plotOptions.wma\n         */\n        WMAIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                index: 3,\n                period: 9\n            }\n        });\n        SeriesRegistry.registerSeriesType('wma', WMAIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `WMA` series. If the [type](#series.wma.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.wma\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/wma\n         * @apioption series.wma\n         */\n        ''; // Adds doclet above to the transpiled file\n\n        return WMAIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Zigzag/ZigzagIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { merge, extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Zig Zag series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.zigzag\n         *\n         * @augments Highcharts.Series\n         */\n        class ZigzagIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const lowIndex = params.lowIndex, highIndex = params.highIndex, deviation = params.deviation / 100, deviations = {\n                    'low': 1 + deviation,\n                    'high': 1 - deviation\n                }, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, zigzag = [], xData = [], yData = [];\n                let i, j, zigzagPoint, directionUp, exitLoop = false, yIndex = false;\n                // Exit if not enough points or no low or high values\n                if (!xVal || xVal.length <= 1 ||\n                    (yValLen &&\n                        (typeof yVal[0][lowIndex] === 'undefined' ||\n                            typeof yVal[0][highIndex] === 'undefined'))) {\n                    return;\n                }\n                // Set first zigzag point candidate\n                const firstZigzagLow = yVal[0][lowIndex], firstZigzagHigh = yVal[0][highIndex];\n                // Search for a second zigzag point candidate,\n                // this will also set first zigzag point\n                for (i = 1; i < yValLen; i++) {\n                    // Required change to go down\n                    if (yVal[i][lowIndex] <= firstZigzagHigh * deviations.high) {\n                        zigzag.push([xVal[0], firstZigzagHigh]);\n                        // Second zigzag point candidate\n                        zigzagPoint = [xVal[i], yVal[i][lowIndex]];\n                        // Next line will be going up\n                        directionUp = true;\n                        exitLoop = true;\n                        // Required change to go up\n                    }\n                    else if (yVal[i][highIndex] >= firstZigzagLow * deviations.low) {\n                        zigzag.push([xVal[0], firstZigzagLow]);\n                        // Second zigzag point candidate\n                        zigzagPoint = [xVal[i], yVal[i][highIndex]];\n                        // Next line will be going down\n                        directionUp = false;\n                        exitLoop = true;\n                    }\n                    if (exitLoop) {\n                        xData.push(zigzag[0][0]);\n                        yData.push(zigzag[0][1]);\n                        j = i++;\n                        i = yValLen;\n                    }\n                }\n                // Search for next zigzags\n                for (i = j; i < yValLen; i++) {\n                    if (directionUp) { // Next line up\n                        // lower when going down -> change zigzag candidate\n                        if (yVal[i][lowIndex] <= zigzagPoint[1]) {\n                            zigzagPoint = [xVal[i], yVal[i][lowIndex]];\n                        }\n                        // Required change to go down -> new zigzagpoint and\n                        // direction change\n                        if (yVal[i][highIndex] >=\n                            zigzagPoint[1] * deviations.low) {\n                            yIndex = highIndex;\n                        }\n                    }\n                    else { // Next line down\n                        // higher when going up -> change zigzag candidate\n                        if (yVal[i][highIndex] >= zigzagPoint[1]) {\n                            zigzagPoint = [xVal[i], yVal[i][highIndex]];\n                        }\n                        // Required change to go down -> new zigzagpoint and\n                        // direction change\n                        if (yVal[i][lowIndex] <=\n                            zigzagPoint[1] * deviations.high) {\n                            yIndex = lowIndex;\n                        }\n                    }\n                    if (yIndex !== false) { // New zigzag point and direction change\n                        zigzag.push(zigzagPoint);\n                        xData.push(zigzagPoint[0]);\n                        yData.push(zigzagPoint[1]);\n                        zigzagPoint = [xVal[i], yVal[i][yIndex]];\n                        directionUp = !directionUp;\n                        yIndex = false;\n                    }\n                }\n                const zigzagLen = zigzag.length;\n                // No zigzag for last point\n                if (zigzagLen !== 0 &&\n                    zigzag[zigzagLen - 1][0] < xVal[yValLen - 1]) {\n                    // Set last point from zigzag candidate\n                    zigzag.push(zigzagPoint);\n                    xData.push(zigzagPoint[0]);\n                    yData.push(zigzagPoint[1]);\n                }\n                return {\n                    values: zigzag,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Zig Zag indicator.\n         *\n         * This series requires `linkedTo` option to be set.\n         *\n         * @sample stock/indicators/zigzag\n         *         Zig Zag indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        6.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/zigzag\n         * @optionparent plotOptions.zigzag\n         */\n        ZigzagIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index, period\n             */\n            params: {\n                // Index and period are unchangeable, do not inherit (#15362)\n                index: void 0,\n                period: void 0,\n                /**\n                 * The point index which indicator calculations will base - low\n                 * value.\n                 *\n                 * For example using OHLC data, index=2 means the indicator will be\n                 * calculated using Low values.\n                 */\n                lowIndex: 2,\n                /**\n                 * The point index which indicator calculations will base - high\n                 * value.\n                 *\n                 * For example using OHLC data, index=1 means the indicator will be\n                 * calculated using High values.\n                 */\n                highIndex: 1,\n                /**\n                 * The threshold for the value change.\n                 *\n                 * For example deviation=1 means the indicator will ignore all price\n                 * movements less than 1%.\n                 */\n                deviation: 1\n            }\n        });\n        extend(ZigzagIndicator.prototype, {\n            nameComponents: ['deviation'],\n            nameSuffixes: ['%'],\n            nameBase: 'Zig Zag'\n        });\n        SeriesRegistry.registerSeriesType('zigzag', ZigzagIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Zig Zag` series. If the [type](#series.zigzag.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.zigzag\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/zigzag\n         * @apioption series.zigzag\n         */\n        ''; // Adds doclets above to transpiled file\n\n        return ZigzagIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegression/LinearRegressionIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { isArray, extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Linear regression series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearregression\n         *\n         * @augments Highcharts.Series\n         */\n        class LinearRegressionIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Return the slope and intercept of a straight line function.\n             *\n             * @private\n             *\n             * @param {Array<number>} xData\n             * List of all x coordinates in a period.\n             *\n             * @param {Array<number>} yData\n             * List of all y coordinates in a period.\n             *\n             * @return {Highcharts.RegressionLineParametersObject}\n             * Object that contains the slope and the intercept of a straight line\n             * function.\n             */\n            getRegressionLineParameters(xData, yData) {\n                // Least squares method\n                const yIndex = this.options.params.index, getSingleYValue = function (yValue, yIndex) {\n                    return isArray(yValue) ? yValue[yIndex] : yValue;\n                }, xSum = xData.reduce(function (accX, val) {\n                    return val + accX;\n                }, 0), ySum = yData.reduce(function (accY, val) {\n                    return getSingleYValue(val, yIndex) + accY;\n                }, 0), xMean = xSum / xData.length, yMean = ySum / yData.length;\n                let xError, yError, i, formulaNumerator = 0, formulaDenominator = 0;\n                for (i = 0; i < xData.length; i++) {\n                    xError = xData[i] - xMean;\n                    yError = getSingleYValue(yData[i], yIndex) - yMean;\n                    formulaNumerator += xError * yError;\n                    formulaDenominator += Math.pow(xError, 2);\n                }\n                const slope = formulaDenominator ?\n                    formulaNumerator / formulaDenominator : 0; // Don't divide by 0\n                return {\n                    slope: slope,\n                    intercept: yMean - slope * xMean\n                };\n            }\n            /**\n             * Return the y value on a straight line.\n             *\n             * @private\n             *\n             * @param {Highcharts.RegressionLineParametersObject} lineParameters\n             * Object that contains the slope and the intercept of a straight line\n             * function.\n             *\n             * @param {number} endPointX\n             * X coordinate of the point.\n             *\n             * @return {number}\n             * Y value of the point that lies on the line.\n             */\n            getEndPointY(lineParameters, endPointX) {\n                return lineParameters.slope * endPointX + lineParameters.intercept;\n            }\n            /**\n             * Transform the coordinate system so that x values start at 0 and\n             * apply xAxisUnit.\n             *\n             * @private\n             *\n             * @param {Array<number>} xData\n             * List of all x coordinates in a period\n             *\n             * @param {number} xAxisUnit\n             * Option (see the API)\n             *\n             * @return {Array<number>}\n             * Array of transformed x data\n             */\n            transformXData(xData, xAxisUnit) {\n                const xOffset = xData[0];\n                return xData.map(function (xValue) {\n                    return (xValue - xOffset) / xAxisUnit;\n                });\n            }\n            /**\n             * Find the closest distance between points in the base series.\n             * @private\n             * @param {Array<number>} xData list of all x coordinates in the base series\n             * @return {number} - closest distance between points in the base series\n             */\n            findClosestDistance(xData) {\n                let distance, closestDistance, i;\n                for (i = 1; i < xData.length - 1; i++) {\n                    distance = xData[i] - xData[i - 1];\n                    if (distance > 0 &&\n                        (typeof closestDistance === 'undefined' ||\n                            distance < closestDistance)) {\n                        closestDistance = distance;\n                    }\n                }\n                return closestDistance;\n            }\n            // Required to be implemented - starting point for indicator's logic\n            getValues(baseSeries, regressionSeriesParams) {\n                const xData = baseSeries.xData, yData = baseSeries.yData, period = regressionSeriesParams.period, \n                // Format required to be returned\n                indicatorData = {\n                    xData: [], // By getValues() method\n                    yData: [],\n                    values: []\n                }, xAxisUnit = this.options.params.xAxisUnit ||\n                    this.findClosestDistance(xData);\n                let lineParameters, i, periodStart, periodEnd, endPointX, endPointY, periodXData, periodYData, periodTransformedXData;\n                // Iteration logic: x value of the last point within the period\n                // (end point) is used to represent the y value (regression)\n                // of the entire period.\n                for (i = period - 1; i <= xData.length - 1; i++) {\n                    periodStart = i - period + 1; // Adjusted for slice() function\n                    periodEnd = i + 1; // (as above)\n                    endPointX = xData[i];\n                    periodXData = xData.slice(periodStart, periodEnd);\n                    periodYData = yData.slice(periodStart, periodEnd);\n                    periodTransformedXData = this.transformXData(periodXData, xAxisUnit);\n                    lineParameters = this.getRegressionLineParameters(periodTransformedXData, periodYData);\n                    endPointY = this.getEndPointY(lineParameters, periodTransformedXData[periodTransformedXData.length - 1]);\n                    // @todo this is probably not used anywhere\n                    indicatorData.values.push({\n                        regressionLineParameters: lineParameters,\n                        x: endPointX,\n                        y: endPointY\n                    });\n                    indicatorData.xData.push(endPointX);\n                    indicatorData.yData.push(endPointY);\n                }\n                return indicatorData;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Linear regression indicator. This series requires `linkedTo` option to be\n         * set.\n         *\n         * @sample {highstock} stock/indicators/linear-regression\n         *         Linear regression indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        7.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/regressions\n         * @optionparent plotOptions.linearregression\n         */\n        LinearRegressionIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                /**\n                 * Unit (in milliseconds) for the x axis distances used to\n                 * compute the regression line parameters (slope & intercept)\n                 * for every range. In Highcharts Stock the x axis values are\n                 * always represented in milliseconds which may cause that\n                 * distances between points are \"big\" integer numbers.\n                 *\n                 * Highcharts Stock's linear regression algorithm (least squares\n                 * method) will utilize these \"big\" integers for finding the\n                 * slope and the intercept of the regression line for each\n                 * period. In consequence, this value may be a very \"small\"\n                 * decimal number that's hard to interpret by a human.\n                 *\n                 * For instance: `xAxisUnit` equaled to `86400000` ms (1 day)\n                 * forces the algorithm to treat `86400000` as `1` while\n                 * computing the slope and the intercept. This may enhance the\n                 * legibility of the indicator's values.\n                 *\n                 * Default value is the closest distance between two data\n                 * points.\n                 *\n                 * In `v9.0.2`, the default value has been changed\n                 * from `undefined` to `null`.\n                 *\n                 * @sample {highstock} stock/plotoptions/linear-regression-xaxisunit\n                 *         xAxisUnit set to 1 minute\n                 *\n                 * @example\n                 * // In Liniear Regression Slope Indicator series `xAxisUnit`is\n                 * // `86400000` (1 day) and period is `3`. There're 3 points in\n                 * // the base series:\n                 *\n                 * data: [\n                 *   [Date.UTC(2020, 0, 1), 1],\n                 *   [Date.UTC(2020, 0, 2), 3],\n                 *   [Date.UTC(2020, 0, 3), 5]\n                 * ]\n                 *\n                 * // This will produce one point in the indicator series that\n                 * // has a `y` value of `2` (slope of the regression line). If\n                 * // we change the `xAxisUnit` to `1` (ms) the value of the\n                 * // indicator's point will be `2.3148148148148148e-8` which is\n                 * // harder to interpert for a human.\n                 *\n                 * @type    {null|number}\n                 * @product highstock\n                 */\n                xAxisUnit: null\n            },\n            tooltip: {\n                valueDecimals: 4\n            }\n        });\n        extend(LinearRegressionIndicator.prototype, {\n            nameBase: 'Linear Regression Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegression', LinearRegressionIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A linear regression series. If the\n         * [type](#series.linearregression.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregression\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregression\n         */\n        ''; // To include the above in the js output\n\n        return LinearRegressionIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionSlopes/LinearRegressionSlopesIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { linearRegression: LinearRegressionIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Linear Regression Slope series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionSlope\n         *\n         * @augments Highcharts.Series\n         */\n        class LinearRegressionSlopesIndicator extends LinearRegressionIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getEndPointY(lineParameters) {\n                return lineParameters.slope;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Linear regression slope indicator. This series requires `linkedTo`\n         * option to be set.\n         *\n         * @sample {highstock} stock/indicators/linear-regression-slope\n         *         Linear regression slope indicator\n         *\n         * @extends      plotOptions.linearregression\n         * @since        7.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @optionparent plotOptions.linearregressionslope\n         */\n        LinearRegressionSlopesIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions);\n        extend(LinearRegressionSlopesIndicator.prototype, {\n            nameBase: 'Linear Regression Slope Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionSlope', LinearRegressionSlopesIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionslope.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionslope\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionslope\n         */\n        ''; // To include the above in the js output\n\n        return LinearRegressionSlopesIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionIntercept/LinearRegressionInterceptIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { linearRegression: LinearRegressionIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Linear Regression Intercept series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionIntercept\n         *\n         * @augments Highcharts.Series\n         */\n        class LinearRegressionInterceptIndicator extends LinearRegressionIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getEndPointY(lineParameters) {\n                return lineParameters.intercept;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Linear regression intercept indicator. This series requires `linkedTo`\n         * option to be set.\n         *\n         * @sample {highstock} stock/indicators/linear-regression-intercept\n         *         Linear intercept slope indicator\n         *\n         * @extends      plotOptions.linearregression\n         * @since        7.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @optionparent plotOptions.linearregressionintercept\n         */\n        LinearRegressionInterceptIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions);\n        extend(LinearRegressionInterceptIndicator.prototype, {\n            nameBase: 'Linear Regression Intercept Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionIntercept', LinearRegressionInterceptIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionintercept.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionintercept\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionintercept\n         */\n        ''; // To include the above in the js output\n\n        return LinearRegressionInterceptIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionAngle/LinearRegressionAngleIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { linearRegression: LinearRegressionIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Linear Regression Angle series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionAngle\n         *\n         * @augments Highcharts.Series\n         */\n        class LinearRegressionAngleIndicator extends LinearRegressionIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Convert a slope of a line to angle (in degrees) between\n             * the line and x axis\n             * @private\n             * @param {number} slope of the straight line function\n             * @return {number} angle in degrees\n             */\n            slopeToAngle(slope) {\n                return Math.atan(slope) * (180 / Math.PI); // Rad to deg\n            }\n            getEndPointY(lineParameters) {\n                return this.slopeToAngle(lineParameters.slope);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Linear regression angle indicator. This series requires `linkedTo`\n         * option to be set.\n         *\n         * @sample {highstock} stock/indicators/linear-regression-angle\n         *         Linear intercept angle indicator\n         *\n         * @extends      plotOptions.linearregression\n         * @since        7.0.0\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @optionparent plotOptions.linearregressionangle\n         */\n        LinearRegressionAngleIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions, {\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span>' +\n                    '{series.name}: <b>{point.y}°</b><br/>'\n            }\n        });\n        extend(LinearRegressionAngleIndicator.prototype, {\n            nameBase: 'Linear Regression Angle Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionAngle', LinearRegressionAngleIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionangle.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionangle\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionangle\n         */\n        ''; // To include the above in the js output\n\n        return LinearRegressionAngleIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ABands/ABandsIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, extend, merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function getBaseForBand(low, high, factor) {\n            return (((correctFloat(high - low)) /\n                ((correctFloat(high + low)) / 2)) * 1000) * factor;\n        }\n        /**\n         * @private\n         */\n        function getPointUB(high, base) {\n            return high * (correctFloat(1 + 2 * base));\n        }\n        /**\n         * @private\n         */\n        function getPointLB(low, base) {\n            return low * (correctFloat(1 - 2 * base));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ABands series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.abands\n         *\n         * @augments Highcharts.Series\n         */\n        class ABandsIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, factor = params.factor, index = params.index, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, \n                // Upperbands\n                UB = [], \n                // Lowerbands\n                LB = [], \n                // ABANDS array structure:\n                // 0-date, 1-top line, 2-middle line, 3-bottom line\n                ABANDS = [], low = 2, high = 1, xData = [], yData = [];\n                // Middle line, top line and bottom line\n                let ML, TL, BL, date, bandBase, pointSMA, ubSMA, lbSMA, slicedX, slicedY, i;\n                if (yValLen < period) {\n                    return;\n                }\n                for (i = 0; i <= yValLen; i++) {\n                    // Get UB and LB values of every point. This condition\n                    // is necessary, because there is a need to calculate current\n                    // UB nad LB values simultaneously with given period SMA\n                    // in one for loop.\n                    if (i < yValLen) {\n                        bandBase = getBaseForBand(yVal[i][low], yVal[i][high], factor);\n                        UB.push(getPointUB(yVal[i][high], bandBase));\n                        LB.push(getPointLB(yVal[i][low], bandBase));\n                    }\n                    if (i >= period) {\n                        slicedX = xVal.slice(i - period, i);\n                        slicedY = yVal.slice(i - period, i);\n                        ubSMA = super.getValues.call(this, {\n                            xData: slicedX,\n                            yData: UB.slice(i - period, i)\n                        }, {\n                            period: period\n                        });\n                        lbSMA = super.getValues.call(this, {\n                            xData: slicedX,\n                            yData: LB.slice(i - period, i)\n                        }, {\n                            period: period\n                        });\n                        pointSMA = super.getValues.call(this, {\n                            xData: slicedX,\n                            yData: slicedY\n                        }, {\n                            period: period,\n                            index: index\n                        });\n                        date = pointSMA.xData[0];\n                        TL = ubSMA.yData[0];\n                        BL = lbSMA.yData[0];\n                        ML = pointSMA.yData[0];\n                        ABANDS.push([date, TL, ML, BL]);\n                        xData.push(date);\n                        yData.push([TL, ML, BL]);\n                    }\n                }\n                return {\n                    values: ABANDS,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Acceleration bands (ABANDS). This series requires the `linkedTo` option\n         * to be set and should be loaded after the\n         * `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/acceleration-bands\n         *         Acceleration Bands\n         *\n         * @extends      plotOptions.sma\n         * @mixes        Highcharts.MultipleLinesMixin\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking,\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/acceleration-bands\n         * @optionparent plotOptions.abands\n         */\n        ABandsIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Option for fill color between lines in Accelleration bands Indicator.\n             *\n             * @sample {highstock} stock/indicators/indicator-area-fill\n             *      Background fill between lines.\n             *\n             * @type {Highcharts.Color}\n             * @since 9.3.2\n             * @apioption plotOptions.abands.fillColor\n             *\n             */\n            params: {\n                period: 20,\n                /**\n                 * The algorithms factor value used to calculate bands.\n                 *\n                 * @product highstock\n                 */\n                factor: 0.001,\n                index: 3\n            },\n            lineWidth: 1,\n            topLine: {\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1\n                }\n            },\n            bottomLine: {\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(ABandsIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            nameBase: 'Acceleration Bands',\n            nameComponents: ['period', 'factor'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(ABandsIndicator);\n        SeriesRegistry.registerSeriesType('abands', ABandsIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An Acceleration bands indicator. If the [type](#series.abands.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.abands\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            stacking, showInNavigator,\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/acceleration-bands\n         * @apioption series.abands\n         */\n        ''; // To include the above in jsdoc\n\n        return ABandsIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/TrendLine/TrendLineIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge, isArray } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Trend line series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.trendline\n         *\n         * @augments Highcharts.Series\n         */\n        class TrendLineIndicator extends SMAIndicator {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.updateAllPoints = true;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const orgXVal = series.xData, yVal = series.yData, xVal = [], LR = [], xData = [], yData = [], index = params.index;\n                let numerator = 0, denominator = 0, xValSum = 0, yValSum = 0, counter = 0;\n                // Create an array of consecutive xValues, (don't remove duplicates)\n                for (let i = 0; i < orgXVal.length; i++) {\n                    if (i === 0 || orgXVal[i] !== orgXVal[i - 1]) {\n                        counter++;\n                    }\n                    xVal.push(counter);\n                }\n                for (let i = 0; i < xVal.length; i++) {\n                    xValSum += xVal[i];\n                    yValSum += isArray(yVal[i]) ? yVal[i][index] : yVal[i];\n                }\n                const meanX = xValSum / xVal.length, meanY = yValSum / yVal.length;\n                for (let i = 0; i < xVal.length; i++) {\n                    const y = isArray(yVal[i]) ? yVal[i][index] : yVal[i];\n                    numerator += (xVal[i] - meanX) * (y - meanY);\n                    denominator += Math.pow(xVal[i] - meanX, 2);\n                }\n                // Calculate linear regression:\n                for (let i = 0; i < xVal.length; i++) {\n                    // Check if the xVal is already used\n                    if (orgXVal[i] === xData[xData.length - 1]) {\n                        continue;\n                    }\n                    const x = orgXVal[i], y = meanY + (numerator / denominator) * (xVal[i] - meanX);\n                    LR.push([x, y]);\n                    xData.push(x);\n                    yData.push(y);\n                }\n                return {\n                    xData: xData,\n                    yData: yData,\n                    values: LR\n                };\n            }\n        }\n        /**\n         * Trendline (linear regression) fits a straight line to the selected data\n         * using a method called the Sum Of Least Squares. This series requires the\n         * `linkedTo` option to be set.\n         *\n         * @sample stock/indicators/trendline\n         *         Trendline indicator\n         *\n         * @extends      plotOptions.sma\n         * @since        7.1.3\n         * @product      highstock\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/trendline\n         * @optionparent plotOptions.trendline\n         */\n        TrendLineIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding period\n             */\n            params: {\n                period: void 0, // Unchangeable period, do not inherit (#15362)\n                /**\n                 * The point index which indicator calculations will base. For\n                 * example using OHLC data, index=2 means the indicator will be\n                 * calculated using Low values.\n                 *\n                 * @default 3\n                 */\n                index: 3\n            }\n        });\n        extend(TrendLineIndicator.prototype, {\n            nameBase: 'Trendline',\n            nameComponents: void 0\n        });\n        SeriesRegistry.registerSeriesType('trendline', TrendLineIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `TrendLine` series. If the [type](#series.trendline.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.trendline\n         * @since     7.1.3\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/trendline\n         * @apioption series.trendline\n         */\n        ''; // To include the above in the js output\n\n        return TrendLineIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DisparityIndex/DisparityIndexIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *  (c) 2010-2024 Rafal Sebestjanski\n         *\n         *  Disparity Index technical indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, defined, extend, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Disparity Index series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.disparityindex\n         *\n         * @augments Highcharts.Series\n         */\n        class DisparityIndexIndicator extends SMAIndicator {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init() {\n                const args = arguments, ctx = this, // Disparity Index indicator\n                params = args[1].params, // Options.params\n                averageType = params && params.average ? params.average : void 0;\n                ctx.averageIndicator = SeriesRegistry\n                    .seriesTypes[averageType] || SMAIndicator;\n                ctx.averageIndicator.prototype.init.apply(ctx, args);\n            }\n            calculateDisparityIndex(curPrice, periodAverage) {\n                return correctFloat(curPrice - periodAverage) / periodAverage * 100;\n            }\n            getValues(series, params) {\n                const index = params.index, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, disparityIndexPoint = [], xData = [], yData = [], \n                // \"as any\" because getValues doesn't exist on typeof Series\n                averageIndicator = this.averageIndicator, isOHLC = isArray(yVal[0]), \n                // Get the average indicator's values\n                values = averageIndicator.prototype.getValues(series, params), yValues = values.yData, start = xVal.indexOf(values.xData[0]);\n                // Check period, if bigger than points length, skip\n                if (!yValues || yValues.length === 0 ||\n                    !defined(index) ||\n                    yVal.length <= start) {\n                    return;\n                }\n                // Get the Disparity Index indicator's values\n                for (let i = start; i < yValLen; i++) {\n                    const disparityIndexValue = this.calculateDisparityIndex(isOHLC ? yVal[i][index] : yVal[i], yValues[i - start]);\n                    disparityIndexPoint.push([\n                        xVal[i],\n                        disparityIndexValue\n                    ]);\n                    xData.push(xVal[i]);\n                    yData.push(disparityIndexValue);\n                }\n                return {\n                    values: disparityIndexPoint,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Disparity Index.\n         * This series requires the `linkedTo` option to be set and should\n         * be loaded after the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/disparity-index\n         *         Disparity Index indicator\n         *\n         * @extends      plotOptions.sma\n         * @since 9.1.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/disparity-index\n         * @optionparent plotOptions.disparityindex\n         */\n        DisparityIndexIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            params: {\n                /**\n                 * The average used to calculate the Disparity Index indicator.\n                 * By default it uses SMA, with EMA as an option. To use other\n                 * averages, e.g. TEMA, the `stock/indicators/tema.js` file needs to\n                 * be loaded.\n                 *\n                 * If value is different than `ema`, `dema`, `tema` or `wma`,\n                 * then sma is used.\n                 */\n                average: 'sma',\n                index: 3\n            },\n            marker: {\n                enabled: false\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(DisparityIndexIndicator.prototype, {\n            nameBase: 'Disparity Index',\n            nameComponents: ['period', 'average']\n        });\n        SeriesRegistry.registerSeriesType('disparityindex', DisparityIndexIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The Disparity Index indicator series.\n         * If the [type](#series.disparityindex.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.disparityindex\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/disparity-index\n         * @apioption series.disparityindex\n         */\n        ''; // To include the above in the js output\n\n        return DisparityIndexIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/indicators-all.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],
  "mappings": "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",
  "names": ["Highcharts", "MultipleLinesComposition", "pointValKey", "linesApiNames", "areaLinesNames", "pointArrayMap", "color", "i", "series", "yIndex"]
}
