import {
  __commonJS
} from "./chunk-HKJ2B2AA.js";

// node_modules/highcharts/modules/stock-tools.js
var require_stock_tools = __commonJS({
  "node_modules/highcharts/modules/stock-tools.js"(exports, module) {
    !/**
    * Highstock JS v11.4.7 (2024-08-14)
    *
    * Advanced Highcharts Stock tools
    *
    * (c) 2010-2024 Highsoft AS
    * Author: Torstein Honsi
    *
    * License: www.highcharts.com/license
    */
    function(t) {
      "object" == typeof module && module.exports ? (t.default = t, module.exports = t) : "function" == typeof define && define.amd ? define("highcharts/modules/stock-tools", ["highcharts", "highcharts/modules/stock"], function(i) {
        return t(i), t.Highcharts = i, t;
      }) : t("undefined" != typeof Highcharts ? Highcharts : void 0);
    }(function(t) {
      "use strict";
      var i = t ? t._modules : {};
      function e(i2, e2, s, n) {
        i2.hasOwnProperty(e2) || (i2[e2] = n.apply(null, s), "function" == typeof CustomEvent && t.win.dispatchEvent(new CustomEvent("HighchartsModuleLoaded", { detail: { path: e2, module: i2[e2] } })));
      }
      e(i, "Core/Chart/ChartNavigationComposition.js", [], function() {
        var t2;
        return function(t3) {
          t3.compose = function(t4) {
            return t4.navigation || (t4.navigation = new i2(t4)), t4;
          };
          class i2 {
            constructor(t4) {
              this.updates = [], this.chart = t4;
            }
            addUpdate(t4) {
              this.chart.navigation.updates.push(t4);
            }
            update(t4, i3) {
              this.updates.forEach((e2) => {
                e2.call(this.chart, t4, i3);
              });
            }
          }
          t3.Additions = i2;
        }(t2 || (t2 = {})), t2;
      }), e(i, "Extensions/Annotations/NavigationBindingsDefaults.js", [i["Extensions/Annotations/NavigationBindingsUtilities.js"], i["Core/Utilities.js"]], function(t2, i2) {
        let { getAssignedAxis: e2 } = t2, { isNumber: s, merge: n } = i2;
        return { lang: { navigation: { popup: { simpleShapes: "Simple shapes", lines: "Lines", circle: "Circle", ellipse: "Ellipse", rectangle: "Rectangle", label: "Label", shapeOptions: "Shape options", typeOptions: "Details", fill: "Fill", format: "Text", strokeWidth: "Line width", stroke: "Line color", title: "Title", name: "Name", labelOptions: "Label options", labels: "Labels", backgroundColor: "Background color", backgroundColors: "Background colors", borderColor: "Border color", borderRadius: "Border radius", borderWidth: "Border width", style: "Style", padding: "Padding", fontSize: "Font size", color: "Color", height: "Height", shapes: "Shape options" } } }, navigation: { bindingsClassName: "highcharts-bindings-container", bindings: { circleAnnotation: { className: "highcharts-circle-annotation", start: function(t3) {
          var _a;
          let i3 = (_a = this.chart.pointer) == null ? void 0 : _a.getCoordinates(t3), s2 = i3 && e2(i3.xAxis), o = i3 && e2(i3.yAxis), a = this.chart.options.navigation;
          if (s2 && o) return this.chart.addAnnotation(n({ langKey: "circle", type: "basicAnnotation", shapes: [{ type: "circle", point: { x: s2.value, y: o.value, xAxis: s2.axis.index, yAxis: o.axis.index }, r: 5 }] }, a.annotationsOptions, a.bindings.circleAnnotation.annotationsOptions));
        }, steps: [function(t3, i3) {
          let e3;
          let n2 = i3.options.shapes, o = n2 && n2[0] && n2[0].point || {};
          if (s(o.xAxis) && s(o.yAxis)) {
            let i4 = this.chart.inverted, s2 = this.chart.xAxis[o.xAxis].toPixels(o.x), n3 = this.chart.yAxis[o.yAxis].toPixels(o.y);
            e3 = Math.max(Math.sqrt(Math.pow(i4 ? n3 - t3.chartX : s2 - t3.chartX, 2) + Math.pow(i4 ? s2 - t3.chartY : n3 - t3.chartY, 2)), 5);
          }
          i3.update({ shapes: [{ r: e3 }] });
        }] }, ellipseAnnotation: { className: "highcharts-ellipse-annotation", start: function(t3) {
          var _a;
          let i3 = (_a = this.chart.pointer) == null ? void 0 : _a.getCoordinates(t3), s2 = i3 && e2(i3.xAxis), o = i3 && e2(i3.yAxis), a = this.chart.options.navigation;
          if (s2 && o) return this.chart.addAnnotation(n({ langKey: "ellipse", type: "basicAnnotation", shapes: [{ type: "ellipse", xAxis: s2.axis.index, yAxis: o.axis.index, points: [{ x: s2.value, y: o.value }, { x: s2.value, y: o.value }], ry: 1 }] }, a.annotationsOptions, a.bindings.ellipseAnnotation.annotationOptions));
        }, steps: [function(t3, i3) {
          let e3 = i3.shapes[0], s2 = e3.getAbsolutePosition(e3.points[1]);
          e3.translatePoint(t3.chartX - s2.x, t3.chartY - s2.y, 1), e3.redraw(false);
        }, function(t3, i3) {
          let e3 = i3.shapes[0], s2 = e3.getAbsolutePosition(e3.points[0]), n2 = e3.getAbsolutePosition(e3.points[1]), o = e3.getDistanceFromLine(s2, n2, t3.chartX, t3.chartY), a = e3.getYAxis(), r = Math.abs(a.toValue(0) - a.toValue(o));
          e3.setYRadius(r), e3.redraw(false);
        }] }, rectangleAnnotation: { className: "highcharts-rectangle-annotation", start: function(t3) {
          var _a;
          let i3 = (_a = this.chart.pointer) == null ? void 0 : _a.getCoordinates(t3), s2 = i3 && e2(i3.xAxis), o = i3 && e2(i3.yAxis);
          if (!s2 || !o) return;
          let a = s2.value, r = o.value, l = s2.axis.index, c = o.axis.index, h = this.chart.options.navigation;
          return this.chart.addAnnotation(n({ langKey: "rectangle", type: "basicAnnotation", shapes: [{ type: "path", points: [{ xAxis: l, yAxis: c, x: a, y: r }, { xAxis: l, yAxis: c, x: a, y: r }, { xAxis: l, yAxis: c, x: a, y: r }, { xAxis: l, yAxis: c, x: a, y: r }, { command: "Z" }] }] }, h.annotationsOptions, h.bindings.rectangleAnnotation.annotationsOptions));
        }, steps: [function(t3, i3) {
          var _a;
          let s2 = i3.options.shapes, n2 = s2 && s2[0] && s2[0].points || [], o = (_a = this.chart.pointer) == null ? void 0 : _a.getCoordinates(t3), a = o && e2(o.xAxis), r = o && e2(o.yAxis);
          if (a && r) {
            let t4 = a.value, e3 = r.value;
            n2[1].x = t4, n2[2].x = t4, n2[2].y = e3, n2[3].y = e3, i3.update({ shapes: [{ points: n2 }] });
          }
        }] }, labelAnnotation: { className: "highcharts-label-annotation", start: function(t3) {
          var _a;
          let i3 = (_a = this.chart.pointer) == null ? void 0 : _a.getCoordinates(t3), s2 = i3 && e2(i3.xAxis), o = i3 && e2(i3.yAxis), a = this.chart.options.navigation;
          if (s2 && o) return this.chart.addAnnotation(n({ langKey: "label", type: "basicAnnotation", labelOptions: { format: "{y:.2f}", overflow: "none", crop: true }, labels: [{ point: { xAxis: s2.axis.index, yAxis: o.axis.index, x: s2.value, y: o.value } }] }, a.annotationsOptions, a.bindings.labelAnnotation.annotationsOptions));
        } } }, events: {}, annotationsOptions: { animation: { defer: 0 } } } };
      }), e(i, "Extensions/Annotations/NavigationBindings.js", [i["Core/Chart/ChartNavigationComposition.js"], i["Core/Defaults.js"], i["Core/Templating.js"], i["Core/Globals.js"], i["Extensions/Annotations/NavigationBindingsDefaults.js"], i["Extensions/Annotations/NavigationBindingsUtilities.js"], i["Core/Utilities.js"]], function(t2, i2, e2, s, n, o, a) {
        let { setOptions: r } = i2, { format: l } = e2, { composed: c, doc: h, win: p } = s, { getAssignedAxis: d, getFieldType: g } = o, { addEvent: u, attr: m, defined: y, fireEvent: f, isArray: v, isFunction: b, isNumber: x, isObject: k, merge: A, objectEach: C, pick: w, pushUnique: T } = a;
        function N() {
          this.chart.navigationBindings && this.chart.navigationBindings.deselectAnnotation();
        }
        function O() {
          this.navigationBindings && this.navigationBindings.destroy();
        }
        function S() {
          let t3 = this.options;
          t3 && t3.navigation && t3.navigation.bindings && (this.navigationBindings = new z(this, t3.navigation), this.navigationBindings.initEvents(), this.navigationBindings.initUpdate());
        }
        function L() {
          let t3 = this.navigationBindings, i3 = "highcharts-disabled-btn";
          if (this && t3) {
            let e3 = false;
            if (this.series.forEach((t4) => {
              !t4.options.isInternal && t4.visible && (e3 = true);
            }), this.navigationBindings && this.navigationBindings.container && this.navigationBindings.container[0]) {
              let s2 = this.navigationBindings.container[0];
              C(t3.boundClassNames, (t4, n2) => {
                let o2 = s2.querySelectorAll("." + n2);
                if (o2) for (let s3 = 0; s3 < o2.length; s3++) {
                  let n3 = o2[s3], a2 = n3.className;
                  "normal" === t4.noDataState ? -1 !== a2.indexOf(i3) && n3.classList.remove(i3) : e3 ? -1 !== a2.indexOf(i3) && n3.classList.remove(i3) : -1 === a2.indexOf(i3) && (n3.className += " " + i3);
                }
              });
            }
          }
        }
        function B() {
          this.deselectAnnotation();
        }
        function E() {
          this.selectedButtonElement = null;
        }
        function I(t3) {
          let i3, e3;
          let s2 = t3.prototype.defaultOptions.events && t3.prototype.defaultOptions.events.click;
          function n2(t4) {
            let i4 = this, e4 = i4.chart.navigationBindings, n3 = e4.activeAnnotation;
            s2 && s2.call(i4, t4), n3 !== i4 ? (e4.deselectAnnotation(), e4.activeAnnotation = i4, i4.setControlPointsVisibility(true), f(e4, "showPopup", { annotation: i4, formType: "annotation-toolbar", options: e4.annotationToFields(i4), onSubmit: function(t5) {
              if ("remove" === t5.actionType) e4.activeAnnotation = false, e4.chart.removeAnnotation(i4);
              else {
                let s3 = {};
                e4.fieldsToOptions(t5.fields, s3), e4.deselectAnnotation();
                let n4 = s3.typeOptions;
                "measure" === i4.options.type && (n4.crosshairY.enabled = 0 !== n4.crosshairY.strokeWidth, n4.crosshairX.enabled = 0 !== n4.crosshairX.strokeWidth), i4.update(s3);
              }
            } })) : f(e4, "closePopup"), t4.activeAnnotation = true;
          }
          A(true, t3.prototype.defaultOptions.events, { click: n2, touchstart: function(t4) {
            i3 = t4.touches[0].clientX, e3 = t4.touches[0].clientY;
          }, touchend: function(t4) {
            i3 && Math.sqrt(Math.pow(i3 - t4.changedTouches[0].clientX, 2) + Math.pow(e3 - t4.changedTouches[0].clientY, 2)) >= 4 || n2.call(this, t4);
          } });
        }
        class z {
          static compose(t3, i3) {
            T(c, "NavigationBindings") && (u(t3, "remove", N), I(t3), C(t3.types, (t4) => {
              I(t4);
            }), u(i3, "destroy", O), u(i3, "load", S), u(i3, "render", L), u(z, "closePopup", B), u(z, "deselectButton", E), r(n));
          }
          constructor(t3, i3) {
            this.boundClassNames = void 0, this.chart = t3, this.options = i3, this.eventsToUnbind = [], this.container = this.chart.container.getElementsByClassName(this.options.bindingsClassName || ""), this.container.length || (this.container = h.getElementsByClassName(this.options.bindingsClassName || ""));
          }
          getCoords(t3) {
            var _a;
            let i3 = (_a = this.chart.pointer) == null ? void 0 : _a.getCoordinates(t3);
            return [i3 && d(i3.xAxis), i3 && d(i3.yAxis)];
          }
          initEvents() {
            let t3 = this, i3 = t3.chart, e3 = t3.container, n2 = t3.options;
            t3.boundClassNames = {}, C(n2.bindings || {}, (i4) => {
              t3.boundClassNames[i4.className] = i4;
            }), [].forEach.call(e3, (i4) => {
              t3.eventsToUnbind.push(u(i4, "click", (e4) => {
                let s2 = t3.getButtonEvents(i4, e4);
                s2 && !s2.button.classList.contains("highcharts-disabled-btn") && t3.bindingsButtonClick(s2.button, s2.events, e4);
              }));
            }), C(n2.events || {}, (i4, e4) => {
              b(i4) && t3.eventsToUnbind.push(u(t3, e4, i4, { passive: false }));
            }), t3.eventsToUnbind.push(u(i3.container, "click", function(e4) {
              !i3.cancelClick && i3.isInsidePlot(e4.chartX - i3.plotLeft, e4.chartY - i3.plotTop, { visiblePlotOnly: true }) && t3.bindingsChartClick(this, e4);
            })), t3.eventsToUnbind.push(u(i3.container, s.isTouchDevice ? "touchmove" : "mousemove", function(i4) {
              t3.bindingsContainerMouseMove(this, i4);
            }, s.isTouchDevice ? { passive: false } : void 0));
          }
          initUpdate() {
            let i3 = this;
            t2.compose(this.chart).navigation.addUpdate((t3) => {
              i3.update(t3);
            });
          }
          bindingsButtonClick(t3, i3, e3) {
            let s2 = this.chart, n2 = s2.renderer.boxWrapper, o2 = true;
            this.selectedButtonElement && (this.selectedButtonElement.classList === t3.classList && (o2 = false), f(this, "deselectButton", { button: this.selectedButtonElement }), this.nextEvent && (this.currentUserDetails && "annotations" === this.currentUserDetails.coll && s2.removeAnnotation(this.currentUserDetails), this.mouseMoveEvent = this.nextEvent = false)), o2 ? (this.selectedButton = i3, this.selectedButtonElement = t3, f(this, "selectButton", { button: t3 }), i3.init && i3.init.call(this, t3, e3), (i3.start || i3.steps) && s2.renderer.boxWrapper.addClass("highcharts-draw-mode")) : (s2.stockTools && t3.classList.remove("highcharts-active"), n2.removeClass("highcharts-draw-mode"), this.nextEvent = false, this.mouseMoveEvent = false, this.selectedButton = null);
          }
          bindingsChartClick(t3, i3) {
            t3 = this.chart;
            let e3 = this.activeAnnotation, s2 = this.selectedButton, n2 = t3.renderer.boxWrapper;
            e3 && (e3.cancelClick || i3.activeAnnotation || !i3.target.parentNode || function(t4, i4) {
              let e4 = p.Element.prototype, s3 = e4.matches || e4.msMatchesSelector || e4.webkitMatchesSelector, n3 = null;
              if (e4.closest) n3 = e4.closest.call(t4, i4);
              else do {
                if (s3.call(t4, i4)) return t4;
                t4 = t4.parentElement || t4.parentNode;
              } while (null !== t4 && 1 === t4.nodeType);
              return n3;
            }(i3.target, ".highcharts-popup") ? e3.cancelClick && setTimeout(() => {
              e3.cancelClick = false;
            }, 0) : f(this, "closePopup")), s2 && s2.start && (this.nextEvent ? (this.nextEvent(i3, this.currentUserDetails), this.steps && (this.stepIndex++, s2.steps[this.stepIndex] ? this.mouseMoveEvent = this.nextEvent = s2.steps[this.stepIndex] : (f(this, "deselectButton", { button: this.selectedButtonElement }), n2.removeClass("highcharts-draw-mode"), s2.end && s2.end.call(this, i3, this.currentUserDetails), this.nextEvent = false, this.mouseMoveEvent = false, this.selectedButton = null))) : (this.currentUserDetails = s2.start.call(this, i3), this.currentUserDetails && s2.steps ? (this.stepIndex = 0, this.steps = true, this.mouseMoveEvent = this.nextEvent = s2.steps[this.stepIndex]) : (f(this, "deselectButton", { button: this.selectedButtonElement }), n2.removeClass("highcharts-draw-mode"), this.steps = false, this.selectedButton = null, s2.end && s2.end.call(this, i3, this.currentUserDetails))));
          }
          bindingsContainerMouseMove(t3, i3) {
            this.mouseMoveEvent && this.mouseMoveEvent(i3, this.currentUserDetails);
          }
          fieldsToOptions(t3, i3) {
            return C(t3, (t4, e3) => {
              let s2 = parseFloat(t4), n2 = e3.split("."), o2 = n2.length - 1;
              if (!x(s2) || t4.match(/px|em/g) || e3.match(/format/g) || (t4 = s2), "undefined" !== t4) {
                let e4 = i3;
                n2.forEach((i4, s3) => {
                  if ("__proto__" !== i4 && "constructor" !== i4) {
                    let a2 = w(n2[s3 + 1], "");
                    o2 === s3 ? e4[i4] = t4 : (e4[i4] || (e4[i4] = a2.match(/\d/g) ? [] : {}), e4 = e4[i4]);
                  }
                });
              }
            }), i3;
          }
          deselectAnnotation() {
            this.activeAnnotation && (this.activeAnnotation.setControlPointsVisibility(false), this.activeAnnotation = false);
          }
          annotationToFields(t3) {
            let i3 = t3.options, e3 = z.annotationsEditable, s2 = e3.nestedOptions, n2 = w(i3.type, i3.shapes && i3.shapes[0] && i3.shapes[0].type, i3.labels && i3.labels[0] && i3.labels[0].type, "label"), o2 = z.annotationsNonEditable[i3.langKey] || [], a2 = { langKey: i3.langKey, type: n2 };
            function r2(i4, e4, n3, a3, c2) {
              let h2;
              n3 && y(i4) && -1 === o2.indexOf(e4) && ((n3.indexOf && n3.indexOf(e4)) >= 0 || n3[e4] || true === n3) && (v(i4) ? (a3[e4] = [], i4.forEach((t4, i5) => {
                k(t4) ? (a3[e4][i5] = {}, C(t4, (t5, n4) => {
                  r2(t5, n4, s2[e4], a3[e4][i5], e4);
                })) : r2(t4, 0, s2[e4], a3[e4], e4);
              })) : k(i4) ? (h2 = {}, v(a3) ? (a3.push(h2), h2[e4] = {}, h2 = h2[e4]) : a3[e4] = h2, C(i4, (t4, i5) => {
                r2(t4, i5, 0 === e4 ? n3 : s2[e4], h2, e4);
              })) : "format" === e4 ? a3[e4] = [l(i4, t3.labels[0].points[0]).toString(), "text"] : v(a3) ? a3.push([i4, g(c2, i4)]) : a3[e4] = [i4, g(e4, i4)]);
            }
            return C(i3, (t4, o3) => {
              "typeOptions" === o3 ? (a2[o3] = {}, C(i3[o3], (t5, i4) => {
                r2(t5, i4, s2, a2[o3], i4);
              })) : r2(t4, o3, e3[n2], a2, o3);
            }), a2;
          }
          getClickedClassNames(t3, i3) {
            let e3 = i3.target, s2 = [], n2;
            for (; e3 && e3.tagName && ((n2 = m(e3, "class")) && (s2 = s2.concat(n2.split(" ").map((t4) => [t4, e3]))), (e3 = e3.parentNode) !== t3); ) ;
            return s2;
          }
          getButtonEvents(t3, i3) {
            let e3;
            let s2 = this;
            return this.getClickedClassNames(t3, i3).forEach((t4) => {
              s2.boundClassNames[t4[0]] && !e3 && (e3 = { events: s2.boundClassNames[t4[0]], button: t4[1] });
            }), e3;
          }
          update(t3) {
            this.options = A(true, this.options, t3), this.removeEvents(), this.initEvents();
          }
          removeEvents() {
            this.eventsToUnbind.forEach((t3) => t3());
          }
          destroy() {
            this.removeEvents();
          }
        }
        return z.annotationsEditable = { nestedOptions: { labelOptions: ["style", "format", "backgroundColor"], labels: ["style"], label: ["style"], style: ["fontSize", "color"], background: ["fill", "strokeWidth", "stroke"], innerBackground: ["fill", "strokeWidth", "stroke"], outerBackground: ["fill", "strokeWidth", "stroke"], shapeOptions: ["fill", "strokeWidth", "stroke"], shapes: ["fill", "strokeWidth", "stroke"], line: ["strokeWidth", "stroke"], backgroundColors: [true], connector: ["fill", "strokeWidth", "stroke"], crosshairX: ["strokeWidth", "stroke"], crosshairY: ["strokeWidth", "stroke"] }, circle: ["shapes"], ellipse: ["shapes"], verticalLine: [], label: ["labelOptions"], measure: ["background", "crosshairY", "crosshairX"], fibonacci: [], tunnel: ["background", "line", "height"], pitchfork: ["innerBackground", "outerBackground"], rect: ["shapes"], crookedLine: [], basicAnnotation: ["shapes", "labelOptions"] }, z.annotationsNonEditable = { rectangle: ["crosshairX", "crosshairY", "labelOptions"], ellipse: ["labelOptions"], circle: ["labelOptions"] }, z;
      }), e(i, "Stock/StockTools/StockToolsUtilities.js", [i["Core/Defaults.js"], i["Extensions/Annotations/NavigationBindingsUtilities.js"], i["Core/Series/Series.js"], i["Core/Utilities.js"]], function(t2, i2, e2, s) {
        let { getOptions: n } = t2, { getAssignedAxis: o, getFieldType: a } = i2, { defined: r, fireEvent: l, isNumber: c, uniqueKey: h } = s, p = ["apo", "ad", "aroon", "aroonoscillator", "atr", "ao", "cci", "chaikin", "cmf", "cmo", "disparityindex", "dmi", "dpo", "linearRegressionAngle", "linearRegressionIntercept", "linearRegressionSlope", "klinger", "macd", "mfi", "momentum", "natr", "obv", "ppo", "roc", "rsi", "slowstochastic", "stochastic", "trix", "williamsr"], d = ["ad", "cmf", "klinger", "mfi", "obv", "vbp", "vwap"];
        function g(t3, i3) {
          var _a;
          let e3 = (_a = i3.pointer) == null ? void 0 : _a.getCoordinates(t3), s2, n2, a2 = Number.MAX_VALUE, r2;
          if (i3.navigationBindings && e3 && (s2 = o(e3.xAxis), n2 = o(e3.yAxis)), !s2 || !n2) return;
          let l2 = s2.value, c2 = n2.value;
          if (n2.axis.series.forEach((i4) => {
            if (i4.points) {
              let e4 = i4.searchPoint(t3, true);
              e4 && a2 > Math.abs(e4.x - l2) && (a2 = Math.abs(e4.x - l2), r2 = e4);
            }
          }), r2 && r2.x && r2.y) return { x: r2.x, y: r2.y, below: c2 < r2.y, series: r2.series, xAxis: r2.series.xAxis.index || 0, yAxis: r2.series.yAxis.index || 0 };
        }
        return { indicatorsWithAxes: p, indicatorsWithVolume: d, addFlagFromForm: function(t3) {
          return function(i3) {
            let e3 = this, s2 = e3.chart, n2 = s2.stockTools, o2 = g(i3, s2);
            if (!o2) return;
            let r2 = { x: o2.x, y: o2.y }, c2 = { type: "flags", onSeries: o2.series.id, shape: t3, data: [r2], xAxis: o2.xAxis, yAxis: o2.yAxis, point: { events: { click: function() {
              let t4 = this, i4 = t4.options;
              l(e3, "showPopup", { point: t4, formType: "annotation-toolbar", options: { langKey: "flags", type: "flags", title: [i4.title, a("title", i4.title)], name: [i4.name, a("name", i4.name)] }, onSubmit: function(i5) {
                "remove" === i5.actionType ? t4.remove() : t4.update(e3.fieldsToOptions(i5.fields, {}));
              } });
            } } } };
            n2 && n2.guiEnabled || s2.addSeries(c2), l(e3, "showPopup", { formType: "flag", options: { langKey: "flags", type: "flags", title: ["A", a("label", "A")], name: ["Flag A", a("label", "Flag A")] }, onSubmit: function(t4) {
              e3.fieldsToOptions(t4.fields, c2.data[0]), s2.addSeries(c2);
            } });
          };
        }, attractToPoint: g, getAssignedAxis: o, isNotNavigatorYAxis: function(t3) {
          return "highcharts-navigator-yaxis" !== t3.userOptions.className;
        }, isPriceIndicatorEnabled: function(t3) {
          return t3.some((t4) => t4.lastVisiblePrice || t4.lastPrice);
        }, manageIndicators: function(t3) {
          let i3, s2, o2, a2;
          let c2 = this.chart, g2 = { linkedTo: t3.linkedTo, type: t3.type };
          if ("edit" === t3.actionType) this.fieldsToOptions(t3.fields, g2), (a2 = c2.get(t3.seriesId)) && a2.update(g2, false);
          else if ("remove" === t3.actionType) {
            if ((a2 = c2.get(t3.seriesId)) && (i3 = a2.yAxis, a2.linkedSeries && a2.linkedSeries.forEach((t4) => {
              t4.remove(false);
            }), a2.remove(false), p.indexOf(a2.type) >= 0)) {
              let t4 = { height: i3.options.height, top: i3.options.top };
              i3.remove(false), this.resizeYAxes(t4);
            }
          } else g2.id = h(), this.fieldsToOptions(t3.fields, g2), s2 = c2.get(g2.linkedTo), o2 = n().plotOptions, void 0 !== s2 && s2 instanceof e2 && "sum" === s2.getDGApproximation() && !r(o2 && o2[g2.type] && o2.dataGrouping && o2.dataGrouping.approximation) && (g2.dataGrouping = { approximation: "sum" }), p.indexOf(t3.type) >= 0 ? (i3 = c2.addAxis({ id: h(), offset: 0, opposite: true, title: { text: "" }, tickPixelInterval: 40, showLastLabel: false, labels: { align: "left", y: -2 } }, false, false), g2.yAxis = i3.options.id, this.resizeYAxes()) : g2.yAxis = c2.get(t3.linkedTo).options.yAxis, d.indexOf(t3.type) >= 0 && (g2.params.volumeSeriesID = c2.series.filter(function(t4) {
            return "column" === t4.options.type;
          })[0].options.id), c2.addSeries(g2, false);
          l(this, "deselectButton", { button: this.selectedButtonElement }), c2.redraw();
        }, shallowArraysEqual: function(t3, i3) {
          if (!r(t3) || !r(i3) || t3.length !== i3.length) return false;
          for (let e3 = 0; e3 < t3.length; e3++) if (t3[e3] !== i3[e3]) return false;
          return true;
        }, updateHeight: function(t3, i3) {
          let e3 = i3.options.typeOptions, s2 = c(e3.yAxis) && this.chart.yAxis[e3.yAxis];
          s2 && e3.points && i3.update({ typeOptions: { height: s2.toValue(t3[s2.horiz ? "chartX" : "chartY"]) - (e3.points[1].y || 0) } });
        }, updateNthPoint: function(t3) {
          return function(i3, e3) {
            let s2 = e3.options.typeOptions, n2 = c(s2.xAxis) && this.chart.xAxis[s2.xAxis], o2 = c(s2.yAxis) && this.chart.yAxis[s2.yAxis];
            n2 && o2 && (s2.points.forEach((e4, s3) => {
              s3 >= t3 && (e4.x = n2.toValue(i3[n2.horiz ? "chartX" : "chartY"]), e4.y = o2.toValue(i3[o2.horiz ? "chartX" : "chartY"]));
            }), e3.update({ typeOptions: { points: s2.points } }));
          };
        }, updateRectSize: function(t3, i3) {
          let e3 = i3.chart, s2 = i3.options.typeOptions, n2 = c(s2.xAxis) && e3.xAxis[s2.xAxis], o2 = c(s2.yAxis) && e3.yAxis[s2.yAxis];
          if (n2 && o2) {
            let a2 = n2.toValue(t3[n2.horiz ? "chartX" : "chartY"]), r2 = o2.toValue(t3[o2.horiz ? "chartX" : "chartY"]), l2 = a2 - s2.point.x, c2 = s2.point.y - r2;
            i3.update({ typeOptions: { background: { width: e3.inverted ? c2 : l2, height: e3.inverted ? l2 : c2 } } });
          }
        } };
      }), e(i, "Stock/StockTools/StockToolsBindings.js", [i["Core/Globals.js"], i["Stock/StockTools/StockToolsUtilities.js"], i["Core/Utilities.js"]], function(t2, i2, e2) {
        let { addFlagFromForm: s, attractToPoint: n, isNotNavigatorYAxis: o, isPriceIndicatorEnabled: a, manageIndicators: r, updateHeight: l, updateNthPoint: c, updateRectSize: h } = i2, { fireEvent: p, merge: d } = e2;
        return { segment: { className: "highcharts-segment", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = this.chart.options.navigation, n2 = d({ langKey: "segment", type: "crookedLine", typeOptions: { xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: i3.value, y: e3.value }, { x: i3.value, y: e3.value }] } }, s2.annotationsOptions, s2.bindings.segment.annotationsOptions);
          return this.chart.addAnnotation(n2);
        }, steps: [c(1)] }, arrowSegment: { className: "highcharts-arrow-segment", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = this.chart.options.navigation, n2 = d({ langKey: "arrowSegment", type: "crookedLine", typeOptions: { line: { markerEnd: "arrow" }, xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: i3.value, y: e3.value }, { x: i3.value, y: e3.value }] } }, s2.annotationsOptions, s2.bindings.arrowSegment.annotationsOptions);
          return this.chart.addAnnotation(n2);
        }, steps: [c(1)] }, ray: { className: "highcharts-ray", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = this.chart.options.navigation, n2 = d({ langKey: "ray", type: "infinityLine", typeOptions: { type: "ray", xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: i3.value, y: e3.value }, { x: i3.value, y: e3.value }] } }, s2.annotationsOptions, s2.bindings.ray.annotationsOptions);
          return this.chart.addAnnotation(n2);
        }, steps: [c(1)] }, arrowRay: { className: "highcharts-arrow-ray", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = this.chart.options.navigation, n2 = d({ langKey: "arrowRay", type: "infinityLine", typeOptions: { type: "ray", line: { markerEnd: "arrow" }, xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: i3.value, y: e3.value }, { x: i3.value, y: e3.value }] } }, s2.annotationsOptions, s2.bindings.arrowRay.annotationsOptions);
          return this.chart.addAnnotation(n2);
        }, steps: [c(1)] }, infinityLine: { className: "highcharts-infinity-line", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = this.chart.options.navigation, n2 = d({ langKey: "infinityLine", type: "infinityLine", typeOptions: { type: "line", xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: i3.value, y: e3.value }, { x: i3.value, y: e3.value }] } }, s2.annotationsOptions, s2.bindings.infinityLine.annotationsOptions);
          return this.chart.addAnnotation(n2);
        }, steps: [c(1)] }, arrowInfinityLine: { className: "highcharts-arrow-infinity-line", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = this.chart.options.navigation, n2 = d({ langKey: "arrowInfinityLine", type: "infinityLine", typeOptions: { type: "line", line: { markerEnd: "arrow" }, xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: i3.value, y: e3.value }, { x: i3.value, y: e3.value }] } }, s2.annotationsOptions, s2.bindings.arrowInfinityLine.annotationsOptions);
          return this.chart.addAnnotation(n2);
        }, steps: [c(1)] }, horizontalLine: { className: "highcharts-horizontal-line", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = this.chart.options.navigation, n2 = d({ langKey: "horizontalLine", type: "infinityLine", draggable: "y", typeOptions: { type: "horizontalLine", xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: i3.value, y: e3.value }] } }, s2.annotationsOptions, s2.bindings.horizontalLine.annotationsOptions);
          this.chart.addAnnotation(n2);
        } }, verticalLine: { className: "highcharts-vertical-line", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = this.chart.options.navigation, n2 = d({ langKey: "verticalLine", type: "infinityLine", draggable: "x", typeOptions: { type: "verticalLine", xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: i3.value, y: e3.value }] } }, s2.annotationsOptions, s2.bindings.verticalLine.annotationsOptions);
          this.chart.addAnnotation(n2);
        } }, crooked3: { className: "highcharts-crooked3", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = i3.value, n2 = e3.value, o2 = this.chart.options.navigation, a2 = d({ langKey: "crooked3", type: "crookedLine", typeOptions: { xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: s2, y: n2 }, { x: s2, y: n2 }, { x: s2, y: n2 }] } }, o2.annotationsOptions, o2.bindings.crooked3.annotationsOptions);
          return this.chart.addAnnotation(a2);
        }, steps: [c(1), c(2)] }, crooked5: { className: "highcharts-crooked5", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = i3.value, n2 = e3.value, o2 = this.chart.options.navigation, a2 = d({ langKey: "crooked5", type: "crookedLine", typeOptions: { xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: s2, y: n2 }, { x: s2, y: n2 }, { x: s2, y: n2 }, { x: s2, y: n2 }, { x: s2, y: n2 }] } }, o2.annotationsOptions, o2.bindings.crooked5.annotationsOptions);
          return this.chart.addAnnotation(a2);
        }, steps: [c(1), c(2), c(3), c(4)] }, elliott3: { className: "highcharts-elliott3", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = i3.value, n2 = e3.value, o2 = this.chart.options.navigation, a2 = d({ langKey: "elliott3", type: "elliottWave", typeOptions: { xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: s2, y: n2 }, { x: s2, y: n2 }, { x: s2, y: n2 }, { x: s2, y: n2 }] }, labelOptions: { style: { color: "#666666" } } }, o2.annotationsOptions, o2.bindings.elliott3.annotationsOptions);
          return this.chart.addAnnotation(a2);
        }, steps: [c(1), c(2), c(3)] }, elliott5: { className: "highcharts-elliott5", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = i3.value, n2 = e3.value, o2 = this.chart.options.navigation, a2 = d({ langKey: "elliott5", type: "elliottWave", typeOptions: { xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: s2, y: n2 }, { x: s2, y: n2 }, { x: s2, y: n2 }, { x: s2, y: n2 }, { x: s2, y: n2 }, { x: s2, y: n2 }] }, labelOptions: { style: { color: "#666666" } } }, o2.annotationsOptions, o2.bindings.elliott5.annotationsOptions);
          return this.chart.addAnnotation(a2);
        }, steps: [c(1), c(2), c(3), c(4), c(5)] }, measureX: { className: "highcharts-measure-x", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = i3.value, n2 = e3.value, o2 = this.chart.options.navigation, a2 = d({ langKey: "measure", type: "measure", typeOptions: { selectType: "x", xAxis: i3.axis.index, yAxis: e3.axis.index, point: { x: s2, y: n2 }, crosshairX: { strokeWidth: 1, stroke: "#000000" }, crosshairY: { enabled: false, strokeWidth: 0, stroke: "#000000" }, background: { width: 0, height: 0, strokeWidth: 0, stroke: "#ffffff" } }, labelOptions: { style: { color: "#666666" } } }, o2.annotationsOptions, o2.bindings.measureX.annotationsOptions);
          return this.chart.addAnnotation(a2);
        }, steps: [h] }, measureY: { className: "highcharts-measure-y", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = i3.value, n2 = e3.value, o2 = this.chart.options.navigation, a2 = d({ langKey: "measure", type: "measure", typeOptions: { selectType: "y", xAxis: i3.axis.index, yAxis: e3.axis.index, point: { x: s2, y: n2 }, crosshairX: { enabled: false, strokeWidth: 0, stroke: "#000000" }, crosshairY: { strokeWidth: 1, stroke: "#000000" }, background: { width: 0, height: 0, strokeWidth: 0, stroke: "#ffffff" } }, labelOptions: { style: { color: "#666666" } } }, o2.annotationsOptions, o2.bindings.measureY.annotationsOptions);
          return this.chart.addAnnotation(a2);
        }, steps: [h] }, measureXY: { className: "highcharts-measure-xy", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = i3.value, n2 = e3.value, o2 = this.chart.options.navigation, a2 = d({ langKey: "measure", type: "measure", typeOptions: { selectType: "xy", xAxis: i3.axis.index, yAxis: e3.axis.index, point: { x: s2, y: n2 }, background: { width: 0, height: 0, strokeWidth: 10 }, crosshairX: { strokeWidth: 1, stroke: "#000000" }, crosshairY: { strokeWidth: 1, stroke: "#000000" } }, labelOptions: { style: { color: "#666666" } } }, o2.annotationsOptions, o2.bindings.measureXY.annotationsOptions);
          return this.chart.addAnnotation(a2);
        }, steps: [h] }, fibonacci: { className: "highcharts-fibonacci", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = i3.value, n2 = e3.value, o2 = this.chart.options.navigation, a2 = d({ langKey: "fibonacci", type: "fibonacci", typeOptions: { xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: s2, y: n2 }, { x: s2, y: n2 }] }, labelOptions: { style: { color: "#666666" } } }, o2.annotationsOptions, o2.bindings.fibonacci.annotationsOptions);
          return this.chart.addAnnotation(a2);
        }, steps: [c(1), l] }, parallelChannel: { className: "highcharts-parallel-channel", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = i3.value, n2 = e3.value, o2 = this.chart.options.navigation, a2 = d({ langKey: "parallelChannel", type: "tunnel", typeOptions: { xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: s2, y: n2 }, { x: s2, y: n2 }] } }, o2.annotationsOptions, o2.bindings.parallelChannel.annotationsOptions);
          return this.chart.addAnnotation(a2);
        }, steps: [c(1), l] }, pitchfork: { className: "highcharts-pitchfork", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = i3.value, n2 = e3.value, o2 = this.chart.options.navigation, a2 = d({ langKey: "pitchfork", type: "pitchfork", typeOptions: { xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: i3.value, y: e3.value, controlPoint: { style: { fill: "#f21313" } } }, { x: s2, y: n2 }, { x: s2, y: n2 }], innerBackground: { fill: "rgba(100, 170, 255, 0.8)" } }, shapeOptions: { strokeWidth: 2 } }, o2.annotationsOptions, o2.bindings.pitchfork.annotationsOptions);
          return this.chart.addAnnotation(a2);
        }, steps: [c(1), c(2)] }, verticalCounter: { className: "highcharts-vertical-counter", start: function(t3) {
          let i3 = n(t3, this.chart);
          if (!i3) return;
          this.verticalCounter = this.verticalCounter || 0;
          let e3 = this.chart.options.navigation, s2 = d({ langKey: "verticalCounter", type: "verticalLine", typeOptions: { point: { x: i3.x, y: i3.y, xAxis: i3.xAxis, yAxis: i3.yAxis }, label: { offset: i3.below ? 40 : -40, text: this.verticalCounter.toString() } }, labelOptions: { style: { color: "#666666", fontSize: "0.7em" } }, shapeOptions: { stroke: "rgba(0, 0, 0, 0.75)", strokeWidth: 1 } }, e3.annotationsOptions, e3.bindings.verticalCounter.annotationsOptions), o2 = this.chart.addAnnotation(s2);
          this.verticalCounter++, o2.options.events.click.call(o2, {});
        } }, timeCycles: { className: "highcharts-time-cycles", start: function(t3) {
          let i3 = n(t3, this.chart);
          if (!i3) return;
          let e3 = this.chart.options.navigation, s2 = d({ langKey: "timeCycles", type: "timeCycles", typeOptions: { xAxis: i3.xAxis, yAxis: i3.yAxis, points: [{ x: i3.x }, { x: i3.x }], line: { stroke: "rgba(0, 0, 0, 0.75)", fill: "transparent", strokeWidth: 2 } } }, e3.annotationsOptions, e3.bindings.timeCycles.annotationsOptions), o2 = this.chart.addAnnotation(s2);
          return o2.options.events.click.call(o2, {}), o2;
        }, steps: [c(1)] }, verticalLabel: { className: "highcharts-vertical-label", start: function(t3) {
          let i3 = n(t3, this.chart);
          if (!i3) return;
          let e3 = this.chart.options.navigation, s2 = d({ langKey: "verticalLabel", type: "verticalLine", typeOptions: { point: { x: i3.x, y: i3.y, xAxis: i3.xAxis, yAxis: i3.yAxis }, label: { offset: i3.below ? 40 : -40 } }, labelOptions: { style: { color: "#666666", fontSize: "0.7em" } }, shapeOptions: { stroke: "rgba(0, 0, 0, 0.75)", strokeWidth: 1 } }, e3.annotationsOptions, e3.bindings.verticalLabel.annotationsOptions), o2 = this.chart.addAnnotation(s2);
          o2.options.events.click.call(o2, {});
        } }, verticalArrow: { className: "highcharts-vertical-arrow", start: function(t3) {
          let i3 = n(t3, this.chart);
          if (!i3) return;
          let e3 = this.chart.options.navigation, s2 = d({ langKey: "verticalArrow", type: "verticalLine", typeOptions: { point: { x: i3.x, y: i3.y, xAxis: i3.xAxis, yAxis: i3.yAxis }, label: { offset: i3.below ? 40 : -40, format: " " }, connector: { fill: "none", stroke: i3.below ? "#f21313" : "#06b535" } }, shapeOptions: { stroke: "rgba(0, 0, 0, 0.75)", strokeWidth: 1 } }, e3.annotationsOptions, e3.bindings.verticalArrow.annotationsOptions), o2 = this.chart.addAnnotation(s2);
          o2.options.events.click.call(o2, {});
        } }, fibonacciTimeZones: { className: "highcharts-fibonacci-time-zones", start: function(t3) {
          let [i3, e3] = this.getCoords(t3);
          if (!i3 || !e3) return;
          let s2 = this.chart.options.navigation, n2 = d({ type: "fibonacciTimeZones", langKey: "fibonacciTimeZones", typeOptions: { xAxis: i3.axis.index, yAxis: e3.axis.index, points: [{ x: i3.value }] } }, s2.annotationsOptions, s2.bindings.fibonacciTimeZones.annotationsOptions);
          return this.chart.addAnnotation(n2);
        }, steps: [function(t3, i3) {
          let e3 = i3.options.typeOptions.points, s2 = e3 && e3[0].x, [n2, o2] = this.getCoords(t3);
          n2 && o2 && i3.update({ typeOptions: { xAxis: n2.axis.index, yAxis: o2.axis.index, points: [{ x: s2 }, { x: n2.value }] } });
        }] }, flagCirclepin: { className: "highcharts-flag-circlepin", start: s("circlepin") }, flagDiamondpin: { className: "highcharts-flag-diamondpin", start: s("flag") }, flagSquarepin: { className: "highcharts-flag-squarepin", start: s("squarepin") }, flagSimplepin: { className: "highcharts-flag-simplepin", start: s("nopin") }, zoomX: { className: "highcharts-zoom-x", init: function(t3) {
          this.chart.update({ chart: { zooming: { type: "x" } } }), p(this, "deselectButton", { button: t3 });
        } }, zoomY: { className: "highcharts-zoom-y", init: function(t3) {
          this.chart.update({ chart: { zooming: { type: "y" } } }), p(this, "deselectButton", { button: t3 });
        } }, zoomXY: { className: "highcharts-zoom-xy", init: function(t3) {
          this.chart.update({ chart: { zooming: { type: "xy" } } }), p(this, "deselectButton", { button: t3 });
        } }, seriesTypeLine: { className: "highcharts-series-type-line", init: function(t3) {
          this.chart.series[0].update({ type: "line", useOhlcData: true }), p(this, "deselectButton", { button: t3 });
        } }, seriesTypeOhlc: { className: "highcharts-series-type-ohlc", init: function(t3) {
          this.chart.series[0].update({ type: "ohlc" }), p(this, "deselectButton", { button: t3 });
        } }, seriesTypeCandlestick: { className: "highcharts-series-type-candlestick", init: function(t3) {
          this.chart.series[0].update({ type: "candlestick" }), p(this, "deselectButton", { button: t3 });
        } }, seriesTypeHeikinAshi: { className: "highcharts-series-type-heikinashi", init: function(t3) {
          this.chart.series[0].update({ type: "heikinashi" }), p(this, "deselectButton", { button: t3 });
        } }, seriesTypeHLC: { className: "highcharts-series-type-hlc", init: function(t3) {
          this.chart.series[0].update({ type: "hlc", useOhlcData: true }), p(this, "deselectButton", { button: t3 });
        } }, seriesTypeHollowCandlestick: { className: "highcharts-series-type-hollowcandlestick", init: function(t3) {
          this.chart.series[0].update({ type: "hollowcandlestick" }), p(this, "deselectButton", { button: t3 });
        } }, fullScreen: { className: "highcharts-full-screen", noDataState: "normal", init: function(t3) {
          this.chart.fullscreen && this.chart.fullscreen.toggle(), p(this, "deselectButton", { button: t3 });
        } }, currentPriceIndicator: { className: "highcharts-current-price-indicator", init: function(t3) {
          let i3 = this.chart, e3 = i3.series, s2 = i3.stockTools, n2 = a(i3.series);
          s2 && s2.guiEnabled && (e3.forEach(function(t4) {
            t4.update({ lastPrice: { enabled: !n2 }, lastVisiblePrice: { enabled: !n2, label: { enabled: true } } }, false);
          }), i3.redraw()), p(this, "deselectButton", { button: t3 });
        } }, indicators: { className: "highcharts-indicators", init: function() {
          let t3 = this;
          p(t3, "showPopup", { formType: "indicators", options: {}, onSubmit: function(i3) {
            r.call(t3, i3);
          } });
        } }, toggleAnnotations: { className: "highcharts-toggle-annotations", init: function(t3) {
          let i3 = this.chart, e3 = i3.stockTools, s2 = e3.getIconsURL();
          this.toggledAnnotations = !this.toggledAnnotations, (i3.annotations || []).forEach(function(t4) {
            t4.setVisibility(!this.toggledAnnotations);
          }, this), e3 && e3.guiEnabled && (this.toggledAnnotations ? t3.firstChild.style["background-image"] = 'url("' + s2 + 'annotations-hidden.svg")' : t3.firstChild.style["background-image"] = 'url("' + s2 + 'annotations-visible.svg")'), p(this, "deselectButton", { button: t3 });
        } }, saveChart: { className: "highcharts-save-chart", noDataState: "normal", init: function(i3) {
          let e3 = this.chart, s2 = [], n2 = [], a2 = [], r2 = [];
          e3.annotations.forEach(function(t3, i4) {
            s2[i4] = t3.userOptions;
          }), e3.series.forEach(function(t3) {
            t3.is("sma") ? n2.push(t3.userOptions) : "flags" === t3.type && a2.push(t3.userOptions);
          }), e3.yAxis.forEach(function(t3) {
            o(t3) && r2.push(t3.options);
          }), t2.win.localStorage.setItem("highcharts-chart", JSON.stringify({ annotations: s2, indicators: n2, flags: a2, yAxes: r2 })), p(this, "deselectButton", { button: i3 });
        } } };
      }), e(i, "Stock/StockTools/StockToolsDefaults.js", [], function() {
        return { lang: { stockTools: { gui: { simpleShapes: "Simple shapes", lines: "Lines", crookedLines: "Crooked lines", measure: "Measure", advanced: "Advanced", toggleAnnotations: "Toggle annotations", verticalLabels: "Vertical labels", flags: "Flags", zoomChange: "Zoom change", typeChange: "Type change", saveChart: "Save chart", indicators: "Indicators", currentPriceIndicator: "Current Price Indicators", zoomX: "Zoom X", zoomY: "Zoom Y", zoomXY: "Zooom XY", fullScreen: "Fullscreen", typeOHLC: "OHLC", typeLine: "Line", typeCandlestick: "Candlestick", typeHLC: "HLC", typeHollowCandlestick: "Hollow Candlestick", typeHeikinAshi: "Heikin Ashi", circle: "Circle", ellipse: "Ellipse", label: "Label", rectangle: "Rectangle", flagCirclepin: "Flag circle", flagDiamondpin: "Flag diamond", flagSquarepin: "Flag square", flagSimplepin: "Flag simple", measureXY: "Measure XY", measureX: "Measure X", measureY: "Measure Y", segment: "Segment", arrowSegment: "Arrow segment", ray: "Ray", arrowRay: "Arrow ray", line: "Line", arrowInfinityLine: "Arrow line", horizontalLine: "Horizontal line", verticalLine: "Vertical line", infinityLine: "Infinity line", crooked3: "Crooked 3 line", crooked5: "Crooked 5 line", elliott3: "Elliott 3 line", elliott5: "Elliott 5 line", verticalCounter: "Vertical counter", verticalLabel: "Vertical label", verticalArrow: "Vertical arrow", fibonacci: "Fibonacci", fibonacciTimeZones: "Fibonacci Time Zones", pitchfork: "Pitchfork", parallelChannel: "Parallel channel", timeCycles: "Time Cycles" } }, navigation: { popup: { circle: "Circle", ellipse: "Ellipse", rectangle: "Rectangle", label: "Label", segment: "Segment", arrowSegment: "Arrow segment", ray: "Ray", arrowRay: "Arrow ray", line: "Line", arrowInfinityLine: "Arrow line", horizontalLine: "Horizontal line", verticalLine: "Vertical line", crooked3: "Crooked 3 line", crooked5: "Crooked 5 line", elliott3: "Elliott 3 line", elliott5: "Elliott 5 line", verticalCounter: "Vertical counter", verticalLabel: "Vertical label", verticalArrow: "Vertical arrow", fibonacci: "Fibonacci", fibonacciTimeZones: "Fibonacci Time Zones", pitchfork: "Pitchfork", parallelChannel: "Parallel channel", infinityLine: "Infinity line", measure: "Measure", measureXY: "Measure XY", measureX: "Measure X", measureY: "Measure Y", timeCycles: "Time Cycles", flags: "Flags", addButton: "Add", saveButton: "Save", editButton: "Edit", removeButton: "Remove", series: "Series", volume: "Volume", connector: "Connector", innerBackground: "Inner background", outerBackground: "Outer background", crosshairX: "Crosshair X", crosshairY: "Crosshair Y", tunnel: "Tunnel", background: "Background", noFilterMatch: "No match", searchIndicators: "Search Indicators", clearFilter: "✕ clear filter", index: "Index", period: "Period", periods: "Periods", standardDeviation: "Standard deviation", periodTenkan: "Tenkan period", periodSenkouSpanB: "Senkou Span B period", periodATR: "ATR period", multiplierATR: "ATR multiplier", shortPeriod: "Short period", longPeriod: "Long period", signalPeriod: "Signal period", decimals: "Decimals", algorithm: "Algorithm", topBand: "Top band", bottomBand: "Bottom band", initialAccelerationFactor: "Initial acceleration factor", maxAccelerationFactor: "Max acceleration factor", increment: "Increment", multiplier: "Multiplier", ranges: "Ranges", highIndex: "High index", lowIndex: "Low index", deviation: "Deviation", xAxisUnit: "x-axis unit", factor: "Factor", fastAvgPeriod: "Fast average period", slowAvgPeriod: "Slow average period", average: "Average", indicatorAliases: { abands: ["Acceleration Bands"], bb: ["Bollinger Bands"], dema: ["Double Exponential Moving Average"], ema: ["Exponential Moving Average"], ikh: ["Ichimoku Kinko Hyo"], keltnerchannels: ["Keltner Channels"], linearRegression: ["Linear Regression"], pivotpoints: ["Pivot Points"], pc: ["Price Channel"], priceenvelopes: ["Price Envelopes"], psar: ["Parabolic SAR"], sma: ["Simple Moving Average"], supertrend: ["Super Trend"], tema: ["Triple Exponential Moving Average"], vbp: ["Volume by Price"], vwap: ["Volume Weighted Moving Average"], wma: ["Weighted Moving Average"], zigzag: ["Zig Zag"], apo: ["Absolute price indicator"], ad: ["Accumulation/Distribution"], aroon: ["Aroon"], aroonoscillator: ["Aroon oscillator"], atr: ["Average True Range"], ao: ["Awesome oscillator"], cci: ["Commodity Channel Index"], chaikin: ["Chaikin"], cmf: ["Chaikin Money Flow"], cmo: ["Chande Momentum Oscillator"], disparityindex: ["Disparity Index"], dmi: ["Directional Movement Index"], dpo: ["Detrended price oscillator"], klinger: ["Klinger Oscillator"], linearRegressionAngle: ["Linear Regression Angle"], linearRegressionIntercept: ["Linear Regression Intercept"], linearRegressionSlope: ["Linear Regression Slope"], macd: ["Moving Average Convergence Divergence"], mfi: ["Money Flow Index"], momentum: ["Momentum"], natr: ["Normalized Average True Range"], obv: ["On-Balance Volume"], ppo: ["Percentage Price oscillator"], roc: ["Rate of Change"], rsi: ["Relative Strength Index"], slowstochastic: ["Slow Stochastic"], stochastic: ["Stochastic"], trix: ["TRIX"], williamsr: ["Williams %R"] } } } }, stockTools: { gui: { enabled: true, className: "highcharts-bindings-wrapper", toolbarClassName: "stocktools-toolbar", buttons: ["indicators", "separator", "simpleShapes", "lines", "crookedLines", "measure", "advanced", "toggleAnnotations", "separator", "verticalLabels", "flags", "separator", "zoomChange", "fullScreen", "typeChange", "separator", "currentPriceIndicator", "saveChart"], definitions: { separator: { elementType: "span", symbol: "separator.svg" }, simpleShapes: { items: ["label", "circle", "ellipse", "rectangle"], circle: { symbol: "circle.svg" }, ellipse: { symbol: "ellipse.svg" }, rectangle: { symbol: "rectangle.svg" }, label: { symbol: "label.svg" } }, flags: { items: ["flagCirclepin", "flagDiamondpin", "flagSquarepin", "flagSimplepin"], flagSimplepin: { symbol: "flag-basic.svg" }, flagDiamondpin: { symbol: "flag-diamond.svg" }, flagSquarepin: { symbol: "flag-trapeze.svg" }, flagCirclepin: { symbol: "flag-elipse.svg" } }, lines: { items: ["segment", "arrowSegment", "ray", "arrowRay", "line", "arrowInfinityLine", "horizontalLine", "verticalLine"], segment: { symbol: "segment.svg" }, arrowSegment: { symbol: "arrow-segment.svg" }, ray: { symbol: "ray.svg" }, arrowRay: { symbol: "arrow-ray.svg" }, line: { symbol: "line.svg" }, arrowInfinityLine: { symbol: "arrow-line.svg" }, verticalLine: { symbol: "vertical-line.svg" }, horizontalLine: { symbol: "horizontal-line.svg" } }, crookedLines: { items: ["elliott3", "elliott5", "crooked3", "crooked5"], crooked3: { symbol: "crooked-3.svg" }, crooked5: { symbol: "crooked-5.svg" }, elliott3: { symbol: "elliott-3.svg" }, elliott5: { symbol: "elliott-5.svg" } }, verticalLabels: { items: ["verticalCounter", "verticalLabel", "verticalArrow"], verticalCounter: { symbol: "vertical-counter.svg" }, verticalLabel: { symbol: "vertical-label.svg" }, verticalArrow: { symbol: "vertical-arrow.svg" } }, advanced: { items: ["fibonacci", "fibonacciTimeZones", "pitchfork", "parallelChannel", "timeCycles"], pitchfork: { symbol: "pitchfork.svg" }, fibonacci: { symbol: "fibonacci.svg" }, fibonacciTimeZones: { symbol: "fibonacci-timezone.svg" }, parallelChannel: { symbol: "parallel-channel.svg" }, timeCycles: { symbol: "time-cycles.svg" } }, measure: { items: ["measureXY", "measureX", "measureY"], measureX: { symbol: "measure-x.svg" }, measureY: { symbol: "measure-y.svg" }, measureXY: { symbol: "measure-xy.svg" } }, toggleAnnotations: { symbol: "annotations-visible.svg" }, currentPriceIndicator: { symbol: "current-price-show.svg" }, indicators: { symbol: "indicators.svg" }, zoomChange: { items: ["zoomX", "zoomY", "zoomXY"], zoomX: { symbol: "zoom-x.svg" }, zoomY: { symbol: "zoom-y.svg" }, zoomXY: { symbol: "zoom-xy.svg" } }, typeChange: { items: ["typeOHLC", "typeLine", "typeCandlestick", "typeHollowCandlestick", "typeHLC", "typeHeikinAshi"], typeOHLC: { symbol: "series-ohlc.svg" }, typeLine: { symbol: "series-line.svg" }, typeCandlestick: { symbol: "series-candlestick.svg" }, typeHLC: { symbol: "series-hlc.svg" }, typeHeikinAshi: { symbol: "series-heikin-ashi.svg" }, typeHollowCandlestick: { symbol: "series-hollow-candlestick.svg" } }, fullScreen: { symbol: "fullscreen.svg" }, saveChart: { symbol: "save-chart.svg" } }, visible: true } } };
      }), e(i, "Stock/StockTools/StockTools.js", [i["Core/Defaults.js"], i["Extensions/Annotations/NavigationBindingsUtilities.js"], i["Stock/StockTools/StockToolsBindings.js"], i["Stock/StockTools/StockToolsDefaults.js"], i["Stock/StockTools/StockToolsUtilities.js"], i["Core/Utilities.js"]], function(t2, i2, e2, s, n, o) {
        let { setOptions: a } = t2, { getAssignedAxis: r } = i2, { isNotNavigatorYAxis: l, isPriceIndicatorEnabled: c } = n, { correctFloat: h, defined: p, isNumber: d, pick: g } = o;
        function u(t3, i3, e3, s2) {
          let n2 = 0, o2, a2, r2;
          function l2(t4) {
            return p(t4) && !d(t4) && t4.match("%");
          }
          return s2 && (r2 = h(parseFloat(s2.top) / 100), a2 = h(parseFloat(s2.height) / 100)), { positions: t3.map((s3, c2) => {
            let p2 = h(l2(s3.options.height) ? parseFloat(s3.options.height) / 100 : s3.height / i3), g2 = h(l2(s3.options.top) ? parseFloat(s3.options.top) / 100 : (s3.top - s3.chart.plotTop) / i3);
            return a2 ? (g2 > r2 && (g2 -= a2), n2 = Math.max(n2, (g2 || 0) + (p2 || 0))) : (d(p2) || (p2 = t3[c2 - 1].series.every((t4) => t4.is("sma")) ? o2 : e3 / 100), d(g2) || (g2 = n2), o2 = p2, n2 = h(Math.max(n2, (g2 || 0) + (p2 || 0)))), { height: 100 * p2, top: 100 * g2 };
          }), allAxesHeight: n2 };
        }
        function m(t3) {
          let i3 = [];
          return t3.forEach(function(e3, s2) {
            let n2 = t3[s2 + 1];
            n2 ? i3[s2] = { enabled: true, controlledAxis: { next: [g(n2.options.id, n2.index)] } } : i3[s2] = { enabled: false };
          }), i3;
        }
        function y(t3, i3, e3, s2) {
          return t3.forEach(function(n2, o2) {
            let a2 = t3[o2 - 1];
            n2.top = a2 ? h(a2.height + a2.top) : 0, e3 && (n2.height = h(n2.height + s2 * i3));
          }), t3;
        }
        function f(t3) {
          let i3 = this.chart, e3 = i3.yAxis.filter(l), s2 = i3.plotHeight, { positions: n2, allAxesHeight: o2 } = this.getYAxisPositions(e3, s2, 20, t3), a2 = this.getYAxisResizers(e3);
          !t3 && o2 <= h(1) ? n2[n2.length - 1] = { height: 20, top: h(100 * o2 - 20) } : n2.forEach(function(t4) {
            t4.height = t4.height / (100 * o2) * 100, t4.top = t4.top / (100 * o2) * 100;
          }), n2.forEach(function(t4, i4) {
            e3[i4].update({ height: t4.height + "%", top: t4.top + "%", resize: a2[i4], offset: 0 }, false);
          });
        }
        return { compose: function(t3) {
          var _a;
          let i3 = t3.prototype;
          ((_a = i3.utils) == null ? void 0 : _a.manageIndicators) || (i3.getYAxisPositions = u, i3.getYAxisResizers = m, i3.recalculateYAxisPositions = y, i3.resizeYAxes = f, i3.utils = i3.utils || {}, i3.utils.indicatorsWithAxes = n.indicatorsWithAxes, i3.utils.indicatorsWithVolume = n.indicatorsWithVolume, i3.utils.getAssignedAxis = r, i3.utils.isPriceIndicatorEnabled = c, i3.utils.manageIndicators = n.manageIndicators, a(s), a({ navigation: { bindings: e2 } }));
        } };
      }), e(i, "Stock/StockTools/StockToolbar.js", [i["Core/Utilities.js"], i["Core/Renderer/HTML/AST.js"], i["Stock/StockTools/StockToolsUtilities.js"]], function(t2, i2, e2) {
        let { addEvent: s, createElement: n, css: o, defined: a, fireEvent: r, getStyle: l, isArray: c, merge: h, pick: p } = t2, { shallowArraysEqual: d } = e2;
        class g {
          constructor(t3, i3, e3) {
            this.width = 0, this.isDirty = false, this.chart = e3, this.options = t3, this.lang = i3, this.iconsURL = this.getIconsURL(), this.guiEnabled = t3.enabled, this.visible = p(t3.visible, true), this.guiClassName = t3.className, this.toolbarClassName = t3.toolbarClassName, this.eventsToUnbind = [], this.guiEnabled && (this.createContainer(), this.createButtons(), this.showHideNavigation()), r(this, "afterInit");
          }
          createButtons() {
            let t3 = this.lang, i3 = this.options, e3 = this.toolbar, n2 = i3.buttons, o2 = i3.definitions, a2 = e3.childNodes;
            this.buttonList = n2, n2.forEach((i4) => {
              let n3 = this.addButton(e3, o2, i4, t3);
              this.eventsToUnbind.push(s(n3.buttonWrapper, "click", () => this.eraseActiveButtons(a2, n3.buttonWrapper))), c(o2[i4].items) && this.addSubmenu(n3, o2[i4]);
            });
          }
          addSubmenu(t3, i3) {
            let e3 = t3.submenuArrow, a2 = t3.buttonWrapper, r2 = l(a2, "width"), c2 = this.wrapper, h2 = this.listWrapper, p2 = this.toolbar.childNodes, d2 = this.submenu = n("ul", { className: "highcharts-submenu-wrapper" }, void 0, a2);
            this.addSubmenuItems(a2, i3), this.eventsToUnbind.push(s(e3, "click", (t4) => {
              if (t4.stopPropagation(), this.eraseActiveButtons(p2, a2), a2.className.indexOf("highcharts-current") >= 0) h2.style.width = h2.startWidth + "px", a2.classList.remove("highcharts-current"), d2.style.display = "none";
              else {
                d2.style.display = "block";
                let t5 = d2.offsetHeight - a2.offsetHeight - 3;
                d2.offsetHeight + a2.offsetTop > c2.offsetHeight && a2.offsetTop > t5 || (t5 = 0), o(d2, { top: -t5 + "px", left: r2 + 3 + "px" }), a2.className += " highcharts-current", h2.startWidth = c2.offsetWidth, h2.style.width = h2.startWidth + l(h2, "padding-left") + d2.offsetWidth + 3 + "px";
              }
            }));
          }
          addSubmenuItems(t3, i3) {
            let e3;
            let n2 = this, o2 = this.submenu, a2 = this.lang, r2 = this.listWrapper;
            i3.items.forEach((l3) => {
              e3 = this.addButton(o2, i3, l3, a2), this.eventsToUnbind.push(s(e3.mainButton, "click", function() {
                n2.switchSymbol(this, t3, true), r2.style.width = r2.startWidth + "px", o2.style.display = "none";
              }));
            });
            let l2 = o2.querySelectorAll("li > .highcharts-menu-item-btn")[0];
            this.switchSymbol(l2, false);
          }
          eraseActiveButtons(t3, i3, e3) {
            [].forEach.call(t3, (t4) => {
              t4 !== i3 && (t4.classList.remove("highcharts-current"), t4.classList.remove("highcharts-active"), (e3 = t4.querySelectorAll(".highcharts-submenu-wrapper")).length > 0 && (e3[0].style.display = "none"));
            });
          }
          addButton(t3, i3, e3, s2 = {}) {
            let o2 = i3[e3], a2 = o2.items, r2 = g.prototype.classMapping, l2 = o2.className || "", c2 = n("li", { className: p(r2[e3], "") + " " + l2, title: s2[e3] || e3 }, void 0, t3), h2 = n(o2.elementType || "button", { className: "highcharts-menu-item-btn" }, void 0, c2);
            if (a2 && a2.length) {
              let t4 = n("button", { className: "highcharts-submenu-item-arrow highcharts-arrow-right" }, void 0, c2);
              return t4.style.backgroundImage = "url(" + this.iconsURL + "arrow-bottom.svg)", { buttonWrapper: c2, mainButton: h2, submenuArrow: t4 };
            }
            return h2.style.backgroundImage = "url(" + this.iconsURL + o2.symbol + ")", { buttonWrapper: c2, mainButton: h2 };
          }
          addNavigation() {
            let t3 = this.wrapper;
            this.arrowWrapper = n("div", { className: "highcharts-arrow-wrapper" }), this.arrowUp = n("div", { className: "highcharts-arrow-up" }, void 0, this.arrowWrapper), this.arrowUp.style.backgroundImage = "url(" + this.iconsURL + "arrow-right.svg)", this.arrowDown = n("div", { className: "highcharts-arrow-down" }, void 0, this.arrowWrapper), this.arrowDown.style.backgroundImage = "url(" + this.iconsURL + "arrow-right.svg)", t3.insertBefore(this.arrowWrapper, t3.childNodes[0]), this.scrollButtons();
          }
          scrollButtons() {
            let t3 = this.wrapper, i3 = this.toolbar, e3 = 0.1 * t3.offsetHeight, n2 = 0;
            this.eventsToUnbind.push(s(this.arrowUp, "click", () => {
              n2 > 0 && (n2 -= e3, i3.style.marginTop = -n2 + "px");
            })), this.eventsToUnbind.push(s(this.arrowDown, "click", () => {
              t3.offsetHeight + n2 <= i3.offsetHeight + e3 && (n2 += e3, i3.style.marginTop = -n2 + "px");
            }));
          }
          createContainer() {
            let t3, i3;
            let e3 = this.chart, o2 = this.options, a2 = e3.container, r2 = e3.options.navigation, l2 = r2 == null ? void 0 : r2.bindingsClassName, c2 = this, h2 = this.wrapper = n("div", { className: "highcharts-stocktools-wrapper " + o2.className + " " + l2 });
            a2.appendChild(h2), this.showHideBtn = n("div", { className: "highcharts-toggle-toolbar highcharts-arrow-left" }, void 0, h2), this.eventsToUnbind.push(s(this.showHideBtn, "click", () => {
              this.update({ gui: { visible: !c2.visible } });
            })), ["mousedown", "mousemove", "click", "touchstart"].forEach((t4) => {
              s(h2, t4, (t5) => t5.stopPropagation());
            }), s(h2, "mouseover", (t4) => {
              var _a;
              return (_a = e3.pointer) == null ? void 0 : _a.onContainerMouseLeave(t4);
            }), this.toolbar = i3 = n("ul", { className: "highcharts-stocktools-toolbar " + o2.toolbarClassName }), this.listWrapper = t3 = n("div", { className: "highcharts-menu-wrapper" }), h2.insertBefore(t3, h2.childNodes[0]), t3.insertBefore(i3, t3.childNodes[0]), this.showHideToolbar(), this.addNavigation();
          }
          showHideNavigation() {
            this.visible && this.toolbar.offsetHeight > this.wrapper.offsetHeight - 50 ? this.arrowWrapper.style.display = "block" : (this.toolbar.style.marginTop = "0px", this.arrowWrapper.style.display = "none");
          }
          showHideToolbar() {
            let t3 = this.wrapper, i3 = this.listWrapper, e3 = this.submenu, s2 = this.showHideBtn, n2 = this.visible;
            s2.style.backgroundImage = "url(" + this.iconsURL + "arrow-right.svg)", n2 ? (t3.style.height = "100%", i3.classList.remove("highcharts-hide"), s2.classList.remove("highcharts-arrow-right"), s2.style.top = l(i3, "padding-top") + "px", s2.style.left = t3.offsetWidth + l(i3, "padding-left") + "px") : (e3 && (e3.style.display = "none"), s2.style.left = "0px", n2 = this.visible = false, i3.classList.add("highcharts-hide"), s2.classList.add("highcharts-arrow-right"), t3.style.height = s2.offsetHeight + "px");
          }
          switchSymbol(t3, i3) {
            let e3 = t3.parentNode, s2 = e3.className, n2 = e3.parentNode.parentNode;
            !(s2.indexOf("highcharts-disabled-btn") > -1) && (n2.className = "", s2 && n2.classList.add(s2.trim()), n2.querySelectorAll(".highcharts-menu-item-btn")[0].style.backgroundImage = t3.style.backgroundImage, i3 && this.toggleButtonActiveClass(n2));
          }
          toggleButtonActiveClass(t3) {
            let i3 = t3.classList;
            i3.contains("highcharts-active") ? i3.remove("highcharts-active") : i3.add("highcharts-active");
          }
          unselectAllButtons(t3) {
            let i3 = t3.parentNode.querySelectorAll(".highcharts-active");
            [].forEach.call(i3, (i4) => {
              i4 !== t3 && i4.classList.remove("highcharts-active");
            });
          }
          update(t3, i3) {
            this.isDirty = !!t3.gui.definitions, h(true, this.chart.options.stockTools, t3), h(true, this.options, t3.gui), this.visible = p(this.options.visible && this.options.enabled, true), this.chart.navigationBindings && this.chart.navigationBindings.update(), this.chart.isDirtyBox = true, p(i3, true) && this.chart.redraw();
          }
          destroy() {
            let t3 = this.wrapper, i3 = t3 && t3.parentNode;
            this.eventsToUnbind.forEach((t4) => t4()), i3 && i3.removeChild(t3);
          }
          redraw() {
            if (this.options.enabled !== this.guiEnabled) this.handleGuiEnabledChange();
            else {
              if (!this.guiEnabled) return;
              this.updateClassNames(), this.updateButtons(), this.updateVisibility(), this.showHideNavigation(), this.showHideToolbar();
            }
          }
          handleGuiEnabledChange() {
            false === this.options.enabled && (this.destroy(), this.visible = false), true === this.options.enabled && (this.createContainer(), this.createButtons()), this.guiEnabled = this.options.enabled;
          }
          updateClassNames() {
            this.options.className !== this.guiClassName && (this.guiClassName && this.wrapper.classList.remove(this.guiClassName), this.options.className && this.wrapper.classList.add(this.options.className), this.guiClassName = this.options.className), this.options.toolbarClassName !== this.toolbarClassName && (this.toolbarClassName && this.toolbar.classList.remove(this.toolbarClassName), this.options.toolbarClassName && this.toolbar.classList.add(this.options.toolbarClassName), this.toolbarClassName = this.options.toolbarClassName);
          }
          updateButtons() {
            (!d(this.options.buttons, this.buttonList) || this.isDirty) && (this.toolbar.innerHTML = i2.emptyHTML, this.createButtons());
          }
          updateVisibility() {
            a(this.options.visible) && (this.visible = this.options.visible);
          }
          getIconsURL() {
            return this.chart.options.navigation.iconsURL || this.options.iconsURL || "https://code.highcharts.com/11.4.7/gfx/stock-icons/";
          }
        }
        return g.prototype.classMapping = { circle: "highcharts-circle-annotation", ellipse: "highcharts-ellipse-annotation", rectangle: "highcharts-rectangle-annotation", label: "highcharts-label-annotation", segment: "highcharts-segment", arrowSegment: "highcharts-arrow-segment", ray: "highcharts-ray", arrowRay: "highcharts-arrow-ray", line: "highcharts-infinity-line", arrowInfinityLine: "highcharts-arrow-infinity-line", verticalLine: "highcharts-vertical-line", horizontalLine: "highcharts-horizontal-line", crooked3: "highcharts-crooked3", crooked5: "highcharts-crooked5", elliott3: "highcharts-elliott3", elliott5: "highcharts-elliott5", pitchfork: "highcharts-pitchfork", fibonacci: "highcharts-fibonacci", fibonacciTimeZones: "highcharts-fibonacci-time-zones", parallelChannel: "highcharts-parallel-channel", measureX: "highcharts-measure-x", measureY: "highcharts-measure-y", measureXY: "highcharts-measure-xy", timeCycles: "highcharts-time-cycles", verticalCounter: "highcharts-vertical-counter", verticalLabel: "highcharts-vertical-label", verticalArrow: "highcharts-vertical-arrow", currentPriceIndicator: "highcharts-current-price-indicator", indicators: "highcharts-indicators", flagCirclepin: "highcharts-flag-circlepin", flagDiamondpin: "highcharts-flag-diamondpin", flagSquarepin: "highcharts-flag-squarepin", flagSimplepin: "highcharts-flag-simplepin", zoomX: "highcharts-zoom-x", zoomY: "highcharts-zoom-y", zoomXY: "highcharts-zoom-xy", typeLine: "highcharts-series-type-line", typeOHLC: "highcharts-series-type-ohlc", typeHLC: "highcharts-series-type-hlc", typeCandlestick: "highcharts-series-type-candlestick", typeHollowCandlestick: "highcharts-series-type-hollowcandlestick", typeHeikinAshi: "highcharts-series-type-heikinashi", fullScreen: "highcharts-full-screen", toggleAnnotations: "highcharts-toggle-annotations", saveChart: "highcharts-save-chart", separator: "highcharts-separator" }, g;
      }), e(i, "Stock/StockTools/StockToolsGui.js", [i["Core/Defaults.js"], i["Stock/StockTools/StockToolsDefaults.js"], i["Stock/StockTools/StockToolbar.js"], i["Core/Utilities.js"]], function(t2, i2, e2, s) {
        let { setOptions: n } = t2, { addEvent: o, getStyle: a, merge: r, pick: l } = s;
        function c(t3) {
          let i3 = this.options, s2 = i3.lang, n2 = r(i3.stockTools && i3.stockTools.gui, t3 && t3.gui), o2 = s2 && s2.stockTools && s2.stockTools.gui;
          this.stockTools = new e2(n2, o2, this), this.stockTools.guiEnabled && (this.isDirtyBox = true);
        }
        function h() {
          this.setStockTools();
        }
        function p() {
          this.stockTools && (this.stockTools.redraw(), function(t3) {
            var _a;
            if ((_a = t3.stockTools) == null ? void 0 : _a.guiEnabled) {
              let i3 = t3.options.chart, e3 = t3.stockTools.listWrapper, s2 = e3 && (e3.startWidth + a(e3, "padding-left") + a(e3, "padding-right") || e3.offsetWidth);
              t3.stockTools.width = s2;
              let n2 = false;
              if (s2 < t3.plotWidth) {
                let e4 = l(i3.spacingLeft, i3.spacing && i3.spacing[3], 0) + s2, o2 = e4 - t3.spacingBox.x;
                t3.spacingBox.x = e4, t3.spacingBox.width -= o2, n2 = true;
              } else 0 === s2 && (n2 = true);
              s2 !== t3.stockTools.prevOffsetWidth && (t3.stockTools.prevOffsetWidth = s2, n2 && (t3.isDirtyLegend = true));
            }
          }(this));
        }
        function d() {
          this.stockTools && this.stockTools.destroy();
        }
        function g() {
          var _a;
          let t3 = ((_a = this.stockTools) == null ? void 0 : _a.visible) && this.stockTools.guiEnabled ? this.stockTools.width : 0;
          t3 && t3 < this.plotWidth && (this.plotLeft += t3, this.spacing[3] += t3);
        }
        function u() {
          var _a, _b;
          let t3 = this.stockTools, i3 = t3 && t3.toolbar && t3.toolbar.querySelector(".highcharts-current-price-indicator");
          t3 && this.navigationBindings && this.options.series && i3 && (((_b = (_a = this.navigationBindings.utils) == null ? void 0 : _a.isPriceIndicatorEnabled) == null ? void 0 : _b.call(_a, this.series)) ? i3.firstChild.style["background-image"] = 'url("' + t3.getIconsURL() + 'current-price-hide.svg")' : i3.firstChild.style["background-image"] = 'url("' + t3.getIconsURL() + 'current-price-show.svg")');
        }
        function m(t3) {
          let i3 = this.chart.stockTools;
          if (i3 && i3.guiEnabled) {
            let i4 = t3.button;
            i4.parentNode.className.indexOf("highcharts-submenu-wrapper") >= 0 && (i4 = i4.parentNode.parentNode), i4.classList.remove("highcharts-active");
          }
        }
        function y(t3) {
          let i3 = this.chart.stockTools;
          if (i3 && i3.guiEnabled) {
            let e3 = t3.button;
            i3.unselectAllButtons(t3.button), e3.parentNode.className.indexOf("highcharts-submenu-wrapper") >= 0 && (e3 = e3.parentNode.parentNode), i3.toggleButtonActiveClass(e3);
          }
        }
        return { compose: function(t3, e3) {
          let s2 = t3.prototype;
          s2.setStockTools || (o(t3, "afterGetContainer", h), o(t3, "beforeRedraw", p), o(t3, "beforeRender", p), o(t3, "destroy", d), o(t3, "getMargins", g, { order: 0 }), o(t3, "render", u), s2.setStockTools = c, o(e3, "deselectButton", m), o(e3, "selectButton", y), n(i2));
        } };
      }), e(i, "masters/modules/stock-tools.src.js", [i["Core/Globals.js"], i["Extensions/Annotations/NavigationBindings.js"], i["Stock/StockTools/StockTools.js"], i["Stock/StockTools/StockToolsGui.js"], i["Stock/StockTools/StockToolbar.js"]], function(t2, i2, e2, s, n) {
        return t2.NavigationBindings = t2.NavigationBindings || i2, t2.Toolbar = n, e2.compose(t2.NavigationBindings), s.compose(t2.Chart, t2.NavigationBindings), t2;
      });
    });
  }
});
export default require_stock_tools();
//# sourceMappingURL=highcharts_modules_stock-tools__js.js.map
