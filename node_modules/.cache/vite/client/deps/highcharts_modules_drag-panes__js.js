import {
  __commonJS
} from "./chunk-HKJ2B2AA.js";

// node_modules/highcharts/modules/drag-panes.js
var require_drag_panes = __commonJS({
  "node_modules/highcharts/modules/drag-panes.js"(exports, module) {
    !/**
    * Highstock JS v11.4.7 (2024-08-14)
    *
    * Drag-panes module
    *
    * (c) 2010-2024 Highsoft AS
    * Author: Kacper Madej
    *
    * License: www.highcharts.com/license
    */
    function(e) {
      "object" == typeof module && module.exports ? (e.default = e, module.exports = e) : "function" == typeof define && define.amd ? define("highcharts/modules/drag-panes", ["highcharts", "highcharts/modules/stock"], function(t) {
        return e(t), e.Highcharts = t, e;
      }) : e("undefined" != typeof Highcharts ? Highcharts : void 0);
    }(function(e) {
      "use strict";
      var t = e ? e._modules : {};
      function s(t2, s2, i, o) {
        t2.hasOwnProperty(s2) || (t2[s2] = o.apply(null, i), "function" == typeof CustomEvent && e.win.dispatchEvent(new CustomEvent("HighchartsModuleLoaded", { detail: { path: s2, module: t2[s2] } })));
      }
      s(t, "Extensions/DragPanes/AxisResizerDefaults.js", [], function() {
        return { minLength: "10%", maxLength: "100%", resize: { controlledAxis: { next: [], prev: [] }, enabled: false, cursor: "ns-resize", lineColor: "#cccccc", lineDashStyle: "Solid", lineWidth: 4, x: 0, y: 0 } };
      }), s(t, "Extensions/DragPanes/AxisResizer.js", [t["Extensions/DragPanes/AxisResizerDefaults.js"], t["Core/Utilities.js"]], function(e2, t2) {
        let { addEvent: s2, clamp: i, isNumber: o, relativeLength: n } = t2;
        class r {
          constructor(e3) {
            this.init(e3);
          }
          init(e3, t3) {
            this.axis = e3, this.options = e3.options.resize || {}, this.render(), t3 || this.addMouseEvents();
          }
          render() {
            let e3 = this.axis, t3 = e3.chart, s3 = this.options, o2 = s3.x || 0, n2 = s3.y, r2 = i(e3.top + e3.height + n2, t3.plotTop, t3.plotTop + t3.plotHeight), a = {};
            t3.styledMode || (a = { cursor: s3.cursor, stroke: s3.lineColor, "stroke-width": s3.lineWidth, dashstyle: s3.lineDashStyle }), this.lastPos = r2 - n2, this.controlLine || (this.controlLine = t3.renderer.path().addClass("highcharts-axis-resizer")), this.controlLine.add(e3.axisGroup);
            let h = t3.styledMode ? this.controlLine.strokeWidth() : s3.lineWidth;
            a.d = t3.renderer.crispLine([["M", e3.left + o2, r2], ["L", e3.left + e3.width + o2, r2]], h), this.controlLine.attr(a);
          }
          addMouseEvents() {
            let e3, t3, i2;
            let o2 = this, n2 = o2.controlLine.element, r2 = o2.axis.chart.container, a = [];
            o2.mouseMoveHandler = e3 = (e4) => o2.onMouseMove(e4), o2.mouseUpHandler = t3 = (e4) => o2.onMouseUp(e4), o2.mouseDownHandler = i2 = () => o2.onMouseDown(), a.push(s2(r2, "mousemove", e3), s2(r2.ownerDocument, "mouseup", t3), s2(n2, "mousedown", i2), s2(r2, "touchmove", e3), s2(r2.ownerDocument, "touchend", t3), s2(n2, "touchstart", i2)), o2.eventsToUnbind = a;
          }
          onMouseMove(e3) {
            if (!e3.touches || 0 !== e3.touches[0].pageX) {
              let t3 = this.axis.chart.pointer;
              this.grabbed && t3 && (this.hasDragged = true, this.updateAxes(t3.normalize(e3).chartY - (this.options.y || 0)));
            }
          }
          onMouseUp(e3) {
            let t3 = this.axis.chart.pointer;
            this.hasDragged && t3 && this.updateAxes(t3.normalize(e3).chartY - (this.options.y || 0)), this.grabbed = this.hasDragged = this.axis.chart.activeResizer = void 0;
          }
          onMouseDown() {
            var _a;
            (_a = this.axis.chart.pointer) == null ? void 0 : _a.reset(false, 0), this.grabbed = this.axis.chart.activeResizer = true;
          }
          updateAxes(e3) {
            let t3 = this.axis.chart, s3 = this.options.controlledAxis, r2 = 0 === s3.next.length ? [t3.yAxis.indexOf(this.axis) + 1] : s3.next, a = [this.axis].concat(s3.prev), h = [], l = t3.plotTop, c = t3.plotHeight, d = l + c, u = (e4) => 100 * e4 / c + "%", p = (e4, t4, s4) => Math.round(i(e4, t4, s4));
            e3 = i(e3, l, d);
            let x = false, f = e3 - this.lastPos;
            if (f * f < 1) return;
            let g = true;
            for (let s4 of [a, r2]) for (let i2 of s4) {
              let s5, r3;
              let a2 = o(i2) ? t3.yAxis[i2] : g ? i2 : t3.get(i2), m = a2 && a2.options, y = {};
              if (!m || m.isInternal) {
                g = false;
                continue;
              }
              r3 = a2.top;
              let z = Math.round(n(m.minLength || NaN, c)), v = Math.round(n(m.maxLength || NaN, c));
              if (g) (s5 = p(e3 - r3, z, v)) === v && (x = true), e3 = r3 + s5, h.push({ axis: a2, options: { height: u(s5) } });
              else {
                if (f = e3 - this.lastPos, s5 = p(a2.len - f, z, v), (r3 = a2.top + f) + s5 > d) {
                  let t4 = d - s5 - r3;
                  e3 += t4, r3 += t4;
                }
                r3 < l && (r3 = l) + s5 > d && (s5 = c), s5 === z && (x = true), h.push({ axis: a2, options: { top: u(r3 - l), height: u(s5) } });
              }
              g = false, y.height = s5;
            }
            if (!x) {
              for (let e4 of h) e4.axis.update(e4.options, false);
              t3.redraw(false);
            }
          }
          destroy() {
            let e3 = this.axis;
            for (let t3 of (delete e3.resizer, this.eventsToUnbind && this.eventsToUnbind.forEach((e4) => e4()), this.controlLine.destroy(), Object.keys(this))) this[t3] = null;
          }
        }
        return r.resizerOptions = e2, r;
      }), s(t, "Extensions/DragPanes/DragPanes.js", [t["Extensions/DragPanes/AxisResizer.js"], t["Core/Defaults.js"], t["Core/Utilities.js"]], function(e2, t2, s2) {
        let { defaultOptions: i } = t2, { addEvent: o, merge: n, wrap: r } = s2;
        function a() {
          let t3 = this.resizer, s3 = this.options.resize;
          if (s3) {
            let i2 = false !== s3.enabled;
            t3 ? i2 ? t3.init(this, true) : t3.destroy() : i2 && (this.resizer = new e2(this));
          }
        }
        function h(e3) {
          !e3.keepEvents && this.resizer && this.resizer.destroy();
        }
        function l(e3) {
          this.chart.activeResizer || e3.apply(this, [].slice.call(arguments, 1));
        }
        function c(e3) {
          this.chart.activeResizer || e3.apply(this, [].slice.call(arguments, 1));
        }
        return { compose: function(t3, s3) {
          t3.keepProps.includes("resizer") || (n(true, i.yAxis, e2.resizerOptions), t3.keepProps.push("resizer"), o(t3, "afterRender", a), o(t3, "destroy", h), r(s3.prototype, "runPointActions", c), r(s3.prototype, "drag", l));
        } };
      }), s(t, "masters/modules/drag-panes.src.js", [t["Core/Globals.js"], t["Extensions/DragPanes/AxisResizer.js"], t["Extensions/DragPanes/DragPanes.js"]], function(e2, t2, s2) {
        return e2.AxisResizer = t2, s2.compose(e2.Axis, e2.Pointer), e2;
      });
    });
  }
});
export default require_drag_panes();
//# sourceMappingURL=highcharts_modules_drag-panes__js.js.map
