{"version":3,"file":"svg.js","sources":["../../src/utils/svg.ts"],"sourcesContent":["import { TransformValues } from 'types/svg'\nimport striptags from 'striptags'\n\nimport { allowedSvgTextTags } from './text'\n\nexport const allowedSvgTags = [\n  'svg', 'g', 'path', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon',\n  'defs', 'clipPath', 'use', 'symbol', 'image', 'marker', 'style', 'mask',\n  ...allowedSvgTextTags,\n]\n\nexport function getTransformValues (svgElement: SVGElement): TransformValues {\n  // Get the transform attribute value from the SVG element\n  const transformAttribute = svgElement.getAttribute('transform')\n\n  // Regular expressions to extract translate and scale values from the transform attribute\n  const translateRegex = /translate\\(\\s*(-?[\\d.]+)\\s*,?\\s*(-?[\\d.]+)?\\s*\\)/\n  const scaleRegex = /scale\\(\\s*(-?[\\d.]+)\\s*,?\\s*(-?[\\d.]+)?\\s*\\)/\n\n  // Initialize default values\n  const transformValues: TransformValues = {\n    translate: { x: 0, y: 0 },\n    scale: { x: 1, y: 1 },\n  }\n\n  if (transformAttribute) {\n    // Extract translate values\n    const translateMatches = transformAttribute.match(translateRegex)\n    if (translateMatches) {\n      transformValues.translate.x = parseFloat(translateMatches[1])\n      transformValues.translate.y = translateMatches[2] ? parseFloat(translateMatches[2]) : 0\n    }\n\n    // Extract scale values\n    const scaleMatches = transformAttribute.match(scaleRegex)\n    if (scaleMatches) {\n      transformValues.scale.x = parseFloat(scaleMatches[1])\n      transformValues.scale.y = scaleMatches[2] ? parseFloat(scaleMatches[2]) : transformValues.scale.x\n    }\n  }\n\n  return transformValues\n}\n\nexport function transformValuesToString (transformValues: TransformValues): string {\n  const translateString = `translate(${transformValues.translate.x} ${transformValues.translate.y})`\n\n  // Only include scaleString when both scale values are not 1\n  const shouldIncludeScaleString = transformValues.scale.x !== 1 || transformValues.scale.y !== 1\n  const scaleString = shouldIncludeScaleString ? `scale(${transformValues.scale.x} ${transformValues.scale.y})` : ''\n\n  // Combine the translate and scale strings into a single transform attribute string\n  const transformString = scaleString\n    ? `${translateString} ${scaleString}`\n    : translateString\n\n  return transformString\n}\n\nexport function sanitizeSvgString (svgString: string, allowedTags = allowedSvgTags): string {\n  return striptags(svgString, allowedTags)\n}\n\n\nexport function isStringSvg (input: string): boolean {\n  /* Since a general-purpose regex for this can be complex and potentially vulnerable\n  * to ReDoS attacks, we'll create a simpler, safer regex that looks for a few common\n  * SVG elements or attributes.\n  */\n  const svgElementsRegex = new RegExp(`<(${allowedSvgTags.join('|')})\\\\b`, 'i')\n  const svgAttributesRegex = /\\b(d|fill|stroke|transform|viewBox)=/i\n\n  return svgElementsRegex.test(input) || svgAttributesRegex.test(input)\n}\n"],"names":[],"mappings":"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"}