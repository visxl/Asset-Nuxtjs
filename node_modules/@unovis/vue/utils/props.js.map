{"version":3,"file":"props.js","sources":["../../src/utils/props.ts"],"sourcesContent":["import { isEqual } from '@unovis/ts'\nimport { ComponentInternalInstance, camelize, computed, getCurrentInstance } from 'vue'\n\nexport function arePropsEqual<PropTypes> (prevProps: PropTypes, nextProps: PropTypes): boolean {\n  return isEqual(prevProps, nextProps)\n}\n\n// source: https://www.radix-vue.com/utilities/use-forward-props.html\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type\nexport function useForwardProps<T extends Record<string, any>> (props: T) {\n  const vm = getCurrentInstance()\n  const attrs = vm.attrs\n\n  return computed(() => {\n    const preservedProps = {} as T\n    const assignedProps = vm?.vnode.props ?? {}\n\n    Object.keys(assignedProps).forEach((key) => {\n      preservedProps[camelize(key) as keyof T] = props[camelize(key)]\n    })\n    return { ...preservedProps, ...attrs }\n  })\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type\nexport function parseProps <T extends object> (props: T, instance: ComponentInternalInstance | null) {\n  const preservedProps = {} as T\n  const assignedProps = instance?.vnode.props ?? {}\n\n  Object.keys(assignedProps).forEach(key => {\n    preservedProps[camelize(key)] = assignedProps[key]\n  })\n  return preservedProps\n}\n\n"],"names":["arePropsEqual","prevProps","nextProps","isEqual","useForwardProps","props","vm","getCurrentInstance","attrs","computed","preservedProps","assignedProps","key","camelize"],"mappings":";;AAGgB,SAAAA,EAA0BC,GAAsBC,GAA+B;AACtF,SAAAC,EAAQF,GAAWC,CAAS;AACrC;AAIO,SAASE,EAAgDC,GAAU;AACxE,QAAMC,IAAKC,KACLC,IAAQF,EAAG;AAEjB,SAAOG,EAAS,MAAM;AACpB,UAAMC,IAAiB,CAAA,GACjBC,KAAgBL,KAAA,gBAAAA,EAAI,MAAM,UAAS,CAAA;AAEzC,kBAAO,KAAKK,CAAa,EAAE,QAAQ,CAACC,MAAQ;AAC1C,MAAAF,EAAeG,EAASD,CAAG,CAAY,IAAIP,EAAMQ,EAASD,CAAG,CAAC;AAAA,IAAA,CAC/D,GACM,EAAE,GAAGF,GAAgB,GAAGF;EAAM,CACtC;AACH;"}