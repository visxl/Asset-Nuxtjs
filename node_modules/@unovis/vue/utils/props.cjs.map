{"version":3,"file":"props.cjs","sources":["../../src/utils/props.ts"],"sourcesContent":["import { isEqual } from '@unovis/ts'\nimport { ComponentInternalInstance, camelize, computed, getCurrentInstance } from 'vue'\n\nexport function arePropsEqual<PropTypes> (prevProps: PropTypes, nextProps: PropTypes): boolean {\n  return isEqual(prevProps, nextProps)\n}\n\n// source: https://www.radix-vue.com/utilities/use-forward-props.html\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type\nexport function useForwardProps<T extends Record<string, any>> (props: T) {\n  const vm = getCurrentInstance()\n  const attrs = vm.attrs\n\n  return computed(() => {\n    const preservedProps = {} as T\n    const assignedProps = vm?.vnode.props ?? {}\n\n    Object.keys(assignedProps).forEach((key) => {\n      preservedProps[camelize(key) as keyof T] = props[camelize(key)]\n    })\n    return { ...preservedProps, ...attrs }\n  })\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type\nexport function parseProps <T extends object> (props: T, instance: ComponentInternalInstance | null) {\n  const preservedProps = {} as T\n  const assignedProps = instance?.vnode.props ?? {}\n\n  Object.keys(assignedProps).forEach(key => {\n    preservedProps[camelize(key)] = assignedProps[key]\n  })\n  return preservedProps\n}\n\n"],"names":["arePropsEqual","prevProps","nextProps","isEqual","useForwardProps","props","vm","getCurrentInstance","attrs","computed","preservedProps","assignedProps","key","camelize"],"mappings":"+HAGgB,SAAAA,EAA0BC,EAAsBC,EAA+B,CACtF,OAAAC,EAAA,QAAQF,EAAWC,CAAS,CACrC,CAIO,SAASE,EAAgDC,EAAU,CACxE,MAAMC,EAAKC,EAAAA,qBACLC,EAAQF,EAAG,MAEjB,OAAOG,WAAS,IAAM,CACpB,MAAMC,EAAiB,CAAA,EACjBC,GAAgBL,GAAA,YAAAA,EAAI,MAAM,QAAS,CAAA,EAEzC,cAAO,KAAKK,CAAa,EAAE,QAASC,GAAQ,CAC1CF,EAAeG,WAASD,CAAG,CAAY,EAAIP,EAAMQ,EAAA,SAASD,CAAG,CAAC,CAAA,CAC/D,EACM,CAAE,GAAGF,EAAgB,GAAGF,EAAM,CACtC,CACH"}