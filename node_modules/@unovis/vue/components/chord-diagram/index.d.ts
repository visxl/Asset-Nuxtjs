import { ChordDiagram, ChordInputNode, ChordInputLink } from '@unovis/ts';
export declare const VisChordDiagramSelectors: typeof import("@unovis/ts/lib/components/chord-diagram/style");
declare const _default: <N extends ChordInputNode, L extends ChordInputLink>(__VLS_props: any, __VLS_ctx?: {
    attrs: any;
    emit: any;
    slots: any;
}, __VLS_expose?: any, __VLS_setup?: Promise<{
    props: {
        duration?: number;
        events?: {
            [selector: string]: {
                touchstart?: import("@unovis/ts").VisEventCallback<any>;
                touchmove?: import("@unovis/ts").VisEventCallback<any>;
                touchend?: import("@unovis/ts").VisEventCallback<any>;
                mouseover?: import("@unovis/ts").VisEventCallback<any>;
                mousemove?: import("@unovis/ts").VisEventCallback<any>;
                mousedown?: import("@unovis/ts").VisEventCallback<any>;
                mouseup?: import("@unovis/ts").VisEventCallback<any>;
                click?: import("@unovis/ts").VisEventCallback<any>;
                auxclick?: import("@unovis/ts").VisEventCallback<any>;
                contextmenu?: import("@unovis/ts").VisEventCallback<any>;
                dblclick?: import("@unovis/ts").VisEventCallback<any>;
                mouseenter?: import("@unovis/ts").VisEventCallback<any>;
                mouseleave?: import("@unovis/ts").VisEventCallback<any>;
                mouseout?: import("@unovis/ts").VisEventCallback<any>;
                scroll?: import("@unovis/ts").VisEventCallback<any>;
                select?: import("@unovis/ts").VisEventCallback<any>;
                wheel?: import("@unovis/ts").VisEventCallback<any>;
                pointerdown?: import("@unovis/ts").VisEventCallback<any>;
                pointerup?: import("@unovis/ts").VisEventCallback<any>;
                pointerout?: import("@unovis/ts").VisEventCallback<any>;
                pointermove?: import("@unovis/ts").VisEventCallback<any>;
            };
        };
        attributes?: {
            [selector: string]: {
                [attr: string]: string | number | boolean | ((datum: any) => string | number | boolean);
            };
        };
        data?: {
            nodes: N[];
            links?: L[];
        };
        angleRange?: [number, number];
        cornerRadius?: import("@unovis/ts").NumericAccessor<import("@unovis/ts").ChordNodeDatum<N>>;
        highlightedNodeId?: string | number;
        highlightedLinkIds?: (string | number)[];
        linkColor?: import("@unovis/ts").ColorAccessor<import("@unovis/ts").ChordLinkDatum<N, L>>;
        linkValue?: import("@unovis/ts").NumericAccessor<import("@unovis/ts").ChordLinkDatum<N, L>>;
        nodeLevels?: string[];
        nodeWidth?: number;
        nodeColor?: import("@unovis/ts").ColorAccessor<import("@unovis/ts").ChordNodeDatum<N>>;
        nodeLabel?: import("@unovis/ts").StringAccessor<import("@unovis/ts").ChordNodeDatum<N>>;
        nodeLabelColor?: import("@unovis/ts").StringAccessor<import("@unovis/ts").ChordNodeDatum<N>>;
        nodeLabelAlignment?: import("@unovis/ts").GenericAccessor<string, import("@unovis/ts").ChordNodeDatum<N>>;
        padAngle?: number;
        radiusScaleExponent?: number;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        component: import("vue").Ref<ChordDiagram<N, L>>;
    }>): void;
    attrs: any;
    slots: {};
    emit: any;
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: any;
};
export default _default;
