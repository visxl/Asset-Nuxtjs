import { defineComponent as p, inject as m, computed as g, ref as v, onMounted as h, nextTick as y, onUnmounted as f, watch as u, openBlock as F, createElementBlock as _ } from "vue";
import { ChordDiagram as c } from "@unovis/ts";
import { useForwardProps as C, arePropsEqual as b } from "../../utils/props.js";
import { componentAccessorKey as k } from "../../utils/context.js";
const x = { "data-vis-component": "" }, w = c.selectors, E = /* @__PURE__ */ p({
  __name: "index",
  props: {
    angleRange: {},
    cornerRadius: { type: [Function, Number, null] },
    highlightedNodeId: {},
    highlightedLinkIds: {},
    linkColor: { type: [Function, String, Array, null] },
    linkValue: { type: [Function, Number, null] },
    nodeLevels: {},
    nodeWidth: {},
    nodeColor: { type: [Function, String, Array, null] },
    nodeLabel: { type: [Function, String, null] },
    nodeLabelColor: { type: [Function, String, null] },
    nodeLabelAlignment: { type: [Function, null] },
    padAngle: {},
    radiusScaleExponent: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(s, { expose: d }) {
    const r = s, t = m(k), o = g(() => t.data.value ?? r.data), a = C(r), n = v();
    return h(() => {
      y(() => {
        var e;
        n.value = new c(a.value), (e = n.value) == null || e.setData(o.value), t.update(n.value);
      });
    }), f(() => {
      var e;
      (e = n.value) == null || e.destroy(), t.destroy();
    }), u(a, (e, l) => {
      var i;
      b(e, l) || (i = n.value) == null || i.setConfig(a.value);
    }), u(o, () => {
      var e;
      (e = n.value) == null || e.setData(o.value);
    }), d({
      component: n
    }), (e, l) => (F(), _("div", x));
  }
});
export {
  w as VisChordDiagramSelectors,
  E as default
};
//# sourceMappingURL=index.js.map
