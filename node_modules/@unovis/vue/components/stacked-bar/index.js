import { defineComponent as d, inject as m, computed as y, ref as v, onMounted as b, nextTick as f, onUnmounted as x, watch as i, openBlock as F, createElementBlock as S } from "vue";
import { StackedBar as l } from "@unovis/ts";
import { useForwardProps as _, arePropsEqual as g } from "../../utils/props.js";
import { componentAccessorKey as h } from "../../utils/context.js";
const B = { "data-vis-component": "" }, j = l.selectors, w = /* @__PURE__ */ d({
  __name: "index",
  props: {
    color: { type: [Function, String, Array, null] },
    barWidth: {},
    barMaxWidth: {},
    dataStep: {},
    barPadding: {},
    roundedCorners: { type: [Number, Boolean] },
    cursor: { type: [Function, String, null] },
    barMinHeight1Px: { type: Boolean },
    barMinHeightZeroValue: {},
    orientation: {},
    x: { type: [Function, Number, null] },
    y: { type: [Function, Number, null, Array] },
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(s, { expose: p }) {
    const r = s, o = m(h), n = y(() => o.data.value ?? r.data), a = _(r), t = v();
    return b(() => {
      f(() => {
        var e;
        t.value = new l(a.value), (e = t.value) == null || e.setData(n.value), o.update(t.value);
      });
    }), x(() => {
      var e;
      (e = t.value) == null || e.destroy(), o.destroy();
    }), i(a, (e, c) => {
      var u;
      g(e, c) || (u = t.value) == null || u.setConfig(a.value);
    }), i(n, () => {
      var e;
      (e = t.value) == null || e.setData(n.value);
    }), p({
      component: t
    }), (e, c) => (F(), S("div", B));
  }
});
export {
  j as VisStackedBarSelectors,
  w as default
};
//# sourceMappingURL=index.js.map
