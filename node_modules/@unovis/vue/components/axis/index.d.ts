import { Axis } from '@unovis/ts';
export declare const VisAxisSelectors: typeof import("@unovis/ts/lib/components/axis/style");
declare const _default: <Datum>(__VLS_props: any, __VLS_ctx?: {
    attrs: any;
    emit: any;
    slots: any;
}, __VLS_expose?: any, __VLS_setup?: Promise<{
    props: {
        duration?: number;
        events?: {
            [selector: string]: {
                touchstart?: import("@unovis/ts").VisEventCallback<any>;
                touchmove?: import("@unovis/ts").VisEventCallback<any>;
                touchend?: import("@unovis/ts").VisEventCallback<any>;
                mouseover?: import("@unovis/ts").VisEventCallback<any>;
                mousemove?: import("@unovis/ts").VisEventCallback<any>;
                mousedown?: import("@unovis/ts").VisEventCallback<any>;
                mouseup?: import("@unovis/ts").VisEventCallback<any>;
                click?: import("@unovis/ts").VisEventCallback<any>;
                auxclick?: import("@unovis/ts").VisEventCallback<any>;
                contextmenu?: import("@unovis/ts").VisEventCallback<any>;
                dblclick?: import("@unovis/ts").VisEventCallback<any>;
                mouseenter?: import("@unovis/ts").VisEventCallback<any>;
                mouseleave?: import("@unovis/ts").VisEventCallback<any>;
                mouseout?: import("@unovis/ts").VisEventCallback<any>;
                scroll?: import("@unovis/ts").VisEventCallback<any>;
                select?: import("@unovis/ts").VisEventCallback<any>;
                wheel?: import("@unovis/ts").VisEventCallback<any>;
                pointerdown?: import("@unovis/ts").VisEventCallback<any>;
                pointerup?: import("@unovis/ts").VisEventCallback<any>;
                pointerout?: import("@unovis/ts").VisEventCallback<any>;
                pointermove?: import("@unovis/ts").VisEventCallback<any>;
            };
        };
        attributes?: {
            [selector: string]: {
                [attr: string]: string | number | boolean | ((datum: any) => string | number | boolean);
            };
        };
        data?: Datum[];
        x?: import("@unovis/ts").NumericAccessor<Datum>;
        y?: import("@unovis/ts").NumericAccessor<Datum> | import("@unovis/ts").NumericAccessor<Datum>[];
        label?: string;
        color?: string | string[] | ((d: Datum, i: number, ...any: unknown[]) => string) | ((d: Datum[], i: number, ...any: unknown[]) => string);
        id?: (d: Datum, i: number, ...any: any[]) => string;
        xScale?: import("@unovis/ts").ContinuousScale;
        yScale?: import("@unovis/ts").ContinuousScale;
        excludeFromDomainCalculation?: boolean;
        position?: string;
        type?: string;
        fullSize?: boolean;
        labelFontSize?: string;
        labelMargin?: number;
        labelColor?: string;
        gridLine?: boolean;
        tickLine?: boolean;
        domainLine?: boolean;
        minMaxTicksOnly?: boolean;
        tickFormat?: (tick: number | Date, i: number, ticks: number[] | Date[]) => string;
        tickValues?: number[];
        numTicks?: number;
        tickTextFitMode?: string;
        tickTextWidth?: number;
        tickTextSeparator?: string | string[];
        tickTextForceWordBreak?: boolean;
        tickTextTrimType?: string;
        tickTextFontSize?: string;
        tickTextAlign?: string;
        tickTextColor?: string;
        tickTextAngle?: number;
        tickPadding?: number;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        component: import("vue").Ref<Axis<Datum>>;
    }>): void;
    attrs: any;
    slots: {};
    emit: any;
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: any;
};
export default _default;
