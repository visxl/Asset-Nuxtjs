import { Sankey } from '@unovis/ts';
export declare const VisSankeySelectors: typeof import("@unovis/ts/lib/components/sankey/style");
declare const _default: <N extends import("@unovis/ts").GraphInputNode, L extends import("@unovis/ts").GraphInputLink>(__VLS_props: any, __VLS_ctx?: {
    attrs: any;
    emit: any;
    slots: any;
}, __VLS_expose?: any, __VLS_setup?: Promise<{
    props: {
        duration?: number;
        events?: {
            [selector: string]: {
                touchstart?: import("@unovis/ts").VisEventCallback<any>;
                touchmove?: import("@unovis/ts").VisEventCallback<any>;
                touchend?: import("@unovis/ts").VisEventCallback<any>;
                mouseover?: import("@unovis/ts").VisEventCallback<any>;
                mousemove?: import("@unovis/ts").VisEventCallback<any>;
                mousedown?: import("@unovis/ts").VisEventCallback<any>;
                mouseup?: import("@unovis/ts").VisEventCallback<any>;
                click?: import("@unovis/ts").VisEventCallback<any>;
                auxclick?: import("@unovis/ts").VisEventCallback<any>;
                contextmenu?: import("@unovis/ts").VisEventCallback<any>;
                dblclick?: import("@unovis/ts").VisEventCallback<any>;
                mouseenter?: import("@unovis/ts").VisEventCallback<any>;
                mouseleave?: import("@unovis/ts").VisEventCallback<any>;
                mouseout?: import("@unovis/ts").VisEventCallback<any>;
                scroll?: import("@unovis/ts").VisEventCallback<any>;
                select?: import("@unovis/ts").VisEventCallback<any>;
                wheel?: import("@unovis/ts").VisEventCallback<any>;
                pointerdown?: import("@unovis/ts").VisEventCallback<any>;
                pointerup?: import("@unovis/ts").VisEventCallback<any>;
                pointerout?: import("@unovis/ts").VisEventCallback<any>;
                pointermove?: import("@unovis/ts").VisEventCallback<any>;
            };
        };
        attributes?: {
            [selector: string]: {
                [attr: string]: string | number | boolean | ((datum: any) => string | number | boolean);
            };
        };
        data?: {
            nodes: N[];
            links?: L[];
        };
        label?: import("@unovis/ts").StringAccessor<import("@unovis/ts").SankeyNode<N, L>>;
        id?: (d: import("@unovis/ts").GraphInputNode | import("@unovis/ts").GraphInputLink, i: number, ...any: unknown[]) => string;
        labelFontSize?: number;
        labelColor?: import("@unovis/ts").ColorAccessor<import("@unovis/ts").SankeyNode<N, L>>;
        linkColor?: import("@unovis/ts").StringAccessor<import("@unovis/ts").SankeyLink<N, L>>;
        linkValue?: import("@unovis/ts").NumericAccessor<L>;
        nodeWidth?: number;
        nodeColor?: import("@unovis/ts").ColorAccessor<import("@unovis/ts").SankeyNode<N, L>>;
        nodeIcon?: import("@unovis/ts").StringAccessor<import("@unovis/ts").SankeyNode<N, L>>;
        nodeSort?: (node1: import("@unovis/ts").SankeyNode<N, L>, node2: import("@unovis/ts").SankeyNode<N, L>) => number;
        heightNormalizationCoeff?: number;
        exitTransitionType?: import("@unovis/ts").SankeyExitTransitionType;
        enterTransitionType?: import("@unovis/ts").SankeyEnterTransitionType;
        highlightSubtreeOnHover?: boolean;
        highlightDuration?: number;
        highlightDelay?: number;
        iterations?: number;
        linkSort?: (link1: import("@unovis/ts").SankeyLink<N, L>, link2: import("@unovis/ts").SankeyLink<N, L>) => number;
        nodeAlign?: import("@unovis/ts").SankeyNodeAlign;
        nodeHorizontalSpacing?: number;
        nodeMinHeight?: number;
        nodeMaxHeight?: number;
        nodePadding?: number;
        showSingleNode?: boolean;
        nodeCursor?: import("@unovis/ts").StringAccessor<import("@unovis/ts").SankeyNode<N, L>>;
        nodeFixedValue?: import("@unovis/ts").NumericAccessor<N>;
        nodeIconColor?: import("@unovis/ts").ColorAccessor<import("@unovis/ts").SankeyNode<N, L>>;
        linkCursor?: import("@unovis/ts").StringAccessor<import("@unovis/ts").SankeyLink<N, L>>;
        subLabel?: import("@unovis/ts").StringAccessor<import("@unovis/ts").SankeyNode<N, L>>;
        labelPosition?: import("@unovis/ts").GenericAccessor<string, import("@unovis/ts").SankeyNode<N, L>>;
        labelVerticalAlign?: string;
        labelBackground?: boolean;
        labelFit?: import("@unovis/ts").FitMode;
        labelMaxWidth?: number;
        labelExpandTrimmedOnHover?: boolean;
        labelTrimMode?: import("@unovis/ts").TrimMode;
        labelTextSeparator?: string[];
        labelForceWordBreak?: boolean;
        labelCursor?: import("@unovis/ts").StringAccessor<import("@unovis/ts").SankeyNode<N, L>>;
        labelVisibility?: (d: import("@unovis/ts").SankeyNode<N, L>, bbox: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, hovered: boolean) => boolean;
        subLabelFontSize?: number;
        subLabelColor?: import("@unovis/ts").ColorAccessor<import("@unovis/ts").SankeyNode<N, L>>;
        subLabelPlacement?: string;
        subLabelToLabelInlineWidthRatio?: number;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        component: import("vue").Ref<Sankey<N, L>>;
    }>): void;
    attrs: any;
    slots: {};
    emit: any;
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: any;
};
export default _default;
