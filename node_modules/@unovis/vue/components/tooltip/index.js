import { defineComponent as p, inject as m, ref as u, onMounted as d, nextTick as f, onUnmounted as v, watch as _, openBlock as h, createElementBlock as x } from "vue";
import { Tooltip as c } from "@unovis/ts";
import { useForwardProps as g, arePropsEqual as P } from "../../utils/props.js";
import { tooltipAccessorKey as k } from "../../utils/context.js";
const w = { "data-vis-tooltip": "" }, B = c.selectors, C = /* @__PURE__ */ p({
  __name: "index",
  props: {
    components: {},
    container: {},
    horizontalPlacement: {},
    horizontalShift: {},
    verticalPlacement: {},
    verticalShift: {},
    triggers: {},
    attributes: {},
    data: {}
  },
  setup(a, { expose: i }) {
    const l = a, n = m(k), t = g(l), o = u();
    return d(() => {
      f(() => {
        o.value = new c(t.value), n.update(o.value);
      });
    }), v(() => {
      var e;
      (e = o.value) == null || e.destroy(), n.destroy();
    }), _(t, (e, r) => {
      var s;
      P(e, r) || (s = o.value) == null || s.setConfig(t.value);
    }), i({
      component: o
    }), (e, r) => (h(), x("div", w));
  }
});
export {
  B as VisTooltipSelectors,
  C as default
};
//# sourceMappingURL=index.js.map
