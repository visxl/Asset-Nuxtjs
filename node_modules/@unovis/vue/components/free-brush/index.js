import { defineComponent as d, inject as m, computed as y, ref as v, onMounted as F, nextTick as h, onUnmounted as f, watch as s, openBlock as B, createElementBlock as x } from "vue";
import { FreeBrush as i } from "@unovis/ts";
import { useForwardProps as _, arePropsEqual as b } from "../../utils/props.js";
import { componentAccessorKey as S } from "../../utils/context.js";
const g = { "data-vis-component": "" }, C = i.selectors, D = /* @__PURE__ */ d({
  __name: "index",
  props: {
    mode: {},
    onBrush: { type: Function },
    onBrushStart: { type: Function },
    onBrushMove: { type: Function },
    onBrushEnd: { type: Function },
    handleWidth: {},
    selection: {},
    selectionMinLength: {},
    autoHide: { type: Boolean },
    x: { type: [Function, Number, null] },
    y: { type: [Function, Number, null, Array] },
    id: { type: Function },
    color: { type: [Function, String, Array, null] },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(l, { expose: p }) {
    const c = l, o = m(S), n = y(() => o.data.value ?? c.data), a = _(c), t = v();
    return F(() => {
      h(() => {
        var e;
        t.value = new i(a.value), (e = t.value) == null || e.setData(n.value), o.update(t.value);
      });
    }), f(() => {
      var e;
      (e = t.value) == null || e.destroy(), o.destroy();
    }), s(a, (e, r) => {
      var u;
      b(e, r) || (u = t.value) == null || u.setConfig(a.value);
    }), s(n, () => {
      var e;
      (e = t.value) == null || e.setData(n.value);
    }), p({
      component: t
    }), (e, r) => (B(), x("div", g));
  }
});
export {
  C as VisFreeBrushSelectors,
  D as default
};
//# sourceMappingURL=index.js.map
