import { defineComponent as d, inject as m, computed as y, ref as v, onMounted as f, nextTick as g, onUnmounted as x, watch as i, openBlock as F, createElementBlock as b } from "vue";
import { GroupedBar as s } from "@unovis/ts";
import { useForwardProps as _, arePropsEqual as h } from "../../utils/props.js";
import { componentAccessorKey as B } from "../../utils/context.js";
const S = { "data-vis-component": "" }, w = s.selectors, A = /* @__PURE__ */ d({
  __name: "index",
  props: {
    color: { type: [Function, String, Array, null] },
    groupWidth: {},
    groupMaxWidth: {},
    dataStep: {},
    groupPadding: {},
    barPadding: {},
    roundedCorners: { type: [Number, Boolean] },
    barMinHeight: {},
    cursor: { type: [Function, String, null] },
    orientation: {},
    x: { type: [Function, Number, null] },
    y: { type: [Function, Number, null, Array] },
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(p, { expose: l }) {
    const r = p, o = m(B), n = y(() => o.data.value ?? r.data), a = _(r), t = v();
    return f(() => {
      g(() => {
        var e;
        t.value = new s(a.value), (e = t.value) == null || e.setData(n.value), o.update(t.value);
      });
    }), x(() => {
      var e;
      (e = t.value) == null || e.destroy(), o.destroy();
    }), i(a, (e, u) => {
      var c;
      h(e, u) || (c = t.value) == null || c.setConfig(a.value);
    }), i(n, () => {
      var e;
      (e = t.value) == null || e.setData(n.value);
    }), l({
      component: t
    }), (e, u) => (F(), b("div", S));
  }
});
export {
  w as VisGroupedBarSelectors,
  A as default
};
//# sourceMappingURL=index.js.map
