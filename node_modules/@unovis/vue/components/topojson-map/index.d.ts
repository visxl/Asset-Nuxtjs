import { TopoJSONMap } from '@unovis/ts';
export declare const VisTopoJSONMapSelectors: typeof import("@unovis/ts/lib/components/topojson-map/style");
declare const _default: <AreaDatum, PointDatum, LinkDatum>(__VLS_props: any, __VLS_ctx?: {
    attrs: any;
    emit: any;
    slots: any;
}, __VLS_expose?: any, __VLS_setup?: Promise<{
    props: {
        duration?: number;
        events?: {
            [selector: string]: {
                touchstart?: import("@unovis/ts").VisEventCallback<any>;
                touchmove?: import("@unovis/ts").VisEventCallback<any>;
                touchend?: import("@unovis/ts").VisEventCallback<any>;
                mouseover?: import("@unovis/ts").VisEventCallback<any>;
                mousemove?: import("@unovis/ts").VisEventCallback<any>;
                mousedown?: import("@unovis/ts").VisEventCallback<any>;
                mouseup?: import("@unovis/ts").VisEventCallback<any>;
                click?: import("@unovis/ts").VisEventCallback<any>;
                auxclick?: import("@unovis/ts").VisEventCallback<any>;
                contextmenu?: import("@unovis/ts").VisEventCallback<any>;
                dblclick?: import("@unovis/ts").VisEventCallback<any>;
                mouseenter?: import("@unovis/ts").VisEventCallback<any>;
                mouseleave?: import("@unovis/ts").VisEventCallback<any>;
                mouseout?: import("@unovis/ts").VisEventCallback<any>;
                scroll?: import("@unovis/ts").VisEventCallback<any>;
                select?: import("@unovis/ts").VisEventCallback<any>;
                wheel?: import("@unovis/ts").VisEventCallback<any>;
                pointerdown?: import("@unovis/ts").VisEventCallback<any>;
                pointerup?: import("@unovis/ts").VisEventCallback<any>;
                pointerout?: import("@unovis/ts").VisEventCallback<any>;
                pointermove?: import("@unovis/ts").VisEventCallback<any>;
            };
        };
        attributes?: {
            [selector: string]: {
                [attr: string]: string | number | boolean | ((datum: any) => string | number | boolean);
            };
        };
        data?: {
            areas?: AreaDatum[];
            points?: PointDatum[];
            links?: LinkDatum[];
        };
        linkColor?: import("@unovis/ts").ColorAccessor<LinkDatum>;
        disableZoom?: boolean;
        linkWidth?: import("@unovis/ts").NumericAccessor<LinkDatum>;
        linkCursor?: import("@unovis/ts").StringAccessor<LinkDatum>;
        projection?: import("d3-geo").GeoProjection;
        topojson?: import("topojson-specification").Topology<import("topojson-specification").Objects<{
            [name: string]: any;
        }>>;
        mapFeatureName?: string;
        mapFitToPoints?: boolean;
        zoomFactor?: number;
        zoomExtent?: number[];
        zoomDuration?: number;
        linkId?: import("@unovis/ts").StringAccessor<LinkDatum>;
        linkSource?: (l: LinkDatum) => string | number | PointDatum;
        linkTarget?: (l: LinkDatum) => string | number | PointDatum;
        areaId?: import("@unovis/ts").StringAccessor<AreaDatum>;
        areaColor?: import("@unovis/ts").ColorAccessor<AreaDatum>;
        areaCursor?: import("@unovis/ts").StringAccessor<AreaDatum>;
        pointColor?: import("@unovis/ts").ColorAccessor<PointDatum>;
        pointRadius?: import("@unovis/ts").NumericAccessor<PointDatum>;
        pointStrokeWidth?: import("@unovis/ts").NumericAccessor<PointDatum>;
        pointCursor?: import("@unovis/ts").StringAccessor<PointDatum>;
        longitude?: import("@unovis/ts").NumericAccessor<PointDatum>;
        latitude?: import("@unovis/ts").NumericAccessor<PointDatum>;
        pointLabel?: import("@unovis/ts").StringAccessor<PointDatum>;
        pointLabelPosition?: import("@unovis/ts").MapPointLabelPosition;
        pointLabelTextBrightnessRatio?: number;
        pointId?: (d: PointDatum, i: number) => string;
        heatmapMode?: boolean;
        heatmapModeBlurStdDeviation?: number;
        heatmapModeZoomLevelThreshold?: number;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        component: import("vue").Ref<TopoJSONMap<AreaDatum, PointDatum, LinkDatum>>;
    }>): void;
    attrs: any;
    slots: {};
    emit: any;
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: any;
};
export default _default;
