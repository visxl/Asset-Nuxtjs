import { defineComponent as m, inject as d, computed as y, ref as F, onMounted as v, nextTick as S, onUnmounted as g, watch as l, openBlock as b, createElementBlock as f } from "vue";
import { TopoJSONMap as p } from "@unovis/ts";
import { useForwardProps as h, arePropsEqual as k } from "../../utils/props.js";
import { componentAccessorKey as C } from "../../utils/context.js";
const N = { "data-vis-component": "" }, M = p.selectors, j = /* @__PURE__ */ m({
  __name: "index",
  props: {
    projection: { type: [Function, Object] },
    topojson: {},
    mapFeatureName: {},
    mapFitToPoints: { type: Boolean },
    zoomFactor: {},
    disableZoom: { type: Boolean },
    zoomExtent: {},
    zoomDuration: {},
    linkWidth: { type: [Function, Number, null] },
    linkColor: { type: [Function, String, Array, null] },
    linkCursor: { type: [Function, String, null] },
    linkId: { type: [Function, String, null] },
    linkSource: { type: Function },
    linkTarget: { type: Function },
    areaId: { type: [Function, String, null] },
    areaColor: { type: [Function, String, Array, null] },
    areaCursor: { type: [Function, String, null] },
    pointColor: { type: [Function, String, Array, null] },
    pointRadius: { type: [Function, Number, null] },
    pointStrokeWidth: { type: [Function, Number, null] },
    pointCursor: { type: [Function, String, null] },
    longitude: { type: [Function, Number, null] },
    latitude: { type: [Function, Number, null] },
    pointLabel: { type: [Function, String, null] },
    pointLabelPosition: {},
    pointLabelTextBrightnessRatio: {},
    pointId: { type: Function },
    heatmapMode: { type: Boolean },
    heatmapModeBlurStdDeviation: {},
    heatmapModeZoomLevelThreshold: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(c, { expose: s }) {
    const a = c, n = d(C), e = y(() => n.data.value ?? a.data), i = h(a), o = F();
    return v(() => {
      S(() => {
        var t;
        o.value = new p(i.value), (t = o.value) == null || t.setData(e.value), n.update(o.value);
      });
    }), g(() => {
      var t;
      (t = o.value) == null || t.destroy(), n.destroy();
    }), l(i, (t, r) => {
      var u;
      k(t, r) || (u = o.value) == null || u.setConfig(i.value);
    }), l(e, () => {
      var t;
      (t = o.value) == null || t.setData(e.value);
    }), s({
      component: o
    }), (t, r) => (b(), f("div", N));
  }
});
export {
  M as VisTopoJSONMapSelectors,
  j as default
};
//# sourceMappingURL=index.js.map
