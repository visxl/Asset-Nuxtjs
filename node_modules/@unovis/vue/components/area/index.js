import { defineComponent as m, inject as d, computed as y, ref as v, onMounted as f, nextTick as F, onUnmounted as x, watch as l, openBlock as b, createElementBlock as _ } from "vue";
import { Area as i } from "@unovis/ts";
import { useForwardProps as g, arePropsEqual as A } from "../../utils/props.js";
import { componentAccessorKey as S } from "../../utils/context.js";
const h = { "data-vis-component": "" }, w = i.selectors, C = /* @__PURE__ */ m({
  __name: "index",
  props: {
    color: { type: [Function, String, Array, null] },
    curveType: {},
    baseline: { type: [Function, Number, null] },
    opacity: { type: [Function, Number, null] },
    cursor: { type: [Function, String, null] },
    minHeight1Px: { type: Boolean },
    x: { type: [Function, Number, null] },
    y: { type: [Function, Number, null, Array] },
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(s, { expose: p }) {
    const c = s, o = d(S), n = y(() => o.data.value ?? c.data), a = g(c), t = v();
    return f(() => {
      F(() => {
        var e;
        t.value = new i(a.value), (e = t.value) == null || e.setData(n.value), o.update(t.value);
      });
    }), x(() => {
      var e;
      (e = t.value) == null || e.destroy(), o.destroy();
    }), l(a, (e, r) => {
      var u;
      A(e, r) || (u = t.value) == null || u.setConfig(a.value);
    }), l(n, () => {
      var e;
      (e = t.value) == null || e.setData(n.value);
    }), p({
      component: t
    }), (e, r) => (b(), _("div", h));
  }
});
export {
  w as VisAreaSelectors,
  C as default
};
//# sourceMappingURL=index.js.map
