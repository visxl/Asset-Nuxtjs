import { defineComponent as d, inject as m, computed as y, ref as v, onMounted as f, nextTick as F, onUnmounted as h, watch as l, openBlock as x, createElementBlock as _ } from "vue";
import { Line as i } from "@unovis/ts";
import { useForwardProps as b, arePropsEqual as g } from "../../utils/props.js";
import { componentAccessorKey as S } from "../../utils/context.js";
const k = { "data-vis-component": "" }, w = i.selectors, C = /* @__PURE__ */ d({
  __name: "index",
  props: {
    color: { type: [Function, String, Array, null] },
    curveType: {},
    lineWidth: {},
    lineDashArray: { type: [Function, null] },
    fallbackValue: {},
    highlightOnHover: { type: Boolean },
    cursor: { type: [Function, String, null] },
    x: { type: [Function, Number, null] },
    y: { type: [Function, Number, null, Array] },
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(s, { expose: p }) {
    const c = s, n = m(S), o = y(() => n.data.value ?? c.data), a = b(c), t = v();
    return f(() => {
      F(() => {
        var e;
        t.value = new i(a.value), (e = t.value) == null || e.setData(o.value), n.update(t.value);
      });
    }), h(() => {
      var e;
      (e = t.value) == null || e.destroy(), n.destroy();
    }), l(a, (e, r) => {
      var u;
      g(e, r) || (u = t.value) == null || u.setConfig(a.value);
    }), l(o, () => {
      var e;
      (e = t.value) == null || e.setData(o.value);
    }), p({
      component: t
    }), (e, r) => (x(), _("div", k));
  }
});
export {
  w as VisLineSelectors,
  C as default
};
//# sourceMappingURL=index.js.map
