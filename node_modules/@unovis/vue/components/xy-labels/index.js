import { defineComponent as y, inject as m, computed as d, ref as F, onMounted as g, nextTick as b, onUnmounted as v, watch as a, openBlock as S, createElementBlock as f } from "vue";
import { XYLabels as i } from "@unovis/ts";
import { useForwardProps as x, arePropsEqual as _ } from "../../utils/props.js";
import { componentAccessorKey as C } from "../../utils/context.js";
const B = { "data-vis-component": "" }, N = i.selectors, P = /* @__PURE__ */ y({
  __name: "index",
  props: {
    color: { type: [Function, String, Array, null] },
    y: { type: [Function, Number, null] },
    xPositioning: { type: [Function, null] },
    yPositioning: { type: [Function, null] },
    labelFontSize: { type: [Function, Number, null] },
    label: { type: [Function, String, null] },
    backgroundColor: { type: [Function, String, Array, null] },
    cursor: { type: [Function, String, null] },
    labelTextBrightnessRatio: {},
    clustering: { type: Boolean },
    clusterLabel: { type: [Function, String, null] },
    clusterFontSize: { type: [Function, Number, null] },
    clusterBackgroundColor: { type: [Function, String, Array, null] },
    clusterCursor: { type: [Function, String, null] },
    clusterLabelColor: { type: [Function, String, Array, null] },
    x: { type: [Function, Number, null] },
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(s, { expose: p }) {
    const u = s, n = m(C), o = d(() => n.data.value ?? u.data), l = x(u), e = F();
    return g(() => {
      b(() => {
        var t;
        e.value = new i(l.value), (t = e.value) == null || t.setData(o.value), n.update(e.value);
      });
    }), v(() => {
      var t;
      (t = e.value) == null || t.destroy(), n.destroy();
    }), a(l, (t, r) => {
      var c;
      _(t, r) || (c = e.value) == null || c.setConfig(l.value);
    }), a(o, () => {
      var t;
      (t = e.value) == null || t.setData(o.value);
    }), p({
      component: e
    }), (t, r) => (S(), f("div", B));
  }
});
export {
  N as VisXYLabelsSelectors,
  P as default
};
//# sourceMappingURL=index.js.map
