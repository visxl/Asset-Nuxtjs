import { XYContainer, XYComponentCore, Tooltip, Crosshair, Axis, Annotations } from '@unovis/ts';
declare const _default: <T>(__VLS_props: any, __VLS_ctx?: {
    attrs: any;
    emit: any;
    slots: any;
}, __VLS_expose?: any, __VLS_setup?: Promise<{
    props: {
        duration?: number;
        data?: T[];
        width?: string | number;
        xScale?: import("@unovis/ts").ContinuousScale;
        yScale?: import("@unovis/ts").ContinuousScale;
        tooltip?: Tooltip;
        components?: XYComponentCore<T, Partial<import("@unovis/ts").XYComponentConfigInterface<T>>>[];
        annotations?: Annotations;
        margin?: import("@unovis/ts").Spacing;
        padding?: import("@unovis/ts").Spacing;
        sizing?: string;
        height?: string | number;
        svgDefs?: string;
        ariaLabel?: string;
        xDomain?: [number, number];
        xDomainMinConstraint?: [number, number];
        xDomainMaxConstraint?: [number, number];
        xRange?: [number, number];
        yDomain?: [number, number];
        yDomainMinConstraint?: [number, number];
        yDomainMaxConstraint?: [number, number];
        yRange?: [number, number];
        yDirection?: string;
        xAxis?: Axis<T>;
        yAxis?: Axis<T>;
        autoMargin?: boolean;
        crosshair?: Crosshair<T>;
        preventEmptyDomain?: boolean;
        scaleByDomain?: boolean;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        component: import("vue").Ref<XYContainer<T>>;
    }>): void;
    attrs: any;
    slots: {
        default?(_: {}): any;
    };
    emit: any;
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: any;
};
export default _default;
