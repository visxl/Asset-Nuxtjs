import { LeafletMap, GenericDataRecord } from '@unovis/ts';
export declare const VisLeafletMapSelectors: typeof import("@unovis/ts/lib/components/leaflet-map/style");
declare const _default: <Datum extends GenericDataRecord>(__VLS_props: any, __VLS_ctx?: {
    attrs: any;
    emit: any;
    slots: any;
}, __VLS_expose?: any, __VLS_setup?: Promise<{
    props: {
        duration?: number;
        events?: {
            [selector: string]: {
                touchstart?: import("@unovis/ts").VisEventCallback<any>;
                touchmove?: import("@unovis/ts").VisEventCallback<any>;
                touchend?: import("@unovis/ts").VisEventCallback<any>;
                mouseover?: import("@unovis/ts").VisEventCallback<any>;
                mousemove?: import("@unovis/ts").VisEventCallback<any>;
                mousedown?: import("@unovis/ts").VisEventCallback<any>;
                mouseup?: import("@unovis/ts").VisEventCallback<any>;
                click?: import("@unovis/ts").VisEventCallback<any>;
                auxclick?: import("@unovis/ts").VisEventCallback<any>;
                contextmenu?: import("@unovis/ts").VisEventCallback<any>;
                dblclick?: import("@unovis/ts").VisEventCallback<any>;
                mouseenter?: import("@unovis/ts").VisEventCallback<any>;
                mouseleave?: import("@unovis/ts").VisEventCallback<any>;
                mouseout?: import("@unovis/ts").VisEventCallback<any>;
                scroll?: import("@unovis/ts").VisEventCallback<any>;
                select?: import("@unovis/ts").VisEventCallback<any>;
                wheel?: import("@unovis/ts").VisEventCallback<any>;
                pointerdown?: import("@unovis/ts").VisEventCallback<any>;
                pointerup?: import("@unovis/ts").VisEventCallback<any>;
                pointerout?: import("@unovis/ts").VisEventCallback<any>;
                pointermove?: import("@unovis/ts").VisEventCallback<any>;
            };
        };
        attributes?: {
            [selector: string]: {
                [attr: string]: string | number | boolean | ((datum: any) => string | number | boolean);
            };
        };
        data?: Datum[];
        width?: string | number;
        tooltip?: import("@unovis/ts").Tooltip;
        zoomDuration?: number;
        pointColor?: import("@unovis/ts").ColorAccessor<import("@unovis/ts").LeafletMapPointDatum<Datum>>;
        pointRadius?: import("@unovis/ts").NumericAccessor<import("@unovis/ts").LeafletMapPointDatum<Datum>>;
        pointCursor?: import("@unovis/ts").StringAccessor<import("@unovis/ts").LeafletMapPointDatum<Datum>>;
        pointLabel?: import("@unovis/ts").StringAccessor<import("@unovis/ts").LeafletMapPointDatum<Datum>>;
        pointId?: import("@unovis/ts").StringAccessor<Datum>;
        clusterLabel?: import("@unovis/ts").StringAccessor<import("@unovis/ts").LeafletMapClusterDatum<Datum>>;
        clusterLabelColor?: import("@unovis/ts").StringAccessor<import("@unovis/ts").LeafletMapClusterDatum<Datum>>;
        height?: string | number;
        ariaLabel?: string;
        flyToDuration?: number;
        fitViewPadding?: [number, number];
        initialBounds?: import("@unovis/ts").Bounds;
        fitBoundsOnUpdate?: import("@unovis/ts").Bounds;
        fitViewOnInit?: boolean;
        fitViewOnUpdate?: boolean;
        styleDarkTheme?: string | import("maplibre-gl").StyleSpecification;
        accessToken?: string;
        attribution?: string[];
        renderer?: string;
        onMapInitialized?: () => void;
        onMapMoveZoom?: ({ mapCenter, zoomLevel, bounds }: import("@unovis/ts").MapZoomState) => void;
        onMapMoveStart?: ({ mapCenter, zoomLevel, bounds }: import("@unovis/ts").MapZoomState) => void;
        onMapMoveEnd?: ({ mapCenter, zoomLevel, bounds }: import("@unovis/ts").MapZoomState) => void;
        onMapZoomStart?: ({ mapCenter, zoomLevel, bounds }: import("@unovis/ts").MapZoomState) => void;
        onMapZoomEnd?: ({ mapCenter, zoomLevel, bounds }: import("@unovis/ts").MapZoomState) => void;
        onMapClick?: ({ mapCenter, zoomLevel, bounds }: import("@unovis/ts").MapZoomState) => void;
        pointLongitude?: import("@unovis/ts").NumericAccessor<Datum>;
        pointLatitude?: import("@unovis/ts").NumericAccessor<Datum>;
        pointShape?: import("@unovis/ts").GenericAccessor<string, Datum>;
        pointLabelColor?: import("@unovis/ts").StringAccessor<import("@unovis/ts").LeafletMapPointDatum<Datum>>;
        pointBottomLabel?: import("@unovis/ts").StringAccessor<import("@unovis/ts").LeafletMapPointDatum<Datum>>;
        pointRingWidth?: number;
        selectedPointId?: string;
        clusterColor?: import("@unovis/ts").ColorAccessor<import("@unovis/ts").LeafletMapClusterDatum<Datum>>;
        clusterRadius?: import("@unovis/ts").NumericAccessor<import("@unovis/ts").LeafletMapClusterDatum<Datum>>;
        clusterBottomLabel?: import("@unovis/ts").StringAccessor<import("@unovis/ts").LeafletMapClusterDatum<Datum>>;
        clusterRingWidth?: number;
        clusterBackground?: boolean;
        clusterExpandOnClick?: boolean;
        clusteringDistance?: number;
        colorMap?: import("@unovis/ts").LeafletMapPointStyles<Datum>;
        topoJSONLayer?: {
            sources: any;
            featureName?: string;
            fillProperty?: string;
            strokeProperty?: string;
            fillOpacity?: number;
            strokeOpacity?: number;
            strokeWidth?: number;
        };
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        component: import("vue").Ref<LeafletMap<Datum>>;
    }>): void;
    attrs: any;
    slots: {};
    emit: any;
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: any;
};
export default _default;
