import { addIcon, getIcon as _getIcon } from "@iconify/vue";
import { computed, watch, h, defineComponent } from "vue";
import { getIconCSS } from "@iconify/utils/lib/css/icon";
import { loadIcon } from "./shared.js";
import { useAppConfig, useNuxtApp, useHead, useRuntimeConfig } from "#imports";
let cssSelectors;
const SYMBOL_SERVER_CSS = "NUXT_ICONS_SERVER_CSS";
function escapeCssSelector(selector) {
  return selector.replace(/([^\w-])/g, "\\$1");
}
function getAllSelectors() {
  if (cssSelectors)
    return cssSelectors;
  cssSelectors = /* @__PURE__ */ new Set();
  const filter = (selector) => {
    selector = selector.replace(/^:where\((.*)\)$/, "$1").trim();
    if (selector.startsWith(".")) {
      return selector;
    }
  };
  const scanCssRules = (rules) => {
    if (!rules?.length)
      return;
    for (const rule of rules) {
      if (rule?.cssRules) {
        scanCssRules(rule.cssRules);
      }
      const selectorRaw = rule?.selectorText;
      if (typeof selectorRaw === "string") {
        const selector = filter(selectorRaw);
        if (selector)
          cssSelectors.add(selector);
      }
    }
  };
  for (let i = 0; i < document.styleSheets.length; i++) {
    const rules = document.styleSheets[i].cssRules || document.styleSheets[i].rules;
    scanCssRules(rules);
  }
  return cssSelectors;
}
export const NuxtIconCss = /* @__PURE__ */ defineComponent({
  name: "NuxtIconCss",
  props: {
    name: {
      type: String,
      required: true
    }
  },
  async setup(props) {
    const nuxt = useNuxtApp();
    const options = useAppConfig().icon;
    const cssClass = computed(() => options.cssSelectorPrefix + props.name);
    function getIcon(name) {
      const registry = _getIcon(name);
      if (registry)
        return registry;
      const payload = nuxt.payload.data[name];
      if (payload) {
        addIcon(name, payload);
        return payload;
      }
    }
    const selector = computed(() => "." + escapeCssSelector(cssClass.value));
    function getCSS(icon, withLayer = true) {
      let iconSelector = selector.value;
      if (options.cssWherePseudo) {
        iconSelector = `:where(${iconSelector})`;
      }
      const css = getIconCSS(icon, {
        iconSelector,
        format: "compressed"
      });
      if (options.cssLayer && withLayer) {
        return `@layer ${options.cssLayer} { ${css} }`;
      }
      return css;
    }
    if (import.meta.client) {
      const selectors = getAllSelectors();
      async function mountCSS(icon) {
        if (selectors.has(selector.value)) {
          return;
        }
        const style = document.createElement("style");
        style.textContent = getCSS(icon);
        if (import.meta.dev) {
          style.dataset.nuxtIconDev = props.name;
        }
        document.head.prepend(style);
        selectors.add(selector.value);
      }
      watch(
        () => props.name,
        () => {
          if (selectors.has(selector.value)) {
            return;
          }
          const data = getIcon(props.name);
          if (data) {
            mountCSS(data);
          } else {
            loadIcon(props.name).then((data2) => {
              if (data2)
                mountCSS(data2);
            });
          }
        },
        { immediate: true }
      );
    }
    if (import.meta.server) {
      const configs = useRuntimeConfig().icon || {};
      if (!configs?.serverKnownCssClasses?.includes(cssClass.value)) {
        const icon = await loadIcon(props.name);
        if (icon) {
          let ssrCSS = nuxt.vueApp._context.provides[SYMBOL_SERVER_CSS];
          if (!ssrCSS) {
            ssrCSS = nuxt.vueApp._context.provides[SYMBOL_SERVER_CSS] = /* @__PURE__ */ new Map();
            nuxt.runWithContext(() => {
              useHead({
                style: [
                  () => {
                    const sep = import.meta.dev ? "\n" : "";
                    let css = Array.from(ssrCSS.values()).sort().join(sep);
                    if (options.cssLayer) {
                      css = `@layer ${options.cssLayer} {${sep}${css}${sep}}`;
                    }
                    return { innerHTML: css };
                  }
                ]
              }, {
                tagPriority: "low"
              });
            });
          }
          if (!ssrCSS.has(props.name)) {
            const css = getCSS(icon, false);
            ssrCSS.set(props.name, css);
          }
        }
      }
    }
    return () => h("span", { class: ["iconify", cssClass.value, options.class] });
  }
});
